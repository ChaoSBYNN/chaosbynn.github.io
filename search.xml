<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Could not retrieve mirrorlist http://mirrorlist.centos.org</title>
    <url>/2024/07/02/Could-not-retrieve-mirrorlist-http-mirrorlist-centos-org/</url>
    <content><![CDATA[<blockquote>
<p>Could not retrieve mirrorlist <a class="link"   href="http://mirrorlist.centos.org/" >http://mirrorlist.centos.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="替换-yum-软件源为阿里云镜像源"><a href="#替换-yum-软件源为阿里云镜像源" class="headerlink" title="替换 yum 软件源为阿里云镜像源"></a>替换 yum 软件源为阿里云镜像源</h2><h3 id="备份当前的-yum-软件源文件"><a href="#备份当前的-yum-软件源文件" class="headerlink" title="备份当前的 yum 软件源文件"></a>备份当前的 yum 软件源文件</h3><p>在进行修改之前，首先备份原始的 yum 软件源配置文件。打开终端，输入以下命令备份：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure></div>

<h3 id="编辑-yum-软件源配置文件"><a href="#编辑-yum-软件源配置文件" class="headerlink" title="编辑 yum 软件源配置文件"></a>编辑 yum 软件源配置文件</h3><p>使用文本编辑器(如 <code>vim</code> 或 <code>nano</code>)打开 <code>/etc/yum.repos.d/CentOS-Base.repo</code> 文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure></div>

<h3 id="注释掉原有的镜像源配置"><a href="#注释掉原有的镜像源配置" class="headerlink" title="注释掉原有的镜像源配置"></a>注释掉原有的镜像源配置</h3><p>在打开的文件中，找到 <code>[base]</code>、<code>[updates]</code>、<code>[extras]</code> 和 <code>[centosplus]</code> 等节，将它们的 <code>baseurl</code> 行注释掉(在行首添加 <code>#</code>符号)，同时保留 <code>mirrorlist</code> 行(如果有)。</p>
<p>例如:</p>
<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[base]</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class="line"><span class="attr">mirrorlist</span>=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=os</span><br><span class="line"></span><br><span class="line"><span class="section">[updates]</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class="line"><span class="attr">mirrorlist</span>=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=updates</span><br><span class="line"></span><br><span class="line"><span class="section">[extras]</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span></span><br><span class="line"><span class="attr">mirrorlist</span>=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=extras</span><br><span class="line"></span><br><span class="line"><span class="section">[centosplus]</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/</span></span><br><span class="line"><span class="attr">mirrorlist</span>=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=centosplus</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="添加阿里云镜像源配置"><a href="#添加阿里云镜像源配置" class="headerlink" title="添加阿里云镜像源配置"></a>添加阿里云镜像源配置</h3><div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[base]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Base - mirrors.aliyun.com</span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="section">[updates]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Updates - mirrors.aliyun.com</span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="section">[extras]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Extras - mirrors.aliyun.com</span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="section">[centosplus]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Plus - mirrors.aliyun.com</span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>将 <code>$releasever</code> 替换为您当前系统的 CentOS 版本号,如 <code>7</code> 或 <code>8</code>。</li>
<li>请确保 <code>gpgkey</code> 链接正确，以便验证下载的软件包。</li>
</ul>
<h3 id="保存并退出编辑器"><a href="#保存并退出编辑器" class="headerlink" title="保存并退出编辑器"></a>保存并退出编辑器</h3><p>在编辑完成后，保存文件并退出编辑器。</p>
<h3 id="清理-yum-缓存"><a href="#清理-yum-缓存" class="headerlink" title="清理 yum 缓存"></a>清理 yum 缓存</h3><p>为了确保使用新的镜像源配置，清理当前的 yum 缓存</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></div>

<h3 id="恢复原始配置-可选"><a href="#恢复原始配置-可选" class="headerlink" title="恢复原始配置(可选)"></a>恢复原始配置(可选)</h3><p>如果需要恢复到原始的 CentOS 官方源，可以将之前备份的 <code>/etc/yum.repos.d/CentOS-Base.repo.bak</code> 文件复制回去，并清理 yum 缓存再次测试。</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Do have faith in what you are doing All for a better world</title>
    <url>/2017/02/22/Do-have-faith-in-what-you-are-doing-All-for-a-better-world/</url>
    <content><![CDATA[<blockquote>
<p>转载<br><a class="link"   href="http://www.nowamagic.net/librarys/veda/detail/2502" >http://www.nowamagic.net/librarys/veda/detail/2502 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> Do have faith in what you are doing.</p>
</blockquote>
<p>先不要往下看，试试品尝上面这句话的含义。</p>
<p>引用 Facebook Mark Zuckerberg 的一句话：</p>
<blockquote>
<p>“You have to have passion for what you are doing. If you don’t completely love or believe in what you are doing, the natural thing will be to give up when you face the challenges that will inevitably come. More than anything you have to really have faith in what you are doing.”</p>
</blockquote>
<p>简单翻译如下：</p>
<blockquote>
<p>你必须对你所做的事情很有激情。如果你没有完全喜欢或信任你所做的事情，当你面对挑战的时候，自然而然就会放弃，经不起变革。一定要相信你现在做的事情，对你做的事情保持信仰，这比任何事情都重要。</p>
</blockquote>
<p>我认为，Mark Zuckerberg 确实已做到了改变世界。从校园里走出来的 Facebook，风靡全球。</p>
<p>乔布斯在斯坦福大学的演讲中也谈到：</p>
<blockquote>
<p>你必须找到你所爱的。无论是工作还是爱人。工作将占据你生命中大部分时间，你只有相信自己所做的是伟大的工作, 才能怡然自得。而有伟大成就的唯一途径就是爱你所做的。— Steve Jobs</p>
</blockquote>
<p>乔布斯改变世界了吗？有目共睹。</p>
<p>Do have faith in what you are doing. 或许就是他们成功的共同秘诀。</p>
<h3 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h3><p>我们都知道要做自己喜欢的，但自己真正喜欢什么，却未必清楚。也很少有时间问问自己：这辈子究竟要做些什么？怎么做才无愧此生？生活就像一个没有设置break的while True循环，一旦开始就停不下来了。上班要忙上班的事，周末要聚会，看电影，玩游戏，逛街，把上班时的痛苦补回来，然后在不情愿中迎接下一个周一。这是自己想要的生活吗？</p>
<p>我们先来看看一个问题：如何找到自己所爱的？</p>
<p>真正让自己热血沸腾的是我们可以一直做自己最爱的事，但却没有循序渐进的教程可以帮助我们找到自己所爱的。以往的经验能起一点作用，但无法形成一套体系。</p>
<p>为了找到自己的热情，可以问自己：如果有一百万美元，你想做什么？</p>
<p>典型的回答是：会把这些钱存入银行，然后每年光利息就可以生活了。然后会搬到夏威夷，买一个别墅，品尝所有的美味，看看书，搞点体育运动，等等。</p>
<p>这样的回答有帮助吗？可能吧。比如，你知道了自己原来是个大懒鬼，但这并没有回答背后的问题：如何能做自己喜欢的事，还能挣到钱？</p>
<p>人们从事着自己讨厌的工作，感觉像掉入了陷阱，因为他们无法离开，他们靠着这唯一的收入来维持目前的生活状态，以此来逃避现实，漂流在严酷、漫无目的的生活中，简而言之：活在平静的绝望中。</p>
<p>平静的绝望，这是个深渊。很多人就在这个深渊里，耗费掉自己的一辈子。</p>
<p>你或许会问：他们为什么不辞职，追求自己喜欢的呢？</p>
<p>主要原因有两个：</p>
<ol>
<li>他们不知道自己最喜欢的事</li>
<li>恐惧。他们要维持目前的生活，有账单要付，家人要照顾，怕没有稳定的收入来源，怕别人异样的目光或说三道四，等等。</li>
</ol>
<p>搞定原因1，接下来的就会迎刃而解。</p>
<p>无论你信不信，想要找到自己的激情所在已经是一个很大的进步了。很多人，他们一生都在回避或者根本没想过这个问题。当他们听到这个问题时，会很熟练地忽视之。</p>
<p>如何找到自己所爱的？这是一个很重要的问题，而你必须找到答案。</p>
<p>对，必须要。</p>
<p>你必须自己决定目的地，不然生活就会替你做决定。如果知道了目的地，剩下的就很简单了。你会发现，一旦你找到了自己所爱的，所有的不确定、负担都会从你的肩上滑落，你会很清楚地看到自己的旅程，一趟充满欢喜的旅程。</p>
<h3 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h3><p>为什么找到自己所爱的那么难？</p>
<p>答案是：</p>
<p>这一点都不难。</p>
<p>那为什么这么多人都被这个问题所困扰呢？</p>
<p><strong>因为他们从未真正地问过自己。</strong></p>
<p>我觉得很有意思的一件事是，人们好像总是要让自己做点什么，停不下来。比如：出去玩、聚会、逛街等等。不要误解，做这些事没有任何问题。但我怀疑大部分人都有这样的心态：我必须每时每分都做点什么，因为我做不了自己。只是想让自己在别人面前看起来风光一点。但事实上，要让自己充实起来，应该多花一点时间在自己身上。</p>
<p>人们以为必须环游世界，尝试新事物等等才能找到自己的所爱。不，你只要坐下来，然后决定。答案已经在你心里。你只要把它挖出来，别耽搁。</p>
<p>说实话，你有没有曾经独自一人坐下来，抛开手机，离开电脑，关上电视、聊天工具，关上自己最爱听的歌，关闭游戏，停止检查邮件、回复电话、浏览杂志等等其他一切分心的事，扪心自问：自己到底喜欢什么？</p>
<p>你害怕问题的答案，因为答案是：我不知道。</p>
<p>这也是为什么你必须找到答案的原因。承认自己不知道，这是ok的，比那些自动跳过的好多了。下面让我们一步一步地来找到答案。</p>
<h3 id="其三"><a href="#其三" class="headerlink" title="其三"></a>其三</h3><p><strong>1. 只要你愿意，就一定会找到答案</strong></p>
<p>你一定会找到，无庸置疑。</p>
<p>带着这样的心态，你就一定会找到。会花多长时间？不重要。你终将会找到。</p>
<p>这样做，你会自动开启反放弃机制，因为你知道你一定会找到答案。</p>
<p>比如，如果你知道你要去纽约，你就会找到去那里的方法，你会搭车、火车或飞机，然后到达。</p>
<p>如果没有钱，你可以借，或者找份工作省钱，或者找一份空姐&#x2F;空哥的工作，这样就可以免费去那。花多长时间不重要，要做些什么也不重要，因为你知道你要去纽约。</p>
<p>你这个决定之后所有的行动都会围绕着『去纽约』而展开。</p>
<p>再读一遍最后这句：</p>
<p>你这个决定之后所有的行动都会围绕着『去纽约』而展开。</p>
<p>找到你所爱的 ＝ 决定去纽约。</p>
<p><strong>2. 列一个技能清单和兴趣列表</strong></p>
<p>再强调一遍：写下来。不要以为你可以在头脑中完成。</p>
<p>我这说的技能是任何技能。可以是无形的。比如编程，网页制作，聊天，倾听，说服别人，打字，调情，分析，演讲，让事情易于理解，吹口哨等等。不要害羞，列出所有自己的技能。</p>
<p>在另一列，列出自己的兴趣，同样，也不要害羞。列出所有你能想到的兴趣。蜘蛛、鞋子、头发、化妆品、篮球、网球、幻想、保姆、散步、PS、Fireworks、帮助别人、搞笑、钓鱼、空手道、瓶起子等等，什么都行。是的，我提到了瓶起子。你的兴趣也可以包含自己擅长的方面。计算机、经济学、生物学、篮球、足球、魔术等等。</p>
<p>为了帮助你写下更多的兴趣爱好，想想之前的那份工作你最感兴趣的是什么，不感兴趣的又是什么。</p>
<p>问自己以下这些问题有助于发现自己追求的技能和兴趣：</p>
<ul>
<li>如果你去一个书店，那个书架上的书对你的引力最大？问问朋友他们眼中你的技能和兴趣。你会惊叹于他们的洞察力。</li>
<li>你把大多数的时间都花在了哪些事上？做这些事你期望得到怎样的结果？像小孩子一样想像自己的成就。都有哪些技能和兴趣对你的成就有帮助？</li>
<li>你做了什么别人会感谢你？</li>
<li>你的老师或家人有没有说过你有什么诀窍？</li>
<li>为什么我一再强调技能和兴趣？</li>
</ul>
<p>技能：你必须依赖你的强项。不要告诉我你什么也没有。每个人都有技能。你只是没有坐下来细想，并且写下来。</p>
<p>兴趣：很简单，你必须爱你所做的。</p>
<p>专注于你能想到的兴趣和技能，并且写下来。</p>
<p>你会发现你的技能好像受了引力作用一样偏向一种或两种技能，兴趣也一样。好，下面让我们进入步骤3。</p>
<p><strong>3. 问正确的问题来找到自己的最爱</strong></p>
<p>找一个真正属于自己的时间和空间，没有任何分心的东西，通过问正确的问题来找到自己的最爱。</p>
<p>我发现一个很有趣的现象，人们总是为税务、烹饪、电影、阅读留出时间，但是涉及到自己的将来时，却从来不会腾出时间。</p>
<p>现在，假如你已经安排了私人时间，没有杂事干扰，然后呢？你必须问自己一个清晰的问题，清晰是关键，问题越清晰，回答越简单。</p>
<p>比如，我问，12x12等于多少？答案很明了：144。</p>
<p>如果我问两个偶数和另外两个偶数的乘积？这就很难回答了。</p>
<p><strong>清晰的问题引出清晰的答案</strong></p>
<p>另外一个关键点是：写下来。我知道你听过一万次了，不过这是有原因的。把东西写下来有助于你在各项之间建立联系，这在脑海里是很难完成的。</p>
<p>如果你在之前的阶段没有写下技能和兴趣，那么停下，马上写下来。放在大脑里是不会有帮助的。</p>
<p>现在利用独处的时间问自己一个清晰的问题，这个问题会是：“我最喜欢做什么？”吗？</p>
<p>这个问题有点广泛了，再缩小一点，问自己：</p>
<p><strong>在每天的生活中，我最喜欢做什么，可以同时结合我的技能和兴趣，并给人们的生活带来重大价值？</strong></p>
<p>看到区别了吗？问题越具体，越清晰，回答起来就越方便。我为什么加了价值这一项？因为这会帮助你找到挣钱的方法。</p>
<p>“通过技能和兴趣带来重大价值”，可以自动过滤那些普遍的答案，如：“看电视”，或“玩游戏”，这些答案往往会带来消极因素，因为看不到挣钱的方法。</p>
<p>顺带一句，很多人会误解这句话的核心，把重点放在了挣钱上。钱只是通过产品或服务为人们的生活带去方便的一个副产品。</p>
<p>当你知道你可以为别人的生活带来方便时，你就会知道如何挣钱。打开Word或纸张，在最前面写下这个问题。</p>
<p>在每天的生活中，我最喜欢做什么，可以同时结合我的技能和兴趣，并给人们的生活带来重大价值？</p>
<p>再强调一遍，重点是写下你自己的答案。</p>
<p>看看之前列的两列清单，写下答案，有多少，写多少。不必完美，也不一定要有什么意义。因为迟早你会把这些关连起来。下面这个故事可以帮助阐述我的意思。</p>
<blockquote>
<p>有一个小镇，以滑雪而出名，吸引了一大批游客前来，这对于促进经济有很大的作用。但是，下雪时，雪会沉积在电缆上，直到把电缆压跨，导致部分能源过载。慢慢的游客们都不来了，于是小镇举行了一个会议，讨论如何解决雪压跨电缆的问题。很久都没有好的解决方案。</p>
</blockquote>
<p>突然有人在会议室的后面大声喊道“我们可以在电缆上放几盆蜂蜜，让熊爬上电缆，拿到蜂蜜，熊的这一系列动作会把电缆上的雪抖落”</p>
<p>在座的都笑了，有人接这个话茬“那我们怎么再在这些盆里放蜂蜜呢？”“可以用直升飞机”，另一个人说。</p>
<p>于是答案就出来了，让直升飞机在电缆上飞，通过螺旋桨的风力把雪吹落。</p>
<p>我想说的是，无论答案有多可笑，都不用害怕，因为它们常常能帮你找到最终的结果。这是过程的一部分。</p>
<p>所以无论多滑稽，写下来。写下所有的答案。直到你有了20个答案，然后回顾它们。你会发现，你写下的答案会帮助你找到新的答案。</p>
<p>你会惊叹写下的所有东西，以及各个富有创意的想法。</p>
<p><strong>现在又要集中注意力了</strong></p>
<p>你肯定听过通过放大镜来聚焦阳光的事。但我还是想说，如果你打算一次处理多件事，那么哪件事都完不成。即使在最热的天，如果你不停移动放大镜，并不会聚焦多大的能量，什么也烧不着。只是无端地浪费自己的精力。</p>
<p>通过管理你的精力，时间，思考等等，在攻克一个目标时，你会惊叹目标完成的深度和效率。就像你在一个东西上放了一个放大镜，而你的欲望，精力，时间，思考，想像就是太阳光。</p>
<p>专注很重要，这里我想再举个例子。想像自己是一只猎豹，正在追逐两只羚羊。如果想同时追逐两个的话，那么什么也抓不到，只能饿死。先拿下一只，这可能需要时间去追击去撕咬，但当你真的吃掉了它，你又充满电了。你可以收集信息：羚羊都往哪个方向跑了，可能在哪块停留，等等。这有助于你今后捕获更多的羚羊，这就形成了良性循环。简而言之：专注于一个目标。</p>
<p>所以检查你刚刚的列表，选择一个最感兴趣的。你可能会发现，你可以把多个想法集中到一个。最好选择一个不仅能给自己带来极大的满足感，还能够帮助别人的想法。</p>
<h3 id="其四"><a href="#其四" class="headerlink" title="其四"></a>其四</h3><p>如何知道自己已经找到了最爱？</p>
<p>做这件事让你觉得爽吗？如果发自肺腑地觉得很爽，那就对了。如果你的朋友跟你谈论这个话题，你愿意跟他没完没了地谈论吗？</p>
<p>你必须毫无保留地喜欢这件事。如果你感到一丁点的怀疑，那这就不是你的激情所在。你必须急切地渴望克服任何困难来追逐你的激情。</p>
<p>一旦你找到了这件事，你的任务就完成了。至于如何通过它来挣钱，在你写下答案时，可能已经找到方法了。如果想找到更多挣钱的方法，只需重复之前的步骤。</p>
<ol>
<li>Step 1: 毫无疑问，你一定会找到答案</li>
<li>Step 2: 分两列，列一个技能清单和兴趣列表，并且写下来，你会发现其实有很多挣钱的方法</li>
</ol>
<p>挣钱的方法只能靠你自己了，不过对你来说应该不难。现在你知道了自己的最爱以及如何挣钱，该是行动的时候了。</p>
<p>很多人看到这里，没有任何行动，所以他们的生活也没有发生任何变化。</p>
<p><strong>Faith</strong></p>
<p>Faith，直译就是“信仰，信念”。</p>
<p>以我自己为例吧。当我对一个技术或知识不懂的时候，我会决定，是否要把它拿下。如果决定要拿下，我就会做一个专题，把资料都整理好，发布到 “现代魔法学院”上去。“现代魔法学院” 是我现在在做的一个个人项目。比如我正在研究 “编程范式”， 发现 “函数式编程” 我没有掌握透，我就专门开辟一个 “函数式编程” 的 chapter，为了实践函数式编程，我会学习一门函数式编程语言，比如 Python。这时候，就开辟了一个新天地，比如用 Python 做 Web 开发，Django 框架的学习等等……每一个知识点，我都会整理成一个 chapter，然后 chapter 又归类到 part 中。如此，连成一个整体性的知识体系。</p>
<p>为什么每一篇都要发布在学院里？自己懂了不就行了，为啥要花这么多时间和精力再重复一次？因为我相信，我现在遇到的问题，以后一定有人会遇到。我现在整理好，发布到学院，一定会给后来者提供极大的方便，还有极系统的知识体系。这就是我的 Faith，还有我所做的“简明现代魔法”的 Faith。</p>
<p>Do have faith in what you are doing.</p>
<p>All for a better world.</p>
]]></content>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Tips</title>
    <url>/2024/07/03/Git-Tips/</url>
    <content><![CDATA[<h2 id="workflow-工作流"><a href="#workflow-工作流" class="headerlink" title="workflow 工作流"></a>workflow 工作流</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/git-workflow.png"
                      alt="workflow"
                ><figcaption>workflow</figcaption></figure></p>
<h2 id="cheat-sheets-速查表"><a href="#cheat-sheets-速查表" class="headerlink" title="cheat sheets 速查表"></a>cheat sheets 速查表</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/git_cheat_sheets.jpg"
                      alt="cheat_sheets"
                ><figcaption>cheat_sheets</figcaption></figure></p>
]]></content>
      <categories>
        <category>Program</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git flow</title>
    <url>/2017/04/15/Git-flow/</url>
    <content><![CDATA[<h3 id="Production-Master-分支-：-合并读取"><a href="#Production-Master-分支-：-合并读取" class="headerlink" title="Production|Master 分支 ： 合并读取"></a>Production|Master 分支 ： 合并读取</h3><p>这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改</p>
<h3 id="Develop-分支-：-开发"><a href="#Develop-分支-：-开发" class="headerlink" title="Develop 分支 ： 开发"></a>Develop 分支 ： 开发</h3><p>这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支</p>
<h3 id="Feature-分支-：-相互独立"><a href="#Feature-分支-：-相互独立" class="headerlink" title="Feature 分支 ： 相互独立"></a>Feature 分支 ： 相互独立</h3><p>这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release</p>
<h3 id="Release分支-：-需求冻结"><a href="#Release分支-：-需求冻结" class="headerlink" title="Release分支 ： 需求冻结"></a>Release分支 ： 需求冻结</h3><p>当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支</p>
<h3 id="Hotfix分支-：-紧急修复"><a href="#Hotfix分支-：-紧急修复" class="headerlink" title="Hotfix分支 ： 紧急修复"></a>Hotfix分支 ： 紧急修复</h3><p>当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_04_15_0.png"
                     
                ></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 配置多端多个账号</title>
    <url>/2024/06/26/Git-%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%AB%AF%E5%A4%9A%E4%B8%AA%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="清空默认的全局-user-name-和-user-email"><a href="#清空默认的全局-user-name-和-user-email" class="headerlink" title="清空默认的全局 user.name 和 user.email"></a>清空默认的全局 user.name 和 user.email</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure></div>

<p>查看git配置</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure></div>

<h2 id="配置多个git的用户名和邮箱"><a href="#配置多个git的用户名和邮箱" class="headerlink" title="配置多个git的用户名和邮箱"></a>配置多个git的用户名和邮箱</h2><ol>
<li>单个全局配置</li>
</ol>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourusername&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail@email.com&quot;</span></span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>多个配置</li>
</ol>
<blockquote>
<p>注意: 这里<code>git config</code>命令没有带<code>—global</code>,表示这是一个局部的设置,也就是这个用户是当前项目的,而不是全局的</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;yourusername&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;youremail@hotmail.com&quot;</span></span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>删除配置</li>
</ol>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure></div>

<h2 id="生成多个密钥"><a href="#生成多个密钥" class="headerlink" title="生成多个密钥"></a>生成多个密钥</h2><ol>
<li>生成<code>gitlab</code>仓库的SSH</li>
</ol>
<p>指定文件路径,方便后面操作:<code>~/.ssh/id_rsa.gitlab</code>,<code>id_rsa.github</code>是秘钥的别名。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitlab -C <span class="string">&quot;gitlab@mail.com&quot;</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>生成<code>github</code>仓库的SSH</li>
</ol>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C <span class="string">&quot;github@mail.com&quot;</span></span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>将 <code>ssh-key</code> 分别添加到 <code>ssh-agent</code> 信任列表</li>
</ol>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~/.ssh/id_rsa.gitlab</span><br><span class="line">ssh-add ~/.ssh/id_rsa.github</span><br></pre></td></tr></table></figure></div>
<p>如果看到 <code>Identitiy added: ~/.ssh/id_ras_github</code> 就表示添加成功了。</p>
<ol start="4">
<li><p>添加公钥到自己的 git 账户中</p>
</li>
<li><p>在 config 文件配置多个 ssh-key<br>在生成密钥的<code>.ssh</code> 目录下,新建一个<code>config</code>文件,然后配置不同的仓库</p>
</li>
</ol>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Default github user Self</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git <span class="comment">#默认就是git,可以不写</span></span><br><span class="line">    IdentityFile ~/.ssh/id_rsa.github</span><br><span class="line"></span><br><span class="line"><span class="comment">#Add gitlab user </span></span><br><span class="line">Host gitlab.com  <span class="comment"># 别名,最好别改</span></span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    User xxx@mail.com <span class="comment">#用户名</span></span><br><span class="line">	<span class="comment">#密钥文件的地址,注意是私钥</span></span><br><span class="line">	IdentityFile ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li>测试<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBash如何显示中文</title>
    <url>/2024/06/22/GitBash%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<h1 id="git-bash如何显示中文"><a href="#git-bash如何显示中文" class="headerlink" title="git bash如何显示中文"></a>git bash如何显示中文</h1><p>要在Git Bash中正确显示中文，您可以按照以下步骤操作：</p>
<ol>
<li>确认已经安装了支持中文的字体<br>在Git Bash中显示中文需要正确的字体支持。在Windows操作系统上，默认的字体一般已经支持中文，不需要额外操作。如果您遇到了乱码问题，可以尝试更改默认字体。</li>
<li>更改Git Bash的字符集设置<br>在Git Bash中，可以通过更改字符集设置来正确显示中文字符。以下是具体的操作步骤：<br>– 打开Git Bash。<br>– 点击窗口左上角的图标，选择<code>Options</code>。<br>– 在<code>Options</code>窗口中，选择<code>Text</code>选项卡。<br>– 在<code>Text</code>选项卡中，将<code>Character set</code>设置为<code>UTF-8</code>。<br>– 点击<code>OK</code>保存设置并关闭窗口。<br>– 重新启动Git Bash，查看中文是否显示正确。</li>
<li>设置Git Bash的locale环境变量<br>在某些情况下，Git Bash可能会忽略系统的locale设置，导致无法正确显示中文。您可以设置Git Bash的locale环境变量来解决这个问题。以下是具体的操作步骤：<br>– 打开Git Bash。<br>– 执行以下命令：  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">export LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure></div>
– 重新启动Git Bash，查看中文是否显示正确。<br>请注意，对于Windows系统来说，Git Bash完全可以正常显示中文，这些步骤一般只在遇到问题时才需要进行操作。如果您按照上述方法仍然无法正确显示中文，请检查系统字体和其他设置是否正常，并确保系统区域设置中的语言设置为中文。</li>
</ol>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBash设置ll命令</title>
    <url>/2024/06/22/GitBash%E8%AE%BE%E7%BD%AEll%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="GIT-配置-ll命令"><a href="#GIT-配置-ll命令" class="headerlink" title="GIT 配置 ll命令"></a>GIT 配置 ll命令</h1><h2 id="Windows-下"><a href="#Windows-下" class="headerlink" title="Windows 下"></a>Windows 下</h2><h3 id="1-用户目录下"><a href="#1-用户目录下" class="headerlink" title="1 用户目录下"></a>1 用户目录下</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi .bashrc</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">alias ll=&#x27;ls -l&#x27;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<h2 id="Linux-下"><a href="#Linux-下" class="headerlink" title="Linux 下"></a>Linux 下</h2><h3 id="1-编辑-source"><a href="#1-编辑-source" class="headerlink" title="1 编辑 ~&#x2F;.source"></a>1 编辑 ~&#x2F;.source</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.source</span><br><span class="line">alias ll=&#x27;ls -l&#x27;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-生效"><a href="#2-生效" class="headerlink" title="2 生效"></a>2 生效</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBash设置时间戳</title>
    <url>/2024/06/24/GitBash%E8%AE%BE%E7%BD%AE%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<blockquote>
<p>平时工作中，可能会同时处理几件事情，其中有一件要用到 <code>terminal</code>，有时候需要在 <code>terminal</code> 连续执行多次同个命令，但有时候你地工作被打断，等再回来看 <code>terminal</code> 的时候，就不确定工作被打断之前是否执行了命令，因为命令执行没有时间戳<br>比如下图，完全看不出来什么时候执行的命令行：</p>
</blockquote>
<h2 id="在命令行执行后面打印"><a href="#在命令行执行后面打印" class="headerlink" title="在命令行执行后面打印"></a>在命令行执行后面打印</h2><p>我的方案是在每行命令行执行结束后，打印一下当前的时间戳。具体方法：</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>用编辑器打开 <code>git-prompt.sh</code> 文件，文件目录在 <code>git</code> 安装目录下（比如我的是 <code>D:\APP\Git\etc\profile.d\git-prompt.sh</code>）。这个文件用于定义打印“命令提示符”。</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>找到 <code>PS1=&quot;$PS1&quot;&#39;\u@\h &#39; # user@host&lt;space&gt;</code> 这行（图中第 20 行），<br>在这行的上面的第 16 行前面加上时间戳的配置即可。<br>我加了下面的几行，重点是 <code>PS1=&quot;$PS1&quot;&#39;\t&#39;</code> 这个，一定要加上，用于获取当前时间，<br>其他几行是个性化颜色修饰，可有可无。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[45m\]&#x27;</span>	<span class="comment"># change to Magenta</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>			    <span class="comment"># time</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27; \t&#x27;</span>			    <span class="comment"># time</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[0m\]&#x27;</span>		<span class="comment"># reset style</span></span><br><span class="line">PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\n&#x27;</span>			    <span class="comment"># new line</span></span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/git/git1.png"
                      alt="配置"
                ><figcaption>配置</figcaption></figure></p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/git/git2.png"
                      alt="效果图"
                ><figcaption>效果图</figcaption></figure></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="ANSI-颜色编码"><a href="#ANSI-颜色编码" class="headerlink" title="ANSI 颜色编码"></a>ANSI 颜色编码</h3><ul>
<li>ANSI 颜色编码可参考 <a class="link"   href="https://en.wikipedia.org/wiki/ANSI_escape_code" >ANSI escape code - Wikipedia <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>ANSI 控制码<br>  ANSI 控制码以Esc 作为控制码的开始标志。 Esc的ANS十进制码是 27 ， 八进制码是33， 使用\33 表示。主要的控制码有：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">\033[0m 关闭所有属性</span><br><span class="line">\033[1m 设置高亮度</span><br><span class="line">\033[4m 下划线</span><br><span class="line">\033[5m 闪烁 ， 测试在在linux 显示效果是底色。</span><br><span class="line">\033[7m 反显</span><br><span class="line">\033[8m 消隐</span><br><span class="line">\033[nA 光标上移n行</span><br><span class="line">\033[nB 光标下移n行</span><br><span class="line">\033[nC 光标右移n行</span><br><span class="line">\033[nD 光标左移n行</span><br><span class="line">\033[y;xH 设置光标位置</span><br><span class="line">\033[2J 清屏</span><br><span class="line">\033[K 清除从光标到行尾的内容</span><br><span class="line">\033[s 保存光标位置</span><br><span class="line">\033[u 恢复光标位置</span><br><span class="line">\033[?25l 隐藏光标</span><br><span class="line">\033[?25h 显示光标</span><br><span class="line">\033[30m ~ \033[37m 设置前景色</span><br><span class="line">\033[40m ~ \033[47m 设置背景色</span><br></pre></td></tr></table></figure></div>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/536955408" >如何设置 Git Bash 终端命令行执行后打印当前时间 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/weixin_69553582/article/details/125700943" >在终端输出彩色字体 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go run 或 build 运行很慢或超时</title>
    <url>/2024/07/01/Go-run-%E6%88%96-build-%E8%BF%90%E8%A1%8C%E5%BE%88%E6%85%A2%E6%88%96%E8%B6%85%E6%97%B6/</url>
    <content><![CDATA[<h2 id="Step-1-查看环境变量"><a href="#Step-1-查看环境变量" class="headerlink" title="Step 1 查看环境变量"></a>Step 1 查看环境变量</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">GOOS=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">GOPATH=<span class="string">&#x27;/root/go&#x27;</span></span><br><span class="line">GOPRIVATE=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 这里镜像问题</span></span><br><span class="line">GOPROXY=<span class="string">&#x27;https://proxy.golang.org,direct&#x27;</span></span><br><span class="line">GOROOT=<span class="string">&#x27;/usr/local/go&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Step-2-修改镜像地址"><a href="#Step-2-修改镜像地址" class="headerlink" title="Step 2 修改镜像地址"></a>Step 2 修改镜像地址</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GOPROXY=http://mirrors.aliyun.com/goproxy/</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>-w</code> 标记 要求一个或多个形式为 <code>NAME=VALUE</code> 的参数, 并且覆盖默认的设置</p>
</blockquote>
]]></content>
      <categories>
        <category>Program</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 环境变量配置</title>
    <url>/2024/07/01/Go-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h2><p><code>https://golang.org/dl/</code> 官网获取最新安装包</p>
<h2 id="Step-1-下载"><a href="#Step-1-下载" class="headerlink" title="Step 1 下载"></a>Step 1 下载</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://go.dev/dl/go1.22.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></div>

<h2 id="Step-2-解压"><a href="#Step-2-解压" class="headerlink" title="Step 2 解压"></a>Step 2 解压</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">tar -C /usr/local -zxvf go1.22.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></div>

<h2 id="Step-3-环境变量配置"><a href="#Step-3-环境变量配置" class="headerlink" title="Step 3 环境变量配置"></a>Step 3 环境变量配置</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在/etc/profile最后一行添加</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存退出后source一下（vi 的使用方法可以自己搜索一下）</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div>

<h2 id="Step-4-验证"><a href="#Step-4-验证" class="headerlink" title="Step 4 验证"></a>Step 4 验证</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP status code</title>
    <url>/2024/07/03/HTTP-status-code/</url>
    <content><![CDATA[<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/http_status_code.jpg"
                      alt="status code"
                ><figcaption>status code</figcaption></figure></p>
]]></content>
      <categories>
        <category>Program</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea Maven 新项目永久生效</title>
    <url>/2024/06/25/Idea-Maven-%E6%96%B0%E9%A1%B9%E7%9B%AE%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88/</url>
    <content><![CDATA[<blockquote>
<p>不同版本Idea会有差异</p>
</blockquote>
<div class="tabs" id="tab-setup版本"><ul class="nav-tabs"><li class="tab active"><a class="#setup版本-1">新版Idea</a></li><li class="tab"><a class="#setup版本-2">旧版Idea</a></li></ul><div class="tab-content"><div class="tab-pane active" id="setup版本-1"><p>新版 <code>File</code> -&gt; <code>New Projects Setup</code> -&gt; <code>Settings for New Projects</code><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/maven/new-version-maven.png"
                      alt="New Setup"
                ><figcaption>New Setup</figcaption></figure></p></div><div class="tab-pane" id="setup版本-2"><p>旧版 <code>File</code> -&gt; <code>Other Settings</code> -&gt; <code>Settings for New Projects</code></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/maven/old-version-maven.png"
                      alt="Old Setup"
                ><figcaption>Old Setup</figcaption></figure></p></div></div></div>

<p>搜索 <code>mvn</code> 或 <code>Build, Execution, Deployment</code> -&gt; <code>Build Tools</code> -&gt; <code>Maven</code><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/maven/maven-settings.png"
                      alt="Settings"
                ><figcaption>Settings</figcaption></figure></p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Env</tag>
        <tag>Maven</tag>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>JSSDK 微信接口与 Java 结合</title>
    <url>/2017/02/22/JSSDK-%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E4%B8%8E-Java-%E7%BB%93%E5%90%88/</url>
    <content><![CDATA[<h1 id="JSSDK微信接口-Java接入-转发分享信息"><a href="#JSSDK微信接口-Java接入-转发分享信息" class="headerlink" title="JSSDK微信接口 Java接入 转发分享信息"></a>JSSDK微信接口 Java接入 转发分享信息</h1><hr>
<blockquote>
<p><a class="link"   href="http://dwz.cn/1KsMyS"  target="_blank"> [ JSSDK文档 ] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 微信JS-SDK是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包。   </p>
<p><a class="link"   href="http://dwz.cn/3WfAJS"  target="_blank">  [获取token文档 ] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> JS-SDK获取access_token文档<br><strong>ChaoS_Zhang</strong> , 更多信息 , 具体请参考<a class="link"   href="https://github.com/ChaoSBYNN" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.<a href="#"> [t7_chaos@163.com]</a>  .</p>
</blockquote>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><blockquote>
<p>流程图：</p>
</blockquote>
<pre class="mermaid">flowchart LR
st=>start: 开始
e=>end: 结束
op1=>operation: 获取本地存储token
op2=>operation: 通过微信公众号 
                appid与secret 
                获取新的access_token
op3=>operation: 获取jsapi_ticket
cond1=>condition: 判断最近修改日期
是否不超过7200秒？
cond2=>condition: 判断获取的
                jsapi_ticket是否正常
                [异常情况:token过期]
st->op1->cond1->op3->cond2->e
op2->op3
cond1(no)->op2
cond1(yes)->op3
cond2(no)->op2
cond2(yes)->e</pre>


<blockquote>
<p><strong>注意：</strong>临界值操作，<strong>临界值时虽然没有超过7200秒,但是token已经过期,需要重新获取</strong>。</p>
</blockquote>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote>
<h3 id="WXTokenServiceImpl-业务逻辑"><a href="#WXTokenServiceImpl-业务逻辑" class="headerlink" title="WXTokenServiceImpl 业务逻辑"></a>WXTokenServiceImpl 业务逻辑</h3></blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Formatter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.listenlives.dao.WXTokenDao;</span><br><span class="line"><span class="keyword">import</span> com.listenlives.domain.WXToken;</span><br><span class="line"><span class="keyword">import</span> com.listenlives.information.util.HttpHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ChaoS_Zhang t7_chaos@163.com </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2016年8月12日 上午11:00:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  获取微信公众号有效期7200m access_token &lt;br/&gt;二次转发分享页面</span></span><br><span class="line"><span class="comment"> * &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> http://dwz.cn/1KsMyS 微信JS-SDK说明文档&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;static-access&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WXTokenServiceImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * toekn持久化</span></span><br><span class="line"><span class="comment">	 * updateWXToken(WXToken wxToken) 更新本地token&lt;br/&gt;</span></span><br><span class="line"><span class="comment">	 * selectWXToken() 获取本地token</span></span><br><span class="line"><span class="comment">	 * /</span></span><br><span class="line"><span class="comment">	@Resource</span></span><br><span class="line"><span class="comment">	private WXTokenDao wxTokenDao;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	public Map&lt;String, String&gt; getJSAPITicket(String url) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		Map&lt;String, String&gt; resultMap = new HashMap&lt;String, String&gt;();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		/*</span></span><br><span class="line"><span class="comment">		 * 微信接口所需返回项</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">nonce_str</span> <span class="operator">=</span> create_nonce_str();</span><br><span class="line">		<span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> create_timestamp();</span><br><span class="line">		<span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">String</span> <span class="variable">jsapiTicket</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">assceeToken</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">WXToken</span> <span class="variable">wxToken</span> <span class="operator">=</span> wxTokenDao.selectWXToken();</span><br><span class="line"></span><br><span class="line">			assceeToken = wxToken.getAccessToken();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (compareWithExpiresIn(wxToken.getCreateTime())) &#123;</span><br><span class="line"></span><br><span class="line">				assceeToken = getNewAccessToken();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			jsapiTicket = getNewJSAPITicket(assceeToken, <span class="number">0</span>).get(<span class="string">&quot;ticket&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 当前分享页面url </span></span><br><span class="line"><span class="comment">			 * 注意这里参数名必须全部小写,且必须有序&#x27;&#x27;&#x27;微信要求&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			signature = <span class="string">&quot;jsapi_ticket=&quot;</span> + jsapiTicket + </span><br><span class="line">								<span class="string">&quot;&amp;noncestr=&quot;</span> + nonce_str + </span><br><span class="line">								<span class="string">&quot;&amp;timestamp=&quot;</span> + timestamp + </span><br><span class="line">								<span class="string">&quot;&amp;url=&quot;</span> + url;</span><br><span class="line"></span><br><span class="line">			<span class="type">MessageDigest</span> <span class="variable">crypt</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">			crypt.reset();</span><br><span class="line">			crypt.update(signature.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">			signature = byteToHex(crypt.digest());</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		resultMap.put(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">		resultMap.put(<span class="string">&quot;nonceStr&quot;</span>, nonce_str);</span><br><span class="line">		resultMap.put(<span class="string">&quot;timestamp&quot;</span>, timestamp);</span><br><span class="line">		resultMap.put(<span class="string">&quot;signature&quot;</span>, signature);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> resultMap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 比较当前时间与上一次获取Token时间是否相差2小时 有效期7200秒</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> http://dwz.cn/3WfAJS 微信JSSDK access_token文档&#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareWithExpiresIn</span><span class="params">(String createTime)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">		Date nowDate;</span><br><span class="line">		Date tokenDate;</span><br><span class="line">		<span class="type">long</span> diff;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">			nowDate = df.parse(df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">			tokenDate = df.parse(createTime);</span><br><span class="line">			</span><br><span class="line">			diff = nowDate.getTime() - tokenDate.getTime();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 微信2小时 7200m 变更token</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			flag = diff &gt; <span class="number">7200000</span>;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToHex</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] hash)</span> &#123;</span><br><span class="line">		<span class="type">Formatter</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Formatter</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">byte</span> b : hash) &#123;</span><br><span class="line">			formatter.format(<span class="string">&quot;%02x&quot;</span>, b);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> formatter.toString();</span><br><span class="line">		formatter.close();</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 生成签名的随机串</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String <span class="title function_">create_nonce_str</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 生成签名的时间戳</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String <span class="title function_">create_timestamp</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Long.toString(System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getNewAccessToken</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Map&lt;String, String&gt; accessMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">			accessMap.put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;client_credential&quot;</span>);</span><br><span class="line">			accessMap.put(<span class="string">&quot;appid&quot;</span>, $&#123;appid&#125;);</span><br><span class="line">			accessMap.put(<span class="string">&quot;secret&quot;</span>, $&#123;secret&#125;);</span><br><span class="line">			data = HttpHelper.post(accessMap, url);</span><br><span class="line">			<span class="keyword">if</span> (data != <span class="literal">null</span> &amp;&amp; data != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">				<span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>().fromObject(data);</span><br><span class="line">				<span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> (String) json.get(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span> (<span class="literal">null</span> != access_token &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(access_token)) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="type">WXToken</span> <span class="variable">wxToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WXToken</span>();</span><br><span class="line">					wxToken.setAccessToken(access_token);</span><br><span class="line">					wxTokenDao.updateWXToken(wxToken);</span><br><span class="line"></span><br><span class="line">					result = access_token;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getNewJSAPITicket</span><span class="params">(String accessToken, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 避免死循环递归flag</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (flag &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">			Map&lt;String, String&gt; accessMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">			accessMap.put(<span class="string">&quot;access_token&quot;</span>, accessToken);</span><br><span class="line">			accessMap.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;jsapi&quot;</span>);</span><br><span class="line">		</span><br><span class="line">			data = HttpHelper.post(accessMap, url);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (data != <span class="literal">null</span> &amp;&amp; data != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">				</span><br><span class="line">				<span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>().fromObject(data);</span><br><span class="line">				<span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> (String) json.get(<span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span> (<span class="literal">null</span> != ticket &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(ticket)) &#123;</span><br><span class="line">					resultMap.put(<span class="string">&quot;ticket&quot;</span>, ticket);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					resultMap = getNewJSAPITicket(getNewAccessToken(), flag + <span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> resultMap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<blockquote>
<h3 id="WXToken-微信公众号token实体"><a href="#WXToken-微信公众号token实体" class="headerlink" title="WXToken 微信公众号token实体"></a>WXToken 微信公众号token实体</h3></blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ChaoS_Zhang t7_chaos@163.com </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2016年8月12日 上午10:55:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WXToken</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String accessToken;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String createTime;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getAccessToken</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> accessToken;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessToken</span><span class="params">(String accessToken)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.accessToken = accessToken;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> createTime;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(String createTime)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<hr>
]]></content>
      <tags>
        <tag>WeChat</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 环境变量配置</title>
    <url>/2024/06/24/Java-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>💡 安装后需配置环境变量</p>
</blockquote>
<p>Java 环境变量配置主要涉及设置 <code>JAVA_HOME</code> 和更新系统的 <code>PATH</code> 环境变量。以下是详细的步骤和说明：</p>
<h2 id="确定-Java-安装路径"><a href="#确定-Java-安装路径" class="headerlink" title="确定 Java 安装路径"></a>确定 Java 安装路径</h2><p>首先，你需要确定 Java 的安装路径。通常，Java 会安装在 <code>C:\Program Files\Java\</code> 目录下。你可以通过“控制面板”中的“程序和功能”来查找已安装的 Java 版本，或者通过命令行使用 <code>where java</code> 来查找 Java 可执行文件的路径。</p>
<h2 id="设置-JAVA-HOME-环境变量"><a href="#设置-JAVA-HOME-环境变量" class="headerlink" title="设置 JAVA_HOME 环境变量"></a>设置 JAVA_HOME 环境变量</h2><p>JAVA_HOME 环境变量用于指定 Java 的安装目录。你可以按照以下步骤设置它：</p>
<h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统:"></a>Windows 系统:</h3><ol>
<li>打开“控制面板”。</li>
<li>点击“系统与安全”。</li>
<li>点击“系统”。</li>
<li>点击“高级系统设置”。</li>
<li>在“高级”选项卡下，点击“环境变量”。</li>
<li>在“系统变量”下，点击“新建”，变量名输入 <code>JAVA_HOME</code>，变量值填入你的 Java 安装路径（例如 <code>C:\Program Files\Java\jdk11_XXX</code>）。</li>
</ol>
<h3 id="Linux-或-macOS-系统"><a href="#Linux-或-macOS-系统" class="headerlink" title="Linux 或 macOS 系统:"></a>Linux 或 macOS 系统:</h3><p>你可以在终端中使用文本编辑器(如 <code>nano</code> 或 <code>vim</code>)编辑 <code>.bashrc</code>,<code>.bash_profile</code> 或 <code>.zshrc</code> 文件(取决于你的 <code>shell</code> 和操作系统)，然后添加以下行：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/path/to/java-installation</span><br></pre></td></tr></table></figure></div>

<p>将 <code>/path/to/java-installation</code> 替换为你的 Java 安装路径。</p>
<h2 id="更新-PATH-环境变量"><a href="#更新-PATH-环境变量" class="headerlink" title="更新 PATH 环境变量"></a>更新 PATH 环境变量</h2><p>你需要将 Java 的 <code>bin</code> 目录添加到系统的 <code>PATH</code> 环境变量中，这样你就可以从任何位置运行 Java 命令。</p>
<h3 id="对于-Windows-系统"><a href="#对于-Windows-系统" class="headerlink" title="对于 Windows 系统:"></a>对于 Windows 系统:</h3><p>在“环境变量”窗口中，找到并选中<code>Path</code>变量，点击“编辑”。在编辑窗口中，添加 <code>JAVA_HOME\bin</code> 到值的开头或任何合适的位置。确保用分号 ; 分隔不同的路径。</p>
<h3 id="对于-Linux-或-macOS-系统"><a href="#对于-Linux-或-macOS-系统" class="headerlink" title="对于 Linux 或 macOS 系统:"></a>对于 Linux 或 macOS 系统:</h3><p>在 <code>.bashrc</code>,<code>.bash_profile</code> 或 <code>.zshrc</code> 文件中添加以下行：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>

<p>保存文件并重新加载配置(在终端中运行 <code>source ~/.bashrc</code> 或相应的配置文件)。</p>
<h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><p>配置完成后，你可以通过打开命令行或终端，并运行 <code>java -version</code> 和 <code>javac -version</code> 来验证 Java 是否正确配置。这两个命令分别显示 Java 运行时和编译器的版本信息。<br>以上步骤应该能帮助你正确配置 Java 的环境变量。如果你在使用过程中遇到任何问题，请随时提问！</p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Env</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 生成时间戳</title>
    <url>/2017/02/22/JavaScript-%E7%94%9F%E6%88%90%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<blockquote>
<p>JS生成时间戳三种方式</p>
</blockquote>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp1 = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="keyword">var</span> timestamp2 = (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">valueOf</span>();</span><br><span class="line"><span class="keyword">var</span> timestamp3 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()；</span><br></pre></td></tr></table></figure></div>
<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp1 = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure></div>
<pre><code>指定的日期和时间据 1970/1/1 午夜（GMT 时间）之间的毫秒数。
</code></pre>
<h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><blockquote>
<p>1120752000000</p>
</blockquote>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp2 = (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">valueOf</span>();</span><br></pre></td></tr></table></figure></div>
<pre><code>返回 1970 年 1 月 1 日至今的毫秒数。
</code></pre>
<h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><blockquote>
<p>1120752000234</p>
</blockquote>
<h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp3 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()；</span><br></pre></td></tr></table></figure></div>
<pre><code>返回 Date 对象的原始值。
</code></pre>
<h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><blockquote>
<p>1120752000234</p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下JDK安装</title>
    <url>/2017/02/21/Linux-%E4%B8%8BJDK%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>注意：如果系统中存在JDK 或者 OpenJDK，先卸载。</p>
</blockquote>
<h3 id="第一步-下载JDK后解压"><a href="#第一步-下载JDK后解压" class="headerlink" title="第一步 下载JDK后解压"></a>第一步 下载JDK后解压</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-*u**-linux-x64.tar.gz  -C /dir</span><br></pre></td></tr></table></figure></div>

<h3 id="第二步-设置JAVA环境变量"><a href="#第二步-设置JAVA环境变量" class="headerlink" title="第二步 设置JAVA环境变量"></a>第二步 设置JAVA环境变量</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim /root/.bash_profile</span><br></pre></td></tr></table></figure></div>

<p>编辑文件，添加一下内容</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/src/jdk1.*.*_**</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> CLASSPATH</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></div>

<p>编辑相同内容</p>
<h3 id="第三步-使环境变量生效"><a href="#第三步-使环境变量生效" class="headerlink" title="第三步 使环境变量生效"></a>第三步 使环境变量生效</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /root/.bash_profile</span><br></pre></td></tr></table></figure></div>

<h3 id="第四部-验证JAVA环境"><a href="#第四部-验证JAVA环境" class="headerlink" title="第四部 验证JAVA环境"></a>第四部 验证JAVA环境</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">java –version</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java编程规范</title>
    <url>/2021/04/23/Java%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="Java开发规范"><a href="#Java开发规范" class="headerlink" title="Java开发规范"></a>Java开发规范</h1><h2 id="前言-为什么需要编码规范1"><a href="#前言-为什么需要编码规范1" class="headerlink" title="前言 为什么需要编码规范1"></a>前言 为什么需要编码规范<a href="#refer-anchor-1"><sup>1</sup></a></h2><p>为什么需要编码规范，借用《Java编程语言代码规范》一段开场白：</p>
<blockquote>
<p>一个软件需要花费80%的生命周期成本去维护。 　　<br>几乎没有任何软件的整个生命周期仅由其原作者来维护。 　　<br>编码规范改善软件的可读性,让工程师更快更彻底地理解新的代码。 　　<br>如果你将源代码转变为一个产品,那么您需要确保它和你创建的其它产品一样是干净且包装良好的。</p>
</blockquote>
<p>好的代码结构和代码风格一般bug也相对少，当然除了编码规范，也少不了充分自测。[<sub>写代码一部分是完成工作用来给机器执行, 另一部分是给人使用的(我们都是创造者), 无论未来的维护这是不是你, 一段程序的健壮、扩展、灵活是很重要的一件事, 虽然它可有可无,也不会记录KPI,但是何必有杂念呢    — Sp!ke</sub>]</p>
<h2 id="1-如何命名"><a href="#1-如何命名" class="headerlink" title="1 如何命名"></a>1 如何命名</h2><blockquote>
<p>代码就是最好的注释[<sub>我们是如何读文章的, 你又是怎么样读懂我写的这句话的 —Sp!ke</sub>]</p>
</blockquote>
<h3 id="1-1-命名"><a href="#1-1-命名" class="headerlink" title="1.1 命名"></a>1.1 命名</h3><ol>
<li>如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。</li>
<li>变量名应该简短且有意义，并能够顾名思义。简单并不意味着越短越好，比如一个字符的变量名是不允许的，很影响代码的可读性。</li>
</ol>
<p>[<sub>哪里是用缩写,哪里使用全拼,命名其他人能见词知义么,非英语母语的地区会有下一个问题<code>select get query find | selectOne getData queryInfo | findAll queryList getDatas</code>,是不是每个人都需一本字典才能开发,如果有是不是特定的字典 —Sp!ke</sub>]</p>
<h4 id="1-1-1-命名风格"><a href="#1-1-1-命名风格" class="headerlink" title="1.1.1 命名风格"></a>1.1.1 命名风格</h4><ol>
<li><p>代码中的命名均不能以$\color{CornflowerBlue}{下划线或美元符号}$ 开始，也不能以$\color{CornflowerBlue}{下划线或美元}$符号结束<br> $\color{OrangeRed}{反例:}  $ <code>_name / __name / $name / name_ / name$ / name__</code></p>
</li>
<li><p>代码中的命名均不能包含$\color{CornflowerBlue}{魔法数字或无意义的数字}$, 但是允许有意义的<br> $\color{MediumSeaGreen}{正例:}$ <code>timeout3s / list2Map / string2List</code><br> $\color{OrangeRed}{反例:}$ <code>table1 / i1 / a123aaa / str1</code></p>
</li>
<li><p>类名使用UpperCamelCase风格，但以下情形例外：DO &#x2F; BO &#x2F; DTO &#x2F; VO &#x2F; AO &#x2F; PO &#x2F; UID等<br> $\color{MediumSeaGreen}{正例:} $ <code>MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</code><br> $\color{OrangeRed}{反例:}$ <code>macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</code></p>
</li>
<li><p>方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase风格，必须遵从驼峰形式<br> $\color{MediumSeaGreen}{正例:}$ <code>localValue / getHttpMessage() / inputUserId</code><br>[<sub>其实我并不是很热衷写这种用例, 虽然它很直观,但是阿里巴巴已经写好了,感兴趣可以直接下载附件,更多的是我们每书写一段代码是否有认真思考过,有些人没有命名意识会做错,有些人不知道但是拷贝的做会正确,有些人通过经验习惯做会正确,但是有没有停下来归纳一下正确的写法有哪些通用的,这会比写出一百两百个用例更有效 —Sp!ke</sub>]</p>
</li>
</ol>
<h4 id="1-1-2-常量、变量命名"><a href="#1-1-2-常量、变量命名" class="headerlink" title="1.1.2 常量、变量命名"></a>1.1.2 常量、变量命名</h4><p>[<sub>常量与变量命名并没有太多的点只是罗列几点 —Sp!ke</sub>]</p>
<p>变量:</p>
<ol>
<li>驼峰命名规则</li>
<li>第一个首字母小写后续单词首字母大写</li>
<li>减少不通用的缩写</li>
<li>命名需要满足阅读顺序 <code>actorListName</code> -&gt; <code>actorNameList</code>,  <code>sourcePrefixActorList</code>-&gt;<code>actorSourcePerfixList</code></li>
<li>不要加入无意义的魔法数字或者符号 <code>str1</code> -&gt; <code>origin</code> , <code>table13</code> -&gt; <code>mainTable</code></li>
<li>歧义的变量 例如：<code>logger</code> <code>LOGGER</code> 根据实际情况处理</li>
</ol>
<p>常量</p>
<ol>
<li>全大写</li>
<li>单词之间使用下划线做分割</li>
<li>其他规则参考变量</li>
</ol>
<h4 id="1-1-3-类命名"><a href="#1-1-3-类命名" class="headerlink" title="1.1.3 类命名"></a>1.1.3 类命名</h4><p>[<sub>类的命名是很重要的，但是不单单是命名更多的是名字就是他的职责与功能，类有两个点需要时刻注意 1.类型 2.命名 —Sp!ke</sub>]</p>
<h5 id="1-1-3-1-类型"><a href="#1-1-3-1-类型" class="headerlink" title="1.1.3.1 类型"></a>1.1.3.1 类型</h5><p>[<sub>无论下面哪种类型在编译之后都会以.class形式存在， 那么为什么又要拆分成不同类型呢，不同类型负责的职责也不同，当然你也可以混用但是不建议，失去了真正职责的类相当于，使用饭碗装排泄物 —Sp!ke</sub>]</p>
<ol>
<li><code>Class</code> 类 : 更泛泛的通用的容器，可以理解为 normal</li>
<li><code>Enum</code> 枚举类 : 枚举的特性在于内部的强关联，以及元素之间的规律性 <code>RED, BLUE, BLACK</code> 可以做一组枚举， 但是 <code>RED, NAME, JAVA</code>一组枚举就会莫名其妙</li>
<li><code>Interface</code> 接口类 : 接口在Java中作用其一是弥补Java单继承的不足，作用其二是更好实现OOP的多态[<sub>我们的代码中有将常量放在interface里定义的情况，并不是说这种不可以，首先不建议因为失去了Interface的真正意义，其次如何给Interface命名呢<code>UserConstant</code>么，还是需要思考一下吧 —Sp!ke</sub>]</li>
<li><code>Annotation</code> 注解类 : 注解类不做太多阐述，他的使用会使程序更加灵活，但也不可控[<sub>事物都存在双面性 —Sp!ke</sub>]</li>
</ol>
<h5 id="1-1-3-2-命名"><a href="#1-1-3-2-命名" class="headerlink" title="1.1.3.2 命名"></a>1.1.3.2 命名</h5><p>[<sub>我们所期待的良好的类命名是为了看到名字就知道作用 —Sp!ke</sub>]</p>
<p>包名 <code>(packages)</code> 建议后面追加<code>s</code>, 例如<code>Utils</code> <code>Constants</code> <code>Enums</code></p>
<hr>
<p>基础层 [<sub>每一层完成他自己的事情,不要越级处理 —Sp!ke</sub>]</p>
<ol>
<li><code>Controller</code>	$\color{CornflowerBlue}{后缀}$ Web控制层 负责请求分配, 具体交给<code>Service</code>还是重定向有具体业务判断, 建议只包含<code>Request</code> <code>Response</code>(可自定义) 数据的封装与下发 [<sub>上层、下层、底层、业务 Whatever —Sp!ke</sub>]</li>
<li><code>Service</code> $\color{CornflowerBlue}{后缀}$ 业务层 具体业务处理 由入口输入(<code>Controller</code> <code>Executer</code> 等进入 ) 负责加工、执行、处理调用数据层(<code>DAO</code> <code>Manager</code> <code>RedisTemplate</code> <code>Service</code>等)</li>
<li><code>DAO</code> <code>Dao</code> $\color{CornflowerBlue}{后缀}$ 数据持久层 与持久化层对接 只处理数据的 <code>CURD</code>操作、以及数据源使用[<sub>我理解一个完整的<code>DAO</code>包含了<code>MySQL</code> <code>Redis</code> <code>Mongo</code>等等的集成 而不是单一的处理 —Sp!ke</sub>]</li>
</ol>
<hr>
<p>常见类命名</p>
<ol>
<li><code>Application</code> $\color{CornflowerBlue}{后缀}$ 启动类 项目唯一主入口 [<sub>我建议业务类型服务只用<code>Application</code>命名即可,不需要加入具体业务前缀, 可以规范运维启动脚本 —Sp!ke</sub>]</li>
<li><code>Config</code> <code>Configuration</code> $\color{CornflowerBlue}{后缀}$ 配置类</li>
<li><code>Constant</code> $\color{CornflowerBlue}{后缀}$ 常量类 建议同一个常量类中常量具有相关性,便于管理以及类的命名 [<sub> 这个是否是常量<code>int timeout = 3;</code> —Sp!ke </sub>]</li>
<li><code>Enum</code> $\color{CornflowerBlue}{后缀}$ 枚举类 内部强关联 便于数据整理相当于多维<code>Constant</code></li>
<li><code>Interface</code> $\color{CornflowerBlue}{后缀}$ 接口 [<sub>接口是用来实现的, 失去了行为的接口是没有意义的</sub>]</li>
<li><code>Base</code> <code>Common</code> <code>Super</code> <code>Abstract</code> $\color{CornflowerBlue}{前后缀均可} $ <code>Abstract</code> $\color{CornflowerBlue}{前缀}$父类或基础类</li>
<li><code>Exception</code> $\color{CornflowerBlue}{后缀}$  异常类 异常类多指自定义异常</li>
<li><code>Impl</code> $\color{CornflowerBlue}{后缀}$  实现类 与 <code>Interface</code>相关,子母关系缺一不可 使用<code>extends</code>不要加<code>Impl</code>后缀</li>
<li><code>Utils</code>  $\color{CornflowerBlue}{后缀}$ 工具类 工具类<code>pulibc</code>修饰应加入 <code>static</code> 内部 <code>private</code>为特有</li>
<li><code>Data</code> <code>Entity</code> <code>Bean</code> <code>Domain</code> <code>Model</code> <code>POJO</code>  $\color{CornflowerBlue}{后缀}$ 实体</li>
</ol>
<p>[<sub>有一种说法 <code>Data</code> <code>Model</code> 修饰不需要加, 这是一种累赘的命名 类似<code>actorNameString</code> —Sp!ke</sub>]</p>
<p>实体、数据对象[<sup>4</sup>] (#refer-anchor-4) [<sup>5</sup>] (#refer-anchor-5)</p>
<blockquote>
<ol>
<li><code>Data</code> <code>Info</code> <code>Detail</code> [<sub>不好说没有这个规则, 只能说能看懂 —Sp!ke</sub>]<ol>
<li><code>Entity</code> 就是实体的意思，所以也是最常用到的，<code>Entity</code>包中的类是必须和数据库相对应的</li>
<li><code>Model</code> 最早与WEB相关, 是为页面提供数据和数据校验的</li>
<li><code>Domain</code> 代表一个对象模块, 这个包国外很多项目经常用到，字面意思是域的意思, 比如一个商城的项目，商城主要的模块就是用户，订单，商品三大模块，那么这三块数据就可以叫做三个域</li>
<li><code>POJO</code> <code>Plain OrdinaryJava Object</code>的缩写不错，但是它通指没有使用<code>Entity</code> <code>Beans</code>的普通java对象，可以把<code>POJO</code>作为支持业务逻辑的协助类</li>
<li><code>VO</code>  <code>View Object</code> 视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来</li>
<li><code>DTO</code> <code>Data Transfer Object</code> 数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象</li>
<li><code>DO</code> <code>Domain Object</code> 领域对象，就是从现实世界中抽象出来的有形或无形的业务实体</li>
<li><code>PO</code> <code>Persistent Object</code> 持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</li>
</ol>
</li>
</ol>
</blockquote>
<hr>
<p>对于常量<code>Class</code> <code>Interface</code>进行了一些文献查询，还是众说纷纭，只能说建议</p>
<blockquote>
<p>常量接口模式<br><strong>The constant interface pattern is a poor use of interfaces</strong> . That a class uses some constants internally is an implementation detail.<br>Implementing a constant interface causes this implementation detail to leak into the class’s exported API.<br>It is of no consequence to the users of a class that the class implements a constant interface. In fact, it may even confuse them.<br>Worse, it represents a commitment: if in a future release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.<br>If a nonfinal class implements a constant interface, all of its subclasses will have their namespaces polluted by the constants in the interface.<br>There are several constant interfaces in the java platform libraries, such as  <code>java.io.ObjectStreamConstants</code> .<br>These interfaces should be regarded as anomalies and should not be emulated.<br><strong>原文出自see <a class="link"   href="http://www.oracle.com/technetwork/java/effectivejava-136174.html" >Effective Java <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
</blockquote>
<p>一下连接仅供参考</p>
<ul>
<li><a class="link"   href="https://www.cnblogs.com/wanqieddy/p/9051568.html" >https://www.cnblogs.com/wanqieddy/p/9051568.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/voo00oov/article/details/50433672" >https://blog.csdn.net/voo00oov/article/details/50433672 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://stackoverflow.com/questions/2659593/what-is-the-use-of-interface-constants" >https://stackoverflow.com/questions/2659593/what-is-the-use-of-interface-constants <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://docs.oracle.com/javase/tutorial/java/IandI/interfaceDef.html" >https://docs.oracle.com/javase/tutorial/java/IandI/interfaceDef.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>也有一种优雅的写法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class Constants &#123;</span><br><span class="line"></span><br><span class="line">    private Constants() &#123;</span><br><span class="line">        // restrict instantiation</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static final double PI = 3.14159;</span><br><span class="line">    public static final double PLANCK_CONSTANT = 6.62606896e-34;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>管理类命名</p>
<ol>
<li><code>Pool</code>  $\color{CornflowerBlue}{后缀}$ 池</li>
<li><code>Manager</code> <code>Mgr</code>  $\color{CornflowerBlue}{后缀}$ 管理器</li>
<li><code>Group</code>  $\color{CornflowerBlue}{后缀}$ 群</li>
<li><code>Proxy</code>  $\color{CornflowerBlue}{后缀}$ 代理类</li>
<li><code>Balance</code>  $\color{CornflowerBlue}{后缀}$ 均衡器</li>
<li><code>Container</code>  $\color{CornflowerBlue}{后缀}$ 容器</li>
</ol>
<hr>
<p>创建类命名</p>
<ol>
<li><code>Generator</code>  $\color{CornflowerBlue}{后缀}$ 生成器</li>
<li><code>Builder</code>  $\color{CornflowerBlue}{后缀}$ 构建器</li>
<li><code>Factory</code>  $\color{CornflowerBlue}{后缀}$ 工厂</li>
</ol>
<hr>
<p>协议通讯相关功能</p>
<ol>
<li><code>Msg</code> <code>Ack</code> <code>Req</code> <code>Resp</code>  $\color{CornflowerBlue}{前后缀均可,推荐后缀}$ 消息类</li>
<li><code>Header</code> <code>Body</code>  $\color{CornflowerBlue}{后缀}$ 头部 主体</li>
<li><code>Proto</code> <code>Protobuf</code>  $\color{CornflowerBlue}{后缀}$ 协议类</li>
<li><code>Sender</code>  $\color{CornflowerBlue}{后缀}$ 发送者</li>
<li><code>Receiver</code>  $\color{CornflowerBlue}{后缀}$ 接收者</li>
</ol>
<hr>
<p>其他功能</p>
<ol>
<li><p><code>Listener</code>  $\color{CornflowerBlue}{后缀}$ 监听</p>
</li>
<li><p><code>Filter</code>  $\color{CornflowerBlue}{后缀}$ 过滤器 Java中起源于Servlet</p>
</li>
<li><p><code>Interceptor</code>  $\color{CornflowerBlue}{后缀}$ 拦截器 Java中起源于Spring<br>[<sub>从某种意义上来说 <code>Filter</code> <code>Interceptor</code> 并没有冲突 他们是两个容器的筛选 存在顺序关系 可以查看容器的结构 —Sp!ke</sub>]</p>
</li>
<li><p><code>Executer</code>  $\color{CornflowerBlue}{后缀}$ 处理器 [<sub><code>Executer</code>与<code>Service</code>在于 <code>Service</code>可以拥有独立的规范函数 <code>Executer</code> 则具有集体特性 —Sp!ke</sub>]</p>
</li>
<li><p><code>Templater</code>  $\color{CornflowerBlue}{后缀}$ 模板</p>
</li>
<li><p><code>Converter</code>  $\color{CornflowerBlue}{后缀}$ 转换器</p>
</li>
<li><p><code>Connector</code>  $\color{CornflowerBlue}{后缀}$ 连接器</p>
</li>
<li><p><code>Recorder</code>  $\color{CornflowerBlue}{后缀}$ 记录器</p>
</li>
<li><p><code>Monitor</code>  $\color{CornflowerBlue}{后缀}$ 监控器</p>
</li>
<li><p><code>Server</code>  $\color{CornflowerBlue}{后缀}$ 服务器 注意<code>Server</code>代表一个大型的容器概念 , <code>Service</code>代表某个具体的业务</p>
</li>
<li><p><code>Client</code>  $\color{CornflowerBlue}{后缀}$ 终端类</p>
</li>
</ol>
<hr>
<p><code>er</code> <code>or</code> 尾缀代表执行者关系类似 <code>TaskPool</code> <code>Tasker</code>或者<code>ExecutorGroup</code> <code>Executor</code><br>[<sub>更多的命名可以参考设计模式名称, 核心是见词知意 —Sp!ke</sub>]<br>(<code>Singleton</code> <code>Prototype</code> <code>Adapter</code> <code>Bridge</code> <code>Decorator</code> <code>Interpreter</code> <code>Command</code> <code>Mediator</code> <code>State</code> <code>Visitor</code> <code>Strategy</code> <code>Memento</code> <code>...</code>)[<sup>7</sup>] (#refer-anchor-7)</p>
<blockquote>
<p>思考: <code>DAO</code> <code>Dao</code>, <code>DTO</code> <code>Dto</code> 模棱两可的命名如何处理?</p>
</blockquote>
<h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p>注释有利于帮助理解代码，如果使用不当，反而会影响代码的简洁性，不利于理解代码。注释在使用上笔者认为需要坚持三个原则：</p>
<ol>
<li>保持代码干净，消除不必要的注释：好的代码本身就是最好的注释，只在必要时通过注释协助理解代码，目的是保持代码的简洁性，增强代码的可读性；</li>
<li>区分注释和JavaDoc：类、域、方法使用JavaDoc，方法内部使用注释；</li>
<li>注释及时更新：注释也是代码的一部分，如果代码发生变更，注释也要跟着改；</li>
</ol>
<p>[<sub>我的理解注释的意义是补全,补全那些我们不能写成有效代码的片段、文字,也有人会指这我问为什么这个类没有一句注释, <code>String userLastName = &quot;zhang&quot;;</code> 需要注释么 —Sp!ke</sub>]</p>
<p>例:<a href="#refer-anchor-2"><sup>2</sup></a> [<sup>3</sup>] (#refer-anchor-3)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String unitAbbrev = &quot;μs&quot;;									| 赞，即使没有注释也非常清晰</span><br><span class="line">String unitAbbrev = &quot;\u03bcs&quot;; // &quot;μs&quot;						| 允许，但没有理由要这样做</span><br><span class="line">String unitAbbrev = &quot;\u03bcs&quot;; // Greek letter mu, &quot;s&quot;				| 允许，但这样做显得笨拙还容易出错</span><br><span class="line">String unitAbbrev = &quot;\u03bcs&quot;;								| 很糟，读者根本看不出这是什么</span><br><span class="line">return &#x27;\ufeff&#x27; + content; // byte order mark					| Good，对于非打印字符，使用转义，并在必要时写上注释</span><br></pre></td></tr></table></figure></div>

<h2 id="2-日志"><a href="#2-日志" class="headerlink" title="2 日志"></a>2 日志</h2><blockquote>
<p>不管是使用何种编程语言，日志输出几乎无处不在。总结起来，日志大致有以下几种用途：<br>    * 问题跟踪：通过日志不仅仅包括我们程序的一些bug，也可以在安装配置时，通过日志可以发现问题。<br>    * 状态监控：通过实时分析日志，可以监控系统的运行状态，做到早发现问题，早处理问题。<br>    * 安全审计：审计主要体现在安全方面上，通过日志进行分析，可以发现是否存在非授权的操作。</p>
</blockquote>
<h3 id="2-1-级别"><a href="#2-1-级别" class="headerlink" title="2.1 级别"></a>2.1 级别</h3><ol>
<li><code>fatal</code> - 严重的，造成服务中断的错误；</li>
<li><code>error</code> - 其他错误运行期错误；</li>
<li><code>warn</code> - 警告信息，如程序调用了一个即将作废的接口，接口的不当使用，运行状态不是期望的但仍可继续处理等；</li>
<li><code>info</code> - 有意义的事件信息，如程序启动，关闭事件，收到请求事件等；</li>
<li><code>debug</code> - 调试信息，可记录详细的业务处理到哪一步了，以及当前的变量状态；</li>
<li><code>trace</code> - 更详细的跟踪信息；</li>
</ol>
<h3 id="2-2-基本的Logger编码规范"><a href="#2-2-基本的Logger编码规范" class="headerlink" title="2.2 基本的Logger编码规范"></a>2.2 基本的Logger编码规范</h3><ol>
<li>在一个对象中通常只使用一个<code>Logger</code>对象，Logger应该是<code>static final</code>的，只有在少数需要在构造函数中传递<code>logger</code>的情况下才使用<code>private final</code>。</li>
<li>输出<code>Exceptions</code>的全部<code>Throwable</code>信息，因为<code>logger.error(msg)</code>和<code>logger.error(msg,e.getMessage())</code>这样的日志输出方法会丢失掉最重要的StackTrace信息。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// do something</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		logger.error(e.getMessage()); <span class="comment">// 错误</span></span><br><span class="line">		logger.error(<span class="string">&quot;Bad things&quot;</span>, e.getMessage()); <span class="comment">// 错误</span></span><br><span class="line">		logger.error(<span class="string">&quot;Bad things&quot;</span>, e); <span class="comment">// 正确</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>不允许记录日志后又抛出异常，因为这样会多次记录日志，只允许记录一次日志。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// do something</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		logger.error(e.getMessage());</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Bad things&quot;</span>, e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>不允许出现System print(包括System.out.println和System.error.println)语句。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// do something</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		System.out.println(e.getMessage()); <span class="comment">// 错误</span></span><br><span class="line">		logger.error(<span class="string">&quot;Bad things&quot;</span>, e); <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>不允许出现printStackTrace。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// do something</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace(); <span class="comment">// 错误</span></span><br><span class="line">		logger.error(<span class="string">&quot;Bad things&quot;</span>, e); <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li>日志性能的考虑，如果代码为核心代码，执行频率非常高，则输出日志建议增加判断，尤其是低级别的输出&lt;<code>debug</code>、<code>info</code>、<code>warn</code>&gt;。<br> debug日志太多后可能会影响性能，有一种改进方法是：</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">	logger.info(<span class="string">&quot;returning content: &quot;</span> + content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<pre><code>但更好的方法是Slf4j提供的最佳实践:
</code></pre>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;returning content: &quot;</span> + content);</span><br></pre></td></tr></table></figure></div>

<pre><code>一方面可以减少参数构造的开销，另一方面也不用多写两行代码。
</code></pre>
<ol start="7">
<li>有意义的日志</li>
</ol>
<p>通常情况下在程序日志里记录一些比较有意义的状态数据：程序启动，退出的时间点；程序运行消耗时间；耗时程序的执行进度；重要变量的状态变化。<br>初次之外，在公共的日志里规避打印程序的调试或者提示信息。</p>
<h3 id="2-3-日志的输出"><a href="#2-3-日志的输出" class="headerlink" title="2.3 日志的输出"></a>2.3 日志的输出</h3><h4 id="2-3-1-什么时候输出"><a href="#2-3-1-什么时候输出" class="headerlink" title="2.3.1 什么时候输出"></a>2.3.1 什么时候输出</h4><blockquote>
<p>日志并不是越多越详细就越好。在分析运行日志，查找问题时，我们经常遇到该出现的日志没有，无用的日志一大堆，或者有效的日志被大量无意义的日志信息淹没，查找起来非常困难。那么什么时候输出日志呢？以下列出了一些常见的需要输出日志的情况，而且日志的级别基本都是<code>INFO</code>，至于<code>DEBUG</code>级别日志的使用场景，需要具体情况具体分析，但也是要追求“恰如其分”，不是越多越好。</p>
</blockquote>
<ol>
<li>系统启动参数、环境变量 : 系统启动的参数、配置、环境变量、<code>System.Properties</code>等信息对于软件的正常运行至关重要，这些信息的输出有助于安装配置人员通过日志快速定位问题，所以程序有必要在启动过程中把使用到的关键参数、变量在日志中输出出来。在输出时需要注意，不是一股脑的全部输出，而是将软件运行涉及到的配置信息输出出来。比如，如果软件对jvm的内存参数比较敏感，对最低配置有要求，那么就需要在日志中将<code>-Xms -Xmx -XX:PermSize</code>这几个参数的值输出出来。</li>
<li>异常捕获 : 在捕获异常处输出日志，大家在基本都能做到，唯一需要注意的是怎么输出一个简单明了的日志信息。这在后面的问题问题中有进一步说明。</li>
<li>函数获得期望之外的结果时 : 一个函数，尤其是供外部系统或远程调用的函数，通常都会有一个期望的结果，但如果内部系统或输出参数发生错误时，函数将无法返回期望的正确结果，此时就需要记录日志，日志的基本通常是<code>WARN</code>。需要特别说明的是，这里的期望之外的结果不是说没有返回就不需要记录日志了，也不是说返回<code>false</code>就需要记录日志。比如函数：<code>isXXXXX()</code>，无论返回<code>true</code>、<code>false</code>记录日志都不是必须的，但是如果系统内部无法判断应该返回<code>true</code>还是<code>false</code>时，就需要记录日志，并且日志的级别应该至少是 <code>WARN</code>。</li>
<li>关键操作 : 关键操作的日志一般是INFO级别，如果数量、频度很高，可以考虑使用DEBUG级别。以下是一些关键操作的举例，实际的关键操作肯定不止这么多。</li>
</ol>
<h4 id="2-3-2-输出什么"><a href="#2-3-2-输出什么" class="headerlink" title="2.3.2 输出什么"></a>2.3.2 输出什么</h4><ol>
<li>关键路径 : 日志并不是独立存在的,而是以一片文章阅读方式存在的</li>
<li>关键字段 : <code>UID</code> <code>CID</code> <code>AID</code> <code>RequestID</code> 一个链路上可以通过唯一一个值,即可将整个<code>I/O</code>操作串联起来的<code>Keyword</code>, 	扩展是跨项目、跨工程之间的思考</li>
<li>关键描述 : 时间、地点、人物、事件大家都玩过这个游戏吧</li>
</ol>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3 代码"></a>3 代码</h2><blockquote>
<p>代码! 代码! 代码!</p>
</blockquote>
<blockquote>
<p>Error&#x3D;more code^2</p>
</blockquote>
<h2 id="4-如何优化"><a href="#4-如何优化" class="headerlink" title="4 如何优化"></a>4 如何优化</h2><h2 id="5-如何思考"><a href="#5-如何思考" class="headerlink" title="5 如何思考"></a>5 如何思考</h2><h2 id="6-如何避免陷入-牛角尖、瓶颈、自大、自卑、思维僵化"><a href="#6-如何避免陷入-牛角尖、瓶颈、自大、自卑、思维僵化" class="headerlink" title="6 如何避免陷入(牛角尖、瓶颈、自大、自卑、思维僵化)"></a>6 如何避免陷入(牛角尖、瓶颈、自大、自卑、思维僵化)</h2><video id="video" controls="" loop="loop" autoplay="autoplay" src="/images/2021-04-23-0.mp4" />


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div id="refer-anchor-1"></div>

<ul>
<li>[1] <a class="link"   href="https://zhuanlan.zhihu.com/p/104253155" >浅谈Java编码规范 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-2"></div>

<ul>
<li>[2] <a class="link"   href="https://www.cnblogs.com/lanxuezaipiao/p/3534447.html" >Google Java编程风格指南中文版 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-3"></div>

<ul>
<li>[3] <a class="link"   href="https://google.github.io/styleguide/javaguide.html" >Google Java Style Guide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-4"></div>

<ul>
<li>[4] <a class="link"   href="https://www.cnblogs.com/qianjinyan/p/10341710.html" >实体entity、JavaBean、Model、POJO、domain的区别 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-5"></div>

<ul>
<li>[5] <a class="link"   href="https://www.cnblogs.com/huangwentian/p/10526917.html" >浅析VO、DTO、DO、PO的概念、区别和用处 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-6"></div>

<ul>
<li>[6] <a class="link"   href="http://www.jizhuomi.com/software/402.html" >设计模式与追妹子(23种设计模式巧妙解析，趣味理解) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-7"></div>

<ul>
<li>[7] <a class="link"   href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" >设计模式|菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-8"></div>

<ul>
<li>[8] [阿里巴巴开发手册]</li>
</ul>
<div id="refer-anchor-9"></div>

<ul>
<li>[9] <a class="link"   href="https://my.oschina.net/xiaominmin/blog/1599733" >java Log日志规范 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div id="refer-anchor-10"></div>

<ul>
<li>[10] <a class="link"   href="https://blog.csdn.net/Farrell_zeng/article/details/99303649" >log日志输出规范 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下MySQL安装</title>
    <url>/2017/02/27/Linux-%E4%B8%8BMySQL%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>注意：如果安装失败，可尝试关闭selinux和防火墙再行测试。</p>
</blockquote>
<h3 id="安装MySQL前准备"><a href="#安装MySQL前准备" class="headerlink" title="安装MySQL前准备"></a>安装MySQL前准备</h3><h5 id="第一步：安装编译源码所需的工具和库"><a href="#第一步：安装编译源码所需的工具和库" class="headerlink" title="第一步：安装编译源码所需的工具和库"></a>第一步：安装编译源码所需的工具和库</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc gcc-c++ ncurses-devel perl </span><br></pre></td></tr></table></figure></div>

<h5 id="第二步：mysql-5-6版本之后需要cmake-安装cmake"><a href="#第二步：mysql-5-6版本之后需要cmake-安装cmake" class="headerlink" title="第二步：mysql 5.6版本之后需要cmake,安装cmake"></a>第二步：mysql 5.6版本之后需要cmake,安装cmake</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.cmake.org/files/v2.8/cmake-2.8.10.2.tar.gz   </span><br><span class="line">tar -xzvf cmake-2.8.10.2.tar.gz   </span><br><span class="line"><span class="built_in">cd</span> cmake-2.8.10.2   </span><br><span class="line">./bootstrap ; make ; make install   </span><br></pre></td></tr></table></figure></div>

<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><h5 id="第一步：新建mysql用户和mysql组"><a href="#第一步：新建mysql用户和mysql组" class="headerlink" title="第一步：新建mysql用户和mysql组"></a>第一步：新建mysql用户和mysql组</h5><p>新增mysql用户组 </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mysql </span><br></pre></td></tr></table></figure></div>

<p>新增mysql用户 </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -r -g mysql mysql </span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_27_1.jpg"
                     
                ></p>
<h5 id="第二步：新建MySQL所需要的目录"><a href="#第二步：新建MySQL所需要的目录" class="headerlink" title="第二步：新建MySQL所需要的目录"></a>第二步：新建MySQL所需要的目录</h5><p>新建mysql安装目录 </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -pv  /usr/local/mysql</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>建立mysql的安装目录，建议先创建目录<br>若不建立可能在编译安装的时候报no such irectory</p>
</blockquote>
<p>新建mysql数据库数据文件目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/mysqldb  </span><br></pre></td></tr></table></figure></div>

<p>指定mysql的数据文件的目录，建议编译安装前先创建此目录</p>
<h5 id="第三步：下载MySQL并解压"><a href="#第三步：下载MySQL并解压" class="headerlink" title="第三步：下载MySQL并解压"></a>第三步：下载MySQL并解压</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.24.tar.gz</span><br><span class="line">tar -zxvf mysql-5.6.14.tar.gz</span><br></pre></td></tr></table></figure></div>

<h5 id="第四步：安装MySQL"><a href="#第四步：安装MySQL" class="headerlink" title="第四步：安装MySQL"></a>第四步：安装MySQL</h5><p>切换到 mysql-5.6.24  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysql-5.6.24</span><br></pre></td></tr></table></figure></div>

<p>编译mysql，执行如下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">cmake \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci</span><br></pre></td></tr></table></figure></div>

<p>接着使用 make &amp;&amp; make install 来编译并安装</p>
<p>安装完毕的截图如下</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_27_2.jpg"
                     
                > </p>
<h3 id="安装MySQL后设置"><a href="#安装MySQL后设置" class="headerlink" title="安装MySQL后设置"></a>安装MySQL后设置</h3><h5 id="第一步：修改mysql目录属组"><a href="#第一步：修改mysql目录属组" class="headerlink" title="第一步：修改mysql目录属组"></a>第一步：修改mysql目录属组</h5><p>修改mysql安装目录</p>
<blockquote>
<p>若不修改默认的是root用户root组，启动会报错<br>（Starting MySQL..The server quit without updating PID file [FAILED]&#x2F;mysql&#x2F;Server03.mylinux.com.pid）</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql   </span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql . </span><br></pre></td></tr></table></figure></div>

<p>修改mysql数据库文件目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/mysqldb  </span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql .  </span><br></pre></td></tr></table></figure></div>

<h5 id="第二步：初始化mysql数据库"><a href="#第二步：初始化mysql数据库" class="headerlink" title="第二步：初始化mysql数据库"></a>第二步：初始化mysql数据库</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql   </span><br></pre></td></tr></table></figure></div>

<p>以mysql的身份初始化</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">scripts/mysql_install_db --user=mysql --datadir=/data/mysqldb </span><br></pre></td></tr></table></figure></div>

<h5 id="第三步：复制mysql服务启动配置文件"><a href="#第三步：复制mysql服务启动配置文件" class="headerlink" title="第三步：复制mysql服务启动配置文件"></a>第三步：复制mysql服务启动配置文件</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf  </span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：如果&#x2F;etc&#x2F;my.cnf文件存在，则覆盖。</p>
</blockquote>
<h5 id="第四步：复制mysql服务启动脚本及加入PATH路径"><a href="#第四步：复制mysql服务启动脚本及加入PATH路径" class="headerlink" title="第四步：复制mysql服务启动脚本及加入PATH路径"></a>第四步：复制mysql服务启动脚本及加入PATH路径</h5><blockquote>
<p>（不用每次都要到安装目录执行mysql）</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> support-files/mysql.server /etc/init.d/mysqld     </span><br><span class="line">vim /etc/profile   </span><br><span class="line">PATH=/usr/local/mysql/bin:/usr/local/mysql/lib:<span class="variable">$PATH</span>  </span><br><span class="line"><span class="built_in">export</span> PATH  </span><br><span class="line"><span class="built_in">source</span> /etc/profile    </span><br></pre></td></tr></table></figure></div>

<h5 id="第五步：-启动mysql服务并加入开机自启动-可选这个步骤，以后可以自己启动的"><a href="#第五步：-启动mysql服务并加入开机自启动-可选这个步骤，以后可以自己启动的" class="headerlink" title="第五步： 启动mysql服务并加入开机自启动(可选这个步骤，以后可以自己启动的)"></a>第五步： 启动mysql服务并加入开机自启动(可选这个步骤，以后可以自己启动的)</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start </span><br><span class="line">chkconfig --level 35 mysqld on</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_27_3.jpg"
                     
                > </p>
<h5 id="第六步：检查mysql服务是否启动"><a href="#第六步：检查mysql服务是否启动" class="headerlink" title="第六步：检查mysql服务是否启动"></a>第六步：检查mysql服务是否启动</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -tulnp | grep 3306   </span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_27_4.jpg"
                     
                ></p>
<p>到此服务器mysql已经安装并已经启动，接下来修改MySQL用户root的密码，登录测试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password <span class="string">&#x27;123456&#x27;</span>  </span><br></pre></td></tr></table></figure></div>

<h5 id="第七步：mysql命令登录测试"><a href="#第七步：mysql命令登录测试" class="headerlink" title="第七步：mysql命令登录测试"></a>第七步：mysql命令登录测试</h5><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_27_5.jpg"
                     
                > </p>
<p>mysql安装完毕，成功登录</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下Tomcat安装</title>
    <url>/2017/02/26/Linux-%E4%B8%8BTomcat%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="第一步-下载tomcat"><a href="#第一步-下载tomcat" class="headerlink" title="第一步 下载tomcat"></a>第一步 下载tomcat</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://apache.fayea.com/tomcat/tomcat-*/v*.*.**/bin/apache-tomcat-*.*.**.tar.gz</span><br></pre></td></tr></table></figure></div>
<p> 或者在本地下载好tomcat安装包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_01.jpg"
                     
                ></p>
<h3 id="第二步-将tomcat移动放置到-usr-local-目录下"><a href="#第二步-将tomcat移动放置到-usr-local-目录下" class="headerlink" title="第二步 将tomcat移动放置到 &#x2F;usr&#x2F;local&#x2F; 目录下"></a>第二步 将tomcat移动放置到 &#x2F;usr&#x2F;local&#x2F; 目录下</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> apache-tomcat-*.*.**.tar.gz /usr/local/</span><br></pre></td></tr></table></figure></div>
<h3 id="第三步-将tomcat解压缩"><a href="#第三步-将tomcat解压缩" class="headerlink" title="第三步 将tomcat解压缩"></a>第三步 将tomcat解压缩</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvzf /usr/local/apache-tomcat-*.*.**.tar.gz</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_02.jpg"
                     
                ></p>
<h3 id="第四步-设置tomcat开机自启动，"><a href="#第四步-设置tomcat开机自启动，" class="headerlink" title="第四步 设置tomcat开机自启动，"></a>第四步 设置tomcat开机自启动，</h3><p>编辑&#x2F;usr&#x2F;local&#x2F;apache-tomcat-<em>.</em>.**.tar.gz&#x2F;bin&#x2F;startup.sh</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/local/apache-tomcat-*.*.**/bin/startup.sh</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_03.jpg"
                     
                ></p>
<p>添加</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#chkconfig: 2345 80 90</span></span><br><span class="line"><span class="comment">#description:tomcat auto start</span></span><br><span class="line"><span class="comment">#processname: tomcat</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_04.jpg"
                     
                ></p>
<p>编辑&#x2F;usr&#x2F;local&#x2F;apache-tomcat-<em>.</em>.**&#x2F;bin&#x2F;catalina.sh</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/local/apache-tomcat-*.*.**/bin/catalina.sh</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_05.jpg"
                     
                ></p>
<p>搜索export关键字，加入如下行：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_BASE=/usr/local/apache-tomcat-*.*.**</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/local/apache-tomcat-*.*.**</span><br><span class="line"><span class="built_in">export</span> CATALINA_TMPDIR=/usr/local/apache-tomcat-*.*.**</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_06.jpg"
                     
                ></p>
<p>将tomcat加入开机自启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_07.jpg"
                     
                ></p>
<p>加入如下内容：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk*.*.*_**</span><br><span class="line">/usr/local/apache-tomcat-*.*.**/bin/startup.sh start</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_08.jpg"
                     
                ></p>
<h3 id="第五步-测试Tomcat运行"><a href="#第五步-测试Tomcat运行" class="headerlink" title="第五步 测试Tomcat运行"></a>第五步 测试Tomcat运行</h3><p>执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/apache-tomcat-*.*.**/bin/startup.sh </span><br></pre></td></tr></table></figure></div>

<p>启动tomcat</p>
<p>打开浏览器测试：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_09.jpg"
                     
                > </p>
<p>执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/apache-tomcat-*.*.**/bin/shutdown.sh </span><br></pre></td></tr></table></figure></div>

<p>关闭tomcat</p>
<h3 id="第六步-修改端口"><a href="#第六步-修改端口" class="headerlink" title="第六步 修改端口"></a>第六步 修改端口</h3><p>tomcat默认监听8080端口，如果要修改成为80端口，按如下步骤修改：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/local/apache-tomcat-*.*.**/conf/server.xml</span><br></pre></td></tr></table></figure></div>

<p>将</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">&quot;tomcatThreadPool&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>修改为：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">&quot;tomcatThreadPool&quot;</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_10.jpg"
                     
                ></p>
<p>重启tomcat生效。</p>
<p>测试Tomcat：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_26_11.jpg"
                     
                ></p>
<p>tomcat安装完毕。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下zip压缩操作</title>
    <url>/2017/02/22/Linux-%E4%B8%8Bzip%E5%8E%8B%E7%BC%A9%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>###linux下zip压缩与解压命令为：</p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">压缩</td>
<td align="center">zip</td>
</tr>
<tr>
<td align="center">解压</td>
<td align="center">unzip</td>
</tr>
</tbody></table>
<h3 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h3><blockquote>
<p>命令格式:zip [参数] [压缩后的文件名] [压缩的目录路径]</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>-a</strong></td>
<td align="center">将文件转成ASCII模式</td>
</tr>
<tr>
<td align="center"><strong>-F</strong></td>
<td align="center">尝试修复损坏的压缩文件</td>
</tr>
<tr>
<td align="center"><strong>-h</strong></td>
<td align="center">显示帮助界面</td>
</tr>
<tr>
<td align="center"><strong>-m</strong></td>
<td align="center">将文件压缩之后，删除源文件</td>
</tr>
<tr>
<td align="center"><strong>-n</strong></td>
<td align="center">特定字符串 不压缩具有特定字尾字符串的文件</td>
</tr>
<tr>
<td align="center"><strong>-o</strong></td>
<td align="center">将压缩文件内的所有文件的最新变动时间设为压缩时候的时间</td>
</tr>
<tr>
<td align="center"><strong>-q</strong></td>
<td align="center">安静模式，在压缩的时候不显示指令的执行过程</td>
</tr>
<tr>
<td align="center"><strong>-r</strong></td>
<td align="center">将指定的目录下的所有子目录以及文件一起处理</td>
</tr>
<tr>
<td align="center"><strong>-S</strong></td>
<td align="center">包含系统文件和隐含文件（S是大写）</td>
</tr>
<tr>
<td align="center"><strong>-t</strong></td>
<td align="center">日期 把压缩文件的最后修改日期设为指定的日期，日期格式为mmddyyyy</td>
</tr>
</tbody></table>
<h3 id="解压命令"><a href="#解压命令" class="headerlink" title="解压命令"></a>解压命令</h3><blockquote>
<p>命令格式:unzip [参数] [需要解压的文件名]</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>-l</strong></td>
<td align="center">列出压缩文件所包含的内容</td>
</tr>
<tr>
<td align="center"><strong>-v</strong></td>
<td align="center">显示详细的执行过程</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下文件操作</title>
    <url>/2017/02/21/Linux-%E4%B8%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="linux下文件操作命令为："><a href="#linux下文件操作命令为：" class="headerlink" title="linux下文件操作命令为："></a>linux下文件操作命令为：</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">复制</td>
<td align="center">cp</td>
</tr>
<tr>
<td align="center">移动</td>
<td align="center">mv</td>
</tr>
<tr>
<td align="center">删除</td>
<td align="center">rm</td>
</tr>
</tbody></table>
<h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><blockquote>
<p>   命令格式：cp [-adfilprsu] 源文件(source) 目标文件(destination)<br>                     cp [option] source1 source2 source3 …  directory</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-a</td>
<td align="center">是指archive的意思，也说是指复制所有的目录</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">若源文件为连接文件(link file)，则复制连接文件属性而非文件本身</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">若目标文件(destination)已存在，在覆盖时会先询问是否真的操作</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">建立硬连接(hard link)的连接文件，而非复制文件本身</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">与文件的属性一起复制，而非使用默认属性</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">递归复制，用于目录的复制操作</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">复制成符号连接文件(symbolic link)，即“快捷方式”文件</td>
</tr>
<tr>
<td align="center">-u</td>
<td align="center">若目标文件比源文件旧，更新目标文件</td>
</tr>
</tbody></table>
<pre><code>如将/test1目录下的file1复制到/test3目录，并将文件名改为file2,可输入以下命令：
cp /test1/file1 /test3/file2
</code></pre>
<h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h3><blockquote>
<p>命令格式：mv [-fiv] source destination</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-f</td>
<td align="center">force，强制直接移动而不询问</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">若目标文件(destination)已经存在，就会询问是否覆盖</td>
</tr>
<tr>
<td align="center">-u</td>
<td align="center">若目标文件已经存在，且源文件比较新，才会更新</td>
</tr>
</tbody></table>
<pre><code>如将/test1目录下的file1复制到/test3 目录，并将文件名改为file2,可输入以下命令：
mv /test1/file1 /test3/file2
</code></pre>
<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><blockquote>
<p>命令格式：rm [fir] 文件或目录</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-f</td>
<td align="center">强制删除</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">交互模式，在删除前询问用户是否操作</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">递归删除，常用在目录的删除</td>
</tr>
</tbody></table>
<pre><code>如删除/test目录下的file1文件，可以输入以下命令：
rm -i /test/file1
</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 将可执行文件设为全局可用</title>
    <url>/2024/07/01/Linux-%E5%B0%86%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E8%AE%BE%E4%B8%BA%E5%85%A8%E5%B1%80%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s &lt;binary-path&gt;/&lt;binary-name&gt; /usr/bin/&lt;binary-name&gt;</span><br></pre></td></tr></table></figure></div>

<p>或</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> &lt;binary-name&gt; /usr/local/bin/</span><br></pre></td></tr></table></figure></div>

<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/&lt;binary-name&gt;&quot;</span> &gt;&gt; ~/.profile &amp;&amp; <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure></div>


<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul>
<li><code>/usr/local/bin/</code> 用户安装的</li>
<li><code>/usr/bin/</code> 系统安装的，系统更新时可能发生覆盖</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a class="link"   href="https://stackoverflow.com/questions/14637979/how-to-permanently-set-path-on-linux-unix" >How to permanently set $PATH on Linux&#x2F;Unix [closed] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://unix.stackexchange.com/questions/4186/what-is-usr-local-bin" >What is &#x2F;usr&#x2F;local&#x2F;bin? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 防火墙端口开放</title>
    <url>/2024/06/22/Linux-%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE/</url>
    <content><![CDATA[<h2 id="端口开放"><a href="#端口开放" class="headerlink" title="端口开放"></a>端口开放</h2><p>在Linux中，要开放一个端口，通常需要使用iptables或者firewalld（如果安装了firewalld的话）。</p>
<p>以下是两种情况的示例：</p>
<ol>
<li>使用iptables开放端口（例如开放TCP端口8080）：</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>如果你的系统使用firewalld，可以使用以下命令：</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-port=8080/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>

<p>请确保替换8080为你想要开放的实际端口号，并根据你的实际情况选择使用iptables还是firewalld。</p>
<p>注意：如果你的系统使用的是ufw，可以使用以下命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 8080/tcp</span><br></pre></td></tr></table></figure></div>

<p>这些命令将允许进入指定端口的流量。如果你需要指定IP范围或者其他更复杂的规则，你可能需要编辑iptables的规则或者使用firewalld的更高级功能。</p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown 支持的语言</title>
    <url>/2017/02/27/MarkDown-%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AppleScript</td>
<td align="center">applescript</td>
</tr>
<tr>
<td align="center">ActionScript 3.0</td>
<td align="center">actionscript3 , as3</td>
</tr>
<tr>
<td align="center">Shell</td>
<td align="center">bash , shell</td>
</tr>
<tr>
<td align="center">ColdFusion</td>
<td align="center">coldfusion , cf</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">cpp , c</td>
</tr>
<tr>
<td align="center">C#</td>
<td align="center">c# , c-sharp , csharp</td>
</tr>
<tr>
<td align="center">CSS</td>
<td align="center">css</td>
</tr>
<tr>
<td align="center">Delphi</td>
<td align="center">delphi , pascal , pas</td>
</tr>
<tr>
<td align="center">diff&amp;patch</td>
<td align="center">diff patch</td>
</tr>
<tr>
<td align="center">Erlang</td>
<td align="center">erl , erlang</td>
</tr>
<tr>
<td align="center">Groovy</td>
<td align="center">groovy</td>
</tr>
<tr>
<td align="center">Java</td>
<td align="center">java</td>
</tr>
<tr>
<td align="center">JavaFX</td>
<td align="center">jfx , javafx</td>
</tr>
<tr>
<td align="center">JavaScript</td>
<td align="center">js , jscript , javascript</td>
</tr>
<tr>
<td align="center">Perl</td>
<td align="center">perl , pl , Perl</td>
</tr>
<tr>
<td align="center">PHP</td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">text</td>
<td align="center">text , plain</td>
</tr>
<tr>
<td align="center">Python</td>
<td align="center">py , python</td>
</tr>
<tr>
<td align="center">Ruby</td>
<td align="center">ruby , rails , ror , rb</td>
</tr>
<tr>
<td align="center">SASS&amp;SCSS</td>
<td align="center">sass , scss</td>
</tr>
<tr>
<td align="center">Scala</td>
<td align="center">scala</td>
</tr>
<tr>
<td align="center">SQL</td>
<td align="center">sql</td>
</tr>
<tr>
<td align="center">Visual</td>
<td align="center">Basic	vb , vbnet</td>
</tr>
<tr>
<td align="center">XML</td>
<td align="center">xml , xhtml , xslt , html</td>
</tr>
<tr>
<td align="center">Objective C</td>
<td align="center">objc , obj-c</td>
</tr>
<tr>
<td align="center">F#</td>
<td align="center">f# f-sharp , fsharp</td>
</tr>
<tr>
<td align="center">R</td>
<td align="center">r , s , splus</td>
</tr>
<tr>
<td align="center">matlab</td>
<td align="center">matlab</td>
</tr>
<tr>
<td align="center">swift</td>
<td align="center">swift</td>
</tr>
<tr>
<td align="center">GO</td>
<td align="center">go , golang</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown 插入数学公式</title>
    <url>/2017/02/28/MarkDown-%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="使用Google-Chart的服务器"><a href="#使用Google-Chart的服务器" class="headerlink" title="使用Google Chart的服务器"></a>使用Google Chart的服务器</h3><blockquote>
<p>提示：若无法正确打开<br>在hosts 文件中添加</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">61.91.161.217	chart.googleapis.com</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl= 在此插入Latex公式&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>一个例子，</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=\Large x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>公式显示结果为：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\Large x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}"
                      style="border:none;"
                >

<h3 id="符号对照表"><a href="#符号对照表" class="headerlink" title="符号对照表"></a>符号对照表</h3><blockquote>
<p>注意：不知什么原因 “+” 无法编译 ，后面 “+” 使用 %2B 代替即可</p>
</blockquote>
<h5 id="如何输入上下标"><a href="#如何输入上下标" class="headerlink" title="如何输入上下标"></a>如何输入上下标</h5><blockquote>
<p>^表示上标, _表示下标。如果上下标的内容多于一个字符，要用{}把这些内容括起来当成一个整体。上下标是可以嵌套的，也可以同时使用。</p>
</blockquote>
<p>例子：x^{y^z}&#x3D;(1+{\rm e}^x)^{-2xy^w}</p>
<p>显示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=x^{y^z}=(1%2B{\rm e}^x)^{-2xy^w}"
                      style="border:none;"
                ></p>
<h5 id="如何输入括号和分隔符"><a href="#如何输入括号和分隔符" class="headerlink" title="如何输入括号和分隔符"></a>如何输入括号和分隔符</h5><blockquote>
<p>()、[]和|表示自己，{}表示{}。当要显示大号的括号或分隔符时，要用\left和\right命令。</p>
</blockquote>
<p>例子：f(x,y,z) &#x3D; 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right)</p>
<p>显示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=f(x,y,z) = 3y^2z \left( 3%2B\frac{7x%2B5}{1%2By^2} \right)"
                      style="border:none;"
                ></p>
<h5 id="如何输入分数"><a href="#如何输入分数" class="headerlink" title="如何输入分数"></a>如何输入分数</h5><p>例子：\frac{1}{3}　或　1 \over 3</p>
<p>显示： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\frac{1}{3} "
                      style="border:none;"
                > 　或  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=1 \over 3"
                      style="border:none;"
                ></p>
<h5 id="如何输入开方"><a href="#如何输入开方" class="headerlink" title="如何输入开方"></a>如何输入开方</h5><p>例子：\sqrt{2}　和　\sqrt[n]{3}</p>
<p>显示： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\sqrt{2}  "
                      style="border:none;"
                >　和　 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\sqrt[n]{3} "
                      style="border:none;"
                ></p>
<h5 id="如何输入省略号"><a href="#如何输入省略号" class="headerlink" title="如何输入省略号"></a>如何输入省略号</h5><blockquote>
<p>数学公式中常见的省略号有两种，\ldots表示与文本底线对齐的省略号，\cdots表示与文本中线对齐的省略号。</p>
</blockquote>
<p>例子：f(x1,x2,\ldots,xn) &#x3D; x1^2 + x2^2 + \cdots + xn^2</p>
<p>显示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=f(x<em>1,x</em>2,\ldots,x<em>n) = x</em>1^2 %2B x<em>2^2 %2B \cdots %2B x</em>n^2"
                      style="border:none;"
                ></p>
<h5 id="如何输入矢量"><a href="#如何输入矢量" class="headerlink" title="如何输入矢量"></a>如何输入矢量</h5><p>例子：\vec{a} \cdot \vec{b}&#x3D;0</p>
<p>显示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\vec{a} \cdot \vec{b}=0"
                      style="border:none;"
                ></p>
<h5 id="如何输入积分"><a href="#如何输入积分" class="headerlink" title="如何输入积分"></a>如何输入积分</h5><p>例子：\int_0^1 x^2 {\rm d}x</p>
<p>显示： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\int_0^1 x^2 {\rm d}x"
                      style="border:none;"
                ></p>
<h5 id="如何输入极限运算"><a href="#如何输入极限运算" class="headerlink" title="如何输入极限运算"></a>如何输入极限运算</h5><p>例子：\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}</p>
<p>显示： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\lim_{n \rightarrow %2B\infty} \frac{1}{n(n%2B1)}"
                      style="border:none;"
                ></p>
<h5 id="如何输入累加、累乘运算"><a href="#如何输入累加、累乘运算" class="headerlink" title="如何输入累加、累乘运算"></a>如何输入累加、累乘运算</h5><p>例子：\sum{i&#x3D;0}^n \frac{1}{i^2}　和　\prod{i&#x3D;0}^n \frac{1}{i^2}</p>
<p>显示： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\sum{i=0}^n \frac{1}{i^2}"
                      style="border:none;"
                > 　和　 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\prod{i=0}^n \frac{1}{i^2}"
                      style="border:none;"
                ></p>
<h5 id="如何输入希腊字母"><a href="#如何输入希腊字母" class="headerlink" title="如何输入希腊字母"></a>如何输入希腊字母</h5><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\alpha</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\alpha"
                      style="border:none;"
                ></td>
<td align="center">\beta</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\beta"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\gamma</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\gamma"
                      style="border:none;"
                ></td>
<td align="center">\delta</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\delta"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\epsilon</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\epsilon"
                      style="border:none;"
                ></td>
<td align="center">\varepsilon</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\varepsilon"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\zeta</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\zeta"
                      style="border:none;"
                ></td>
<td align="center">\eta</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\eta"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\theta</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\theta"
                      style="border:none;"
                ></td>
<td align="center">\vartheta</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\vartheta"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\iota</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\iota"
                      style="border:none;"
                ></td>
<td align="center">\kappa</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\kappa"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\lambda</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\lambda"
                      style="border:none;"
                ></td>
<td align="center">\mu</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\mu"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\nu</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\nu"
                      style="border:none;"
                ></td>
<td align="center">\xi</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\xi"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\pi</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\pi"
                      style="border:none;"
                ></td>
<td align="center">\varpi</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\varpi"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\rho</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\rho"
                      style="border:none;"
                ></td>
<td align="center">\varrho</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\varrho"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\sigma</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\sigma"
                      style="border:none;"
                ></td>
<td align="center">\varsigma</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\varsigma"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\tau</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\tau"
                      style="border:none;"
                ></td>
<td align="center">\upsilon</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\upsilon"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\phi</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\phi"
                      style="border:none;"
                ></td>
<td align="center">\varphi</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\varphi"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\chi</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\chi"
                      style="border:none;"
                ></td>
<td align="center">\psi</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\psi"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\omega</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\omega"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h5 id="如何输入其它特殊字符"><a href="#如何输入其它特殊字符" class="headerlink" title="如何输入其它特殊字符"></a>如何输入其它特殊字符</h5><p>关系运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\pm</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\pm"
                      style="border:none;"
                ></td>
<td align="center">\times</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\times"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\div</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\div"
                      style="border:none;"
                ></td>
<td align="center">\mid</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\mid"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\nmid</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\nmid"
                      style="border:none;"
                ></td>
<td align="center">\cdot</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\cdot"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\circ</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\circ"
                      style="border:none;"
                ></td>
<td align="center">\ast</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\ast"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\bigodot</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigodot"
                      style="border:none;"
                ></td>
<td align="center">\bigotimes</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigotimes"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\bigoplus</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigoplus"
                      style="border:none;"
                ></td>
<td align="center">\leq</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\leq"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\geq</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\geq"
                      style="border:none;"
                ></td>
<td align="center">\neq</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\neq"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\approx</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\approx"
                      style="border:none;"
                ></td>
<td align="center">\equiv</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\equiv"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\sum</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\sum"
                      style="border:none;"
                ></td>
<td align="center">\prod</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\prod"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\coprod</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\coprod"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>集合运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\emptyset</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\emptyset"
                      style="border:none;"
                ></td>
<td align="center">\in</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\in"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\notin</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\notin"
                      style="border:none;"
                ></td>
<td align="center">\subset</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\subset"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\supset</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\supset"
                      style="border:none;"
                ></td>
<td align="center">\subseteq</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\subseteq"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\supseteq</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\supseteq"
                      style="border:none;"
                ></td>
<td align="center">\bigcap</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigcap"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\bigcup</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigcup"
                      style="border:none;"
                ></td>
<td align="center">\bigvee</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigvee"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\bigwedge</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigwedge"
                      style="border:none;"
                ></td>
<td align="center">\biguplus</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\biguplus"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\bigsqcup</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bigsqcup"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>对数运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\log</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\log"
                      style="border:none;"
                ></td>
<td align="center">\lg</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\lg"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\ln</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\ln"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>三角运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\bot</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\bot"
                      style="border:none;"
                ></td>
<td align="center">\angle</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\angle"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">30^\circ</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=30^\circ"
                      style="border:none;"
                ></td>
<td align="center">\sin</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\sin"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\cos</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\cos"
                      style="border:none;"
                ></td>
<td align="center">\tan</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\tan"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\cot</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\cot"
                      style="border:none;"
                ></td>
<td align="center">\sec</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\sec"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\csc</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\csc"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>微积分运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\prime</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\prime"
                      style="border:none;"
                ></td>
<td align="center">\int</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\int"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\iint</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\iint"
                      style="border:none;"
                ></td>
<td align="center">\iiint</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\iiint"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\iiiint</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\iiiint"
                      style="border:none;"
                ></td>
<td align="center">\oint</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\oint"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\lim</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\lim"
                      style="border:none;"
                ></td>
<td align="center">\infty</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\infty"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\nabla</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\nabla"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\because</td>
<td align="center"><strong>未找到</strong></td>
<td align="center">\therefore</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\therefore"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\forall</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\forall"
                      style="border:none;"
                ></td>
<td align="center">\exists</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\exists"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\not&#x3D;</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\not="
                      style="border:none;"
                ></td>
<td align="center">\not&gt;</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\not>"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\not\subset</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\not\subset"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>戴帽符号</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\hat{y}</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\hat{y}"
                      style="border:none;"
                ></td>
<td align="center">\check{y}</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\check{y}"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\breve{y}</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\breve{y}"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>连线符号</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\overline{a+b+c+d}</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\overline{a+b+c+d}"
                      style="border:none;"
                ></td>
<td align="center">\underline{a+b+c+d}</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\underline{a+b+c+d}"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\overbrace{a+\underbrace{b+c}<em>{1.0}+d}^{2.0}</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}"
                      style="border:none;"
                ></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>箭头符号</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">值</th>
<th align="center">符号</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\uparrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\uparrow"
                      style="border:none;"
                ></td>
<td align="center">\downarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\downarrow"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\Uparrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\Uparrow"
                      style="border:none;"
                ></td>
<td align="center">\Downarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\Downarrow"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\rightarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\rightarrow"
                      style="border:none;"
                ></td>
<td align="center">\leftarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\leftarrow"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\Rightarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\Rightarrow"
                      style="border:none;"
                ></td>
<td align="center">\Leftarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\Leftarrow"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\longrightarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\longrightarrow"
                      style="border:none;"
                ></td>
<td align="center">\longleftarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\longleftarrow"
                      style="border:none;"
                ></td>
</tr>
<tr>
<td align="center">\Longrightarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\Longrightarrow"
                      style="border:none;"
                ></td>
<td align="center">\Longleftarrow</td>
<td align="center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl=\Longleftarrow"
                      style="border:none;"
                ></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MarkDown</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 环境变量配置</title>
    <url>/2024/06/24/Maven-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><code>Maven</code>的环境变量配置主要涉及到设置<code>MAVEN_HOME</code>和更新系统的<code>PATH</code>环境变量。以下是在Windows和Linux&#x2F;macOS系统上配置<code>Maven</code>环境变量的步骤：</p>
<h2 id="Windows系统："><a href="#Windows系统：" class="headerlink" title="Windows系统："></a>Windows系统：</h2><ol>
<li>设置<code>MAVEN_HOME</code>：</li>
</ol>
<ul>
<li>找到<code>Maven</code>的安装目录，例如<code>C:\Program Files\apache-maven-3.8.1</code>（具体路径根据你的安装情况而定）。</li>
<li>右键点击“我的电脑”或“此电脑”，选择“属性”，然后点击“高级系统设置”。</li>
<li>在系统属性窗口中，点击“环境变量”按钮。</li>
<li>在系统变量区域，点击“新建”，变量名填写<code>MAVEN_HOME</code>，变量值填写你的<code>Maven</code>安装路径。</li>
</ul>
<ol start="2">
<li>更新<code>PATH</code>环境变量：</li>
</ol>
<ul>
<li>在系统变量区域，找到<code>Path</code>变量，选中它然后点击“编辑”。</li>
<li>在值的末尾添加<code>;%MAVEN_HOME%\bin;</code>（注意前面的分号）。这确保了系统可以在<code>Maven</code>的<code>bin</code>目录中找到执行文件。</li>
<li>点击“确定”保存更改。</li>
</ul>
<p>现在，当你打开命令提示符或PowerShell时，应该能够使用mvn命令来调用Maven。</p>
<h2 id="Linux-macOS系统："><a href="#Linux-macOS系统：" class="headerlink" title="Linux&#x2F;macOS系统："></a>Linux&#x2F;macOS系统：</h2><ol>
<li>编辑<code>bash</code>配置文件（例如<code>.bashrc</code>或<code>.bash_profile</code>）：<br> 打开终端，然后输入以下命令来编辑你的bash配置文件（具体取决于你的系统配置）： <div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc  <span class="comment"># 或者使用你喜欢的文本编辑器，如 vim, emacs 等。</span></span><br></pre></td></tr></table></figure></div></li>
<li>设置<code>MAVEN_HOME</code>：<br> 在打开的文件中，添加或修改以下行： <div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> MAVEN_HOME=/path/to/apache-maven  <span class="comment"># 替换为你的Maven安装路径。</span></span><br></pre></td></tr></table></figure></div></li>
<li>更新<code>PATH</code>环境变量：<br> 在文件的末尾添加以下行： <div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin  <span class="comment"># 这将Maven的bin目录添加到你的PATH中。</span></span><br></pre></td></tr></table></figure></div></li>
<li>保存并关闭文件：在<code>nano</code>中，按<code>Ctrl + X</code>，然后按<code>Y</code>保存更改，最后按<code>Enter</code>退出。</li>
<li>使更改生效：在终端中输入以下命令来使更改立即生效： <div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 或者使用你的配置文件名。</span></span><br></pre></td></tr></table></figure></div>
现在，你应该能够在终端中使用<code>mvn</code>命令来调用<code>Maven</code>了。如果你使用的是其他<code>shell</code>（如<code>zsh</code>），请确保你在正确的配置文件中进行了更改。</li>
</ol>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Env</tag>
        <tag>Maven</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 配置多个远程仓库</title>
    <url>/2024/06/28/Maven-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>配置Maven Settings.xml文件</p>
<h2 id="mirrorOf-将-改为-central"><a href="#mirrorOf-将-改为-central" class="headerlink" title="mirrorOf 将 * 改为 central"></a>mirrorOf 将 * 改为 central</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 原来的 http://repo1.maven.org  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>mavenRepository3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenRepository3<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="调整-profiles-activeProfiles"><a href="#调整-profiles-activeProfiles" class="headerlink" title="调整 profiles activeProfiles"></a>调整 profiles activeProfiles</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>private-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>kaadas<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://private-repository/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!-- &lt;updatePolicy&gt;always&lt;/updatePolicy&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-central<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-central<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>private-repository<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>maven-central<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Env</tag>
        <tag>Maven</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-项目命名</title>
    <url>/2021/04/22/Maven-%E9%A1%B9%E7%9B%AE%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<h1 id="Maven项目命名规范"><a href="#Maven项目命名规范" class="headerlink" title="Maven项目命名规范"></a>Maven项目命名规范</h1><blockquote>
<p><code>groupId</code> will identify your project uniquely across all projects, so we need to enforce a naming schema. It has to follow the package name rules, what means that has to be at least as a domain name you control, and you can create as many subgroups as you want. Look at More information about package names.<br>eg. org.apache.maven, org.apache.commons</p>
<p>A good way to determine the granularity of the groupId is to use the project structure. That is, if the current project is a multiple module project, it should append a new identifier to the parent’s groupId.</p>
<p>eg. org.apache.maven, org.apache.maven.plugins, org.apache.maven.reporting</p>
<p><code>artifactId</code> is the name of the jar without version. If you created it then you can choose whatever name you want with lowercase letters and no strange symbols. If it’s a third party jar you have to take the name of the jar as it’s distributed.<br>eg. maven, commons-math</p>
<p><code>version</code> if you distribute it then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, …). Don’t use dates as they are usually associated with SNAPSHOT (nightly) builds. If it’s a third party artifact, you have to use their version number whatever it is, and as strange as it can look.<br>eg. 2.0, 2.0.1, 1.3.1</p>
<p>（<a class="link"   href="https://maven.apache.org/guides/mini/guide-naming-conventions.html%EF%BC%89" >https://maven.apache.org/guides/mini/guide-naming-conventions.html） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="groupId"><a href="#groupId" class="headerlink" title="groupId"></a>groupId</h2><p>groupId定义当前Maven项目隶属的实际项目，例如org.sonatype.nexus，此id前半部分org.sonatype代表此项目隶属的组织或公司，后部分代表项目的名称，如果此项目多模块话开发的话就子模块可以分为org.sonatype.nexus.plugins和org.sonatype.nexus.utils等。特别注意的是groupId不应该对应项目隶属的组织或公司，也就是说groupId不能只有org.sonatype而没有nexus。</p>
<p> 例如：我建立一个项目，此项目是此后所有项目的一个总的平台，那么groupId应该是org.limingming.projectName,projectName是平台的名称，org.limingming是代表我个人的组织，如果以我所在的浪潮集团来说的话就应该是com.inspur.loushang。</p>
<h2 id="artifactId"><a href="#artifactId" class="headerlink" title="artifactId"></a>artifactId</h2><p>artifactId是构件ID，该元素定义实际项目中的一个Maven项目或者是子模块，如上面官方约定中所说，构建名称必须小写字母，没有其他的特殊字符，推荐使用“实际项目名称－模块名称”的方式定义，例如：spirng-mvn、spring-core等。</p>
<p>推荐格式：使用实际项目名称作为artifactId的前缀，紧接着为模块名称</p>
<p>例如：<strong>spirng-mvn-2.0.0.jar</strong><br>nexus-indexer、spring-mvc、hibernate-c3po……这些id都是以实际项目名称作为前缀，然后接着一个中划线，再紧跟项目的模块名称，默认情况下maven会在artifactId添加version作为最后生成的名称。</p>
]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IoC 控制反转</title>
    <url>/2024/06/21/Spring-IoC-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="Spring-IoC-控制反转"><a href="#Spring-IoC-控制反转" class="headerlink" title="Spring IoC 控制反转"></a>Spring IoC 控制反转</h1><h2 id="控制反转（IoC）"><a href="#控制反转（IoC）" class="headerlink" title="控制反转（IoC）"></a>控制反转（IoC）</h2><blockquote>
<p>在传统的 Java 应用中，一个类想要调用另一个类中的属性或方法，通常会先在其代码中通过 new Object() 的方式将后者的对象创建出来，然后才能实现属性或方法的调用。为了方便理解和描述，我们可以将前者称为“调用者”，将后者称为“被调用者”。也就是说，调用者掌握着被调用者对象创建的控制权。</p>
</blockquote>
<p>但在 Spring 应用中，Java 对象创建的控制权是掌握在 IoC 容器手里的，其大致步骤如下。</p>
<ol>
<li>开发人员通过 XML 配置文件、注解、Java 配置类等方式，对 Java 对象进行定义，例如在 XML 配置文件中使用 <bean> 标签、在 Java 类上使用 @Component 注解等。</li>
<li>Spring 启动时，IoC 容器会自动根据对象定义，将这些对象创建并管理起来。这些被 IoC 容器创建并管理的对象被称为 Spring Bean。</li>
<li>当我们想要使用某个 Bean 时，可以直接从 IoC 容器中获取（例如通过 ApplicationContext 的 getBean() 方法），而不需要手动通过代码（例如 new Obejct() 的方式）创建。</li>
</ol>
<p>IoC 带来的最大改变不是代码层面的，而是从思想层面上发生了“主从换位”的改变。原本调用者是主动的一方，它想要使用什么资源就会主动出击，自己创建；但在 Spring 应用中，IoC 容器掌握着主动权，调用者则变成了被动的一方，被动的等待 IoC 容器创建它所需要的对象（Bean）。</p>
<p>这个过程在职责层面发生了控制权的反转，把原本调用者通过代码实现的对象的创建，反转给 IoC 容器来帮忙实现，因此我们将这个过程称为 Spring 的“控制反转”。</p>
<h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p>在了解了 IoC 之后，我们还需要了解另外一个非常重要的概念：依赖注入。</p>
<p>依赖注入（Denpendency Injection，简写为 DI）是 Martin Fowler 在 2004 年在对“控制反转”进行解释时提出的。Martin Fowler 认为“控制反转”一词很晦涩，无法让人很直接的理解“到底是哪里反转了”，因此他建议使用“依赖注入”来代替“控制反转”。</p>
<p>在面向对象中，对象和对象之间是存在一种叫做“依赖”的关系。简单来说，依赖关系就是在一个对象中需要用到另外一个对象，即对象中存在一个属性，该属性是另外一个类的对象。</p>
<p>例如，有一个名为 B 的 Java 类，它的代码如下。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从代码可以看出，B 中存在一个 A 类型的对象属性 a，此时我们就可以说 B 的对象依赖于对象 a。而依赖注入就是就是基于这种“依赖关系”而产生的。</p>
<p>我们知道，控制反转核心思想就是由 Spring 负责对象的创建。在对象创建过程中，Spring 会自动根据依赖关系，将它依赖的对象注入到当前对象中，这就是所谓的“依赖注入”。</p>
<p>依赖注入本质上是 Spring Bean 属性注入的一种，只不过这个属性是一个对象属性而已。</p>
<h2 id="IoC-的工作原理"><a href="#IoC-的工作原理" class="headerlink" title="IoC 的工作原理"></a>IoC 的工作原理</h2><p>在 Java 软件开发过程中，系统中的各个对象之间、各个模块之间、软件系统和硬件系统之间，或多或少都存在一定的耦合关系。</p>
<p>若一个系统的耦合度过高，那么就会造成难以维护的问题，但完全没有耦合的代码几乎无法完成任何工作，这是由于几乎所有的功能都需要代码之间相互协作、相互依赖才能完成。因此我们在程序设计时，所秉承的思想一般都是在不影响系统功能的前提下，最大限度的降低耦合度。</p>
<p>IoC 底层通过工厂模式、Java 的反射机制、XML 解析等技术，将代码的耦合度降低到最低限度，其主要步骤如下。</p>
<ol>
<li>在配置文件（例如 Bean.xml）中，对各个对象以及它们之间的依赖关系进行配置；</li>
<li>我们可以把 IoC 容器当做一个工厂，这个工厂的产品就是 Spring Bean；</li>
<li>容器启动时会加载并解析这些配置文件，得到对象的基本信息以及它们之间的依赖关系；</li>
<li>IoC 利用 Java 的反射机制，根据类名生成相应的对象（即 Spring Bean），并根据依赖关系将这个对象注入到依赖它的对象中。</li>
</ol>
<p>由于对象的基本信息、对象之间的依赖关系都是在配置文件中定义的，并没有在代码中紧密耦合，因此即使对象发生改变，我们也只需要在配置文件中进行修改即可，而无须对 Java 代码进行修改，这就是 Spring IoC 实现解耦的原理。</p>
<h2 id="IoC-容器的两种实现"><a href="#IoC-容器的两种实现" class="headerlink" title="IoC 容器的两种实现"></a>IoC 容器的两种实现</h2><p>IoC 思想基于 IoC 容器实现的，IoC 容器底层其实就是一个 Bean 工厂。Spring 框架为我们提供了两种不同类型 IoC 容器，它们分别是 BeanFactory 和 ApplicationContext。</p>
<h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>BeanFactory 是 IoC 容器的基本实现，也是 Spring 提供的最简单的 IoC 容器，它提供了 IoC 容器最基本的功能，由 org.springframework.beans.factory.BeanFactory 接口定义。</p>
<p>BeanFactory 采用懒加载（lazy-load）机制，容器在加载配置文件时并不会立刻创建 Java 对象，只有程序中获取（使用）这个对对象时才会创建。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;helloWorld&quot;</span>, HelloWorld.class);</span><br><span class="line">    obj.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ApplicationContext 是 BeanFactory 接口的子接口，是对 BeanFactory 的扩展。ApplicationContext 在 BeanFactory 的基础上增加了许多企业级的功能，例如 AOP（面向切面编程）、国际化、事务支持等。</p>
<p>ApplicationContext 接口有两个常用的实现类，具体如下表。</p>
<table>
<thead>
<tr>
<th align="center">实现类</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ClassPathXmlApplicationContext</td>
<td align="center">加载类路径 ClassPath 下指定的 XML 配置文件，并完成 ApplicationContext 的实例化工作</td>
<td align="center">ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(String configLocation);</td>
</tr>
<tr>
<td align="center">FileSystemXmlApplicationContext</td>
<td align="center">加载指定的文件系统路径中指定的 XML 配置文件，并完成 ApplicationContext 的实例化工作</td>
<td align="center">ApplicationContext applicationContext &#x3D; new FileSystemXmlApplicationContext(String configLocation);</td>
</tr>
</tbody></table>
<blockquote>
<p>在上表的示例代码中，参数 configLocation 用于指定 Spring 配置文件的名称和位置，如 Beans.xml。</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//使用 FileSystemXmlApplicationContext 加载指定路径下的配置文件 Bean.xml</span></span><br><span class="line">    <span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\eclipe workspace\\spring workspace\\HelloSpring\\src\\Beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;helloWorld&quot;</span>, HelloWorld.class);</span><br><span class="line">    obj.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 异步注解 @Async</title>
    <url>/2024/06/23/Spring-%E5%BC%82%E6%AD%A5%E6%B3%A8%E8%A7%A3-Async/</url>
    <content><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>在 Java 中，当我们需要执行异步操作时，往往会去创建一个新线程去执行，如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：异步任务&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Spring 3.0 之 后提供了一个 <code>@Async</code>注解，使用 <code>@Async</code> 注解进行优雅的异步调用。<br>其实，<code>@Async</code>注解本质上还是通过线程池创建线程去异步执行任务</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="开启-Async"><a href="#开启-Async" class="headerlink" title="开启 @Async"></a>开启 <code>@Async</code></h3><p>使用 <code>@Async</code> 注解步骤：</p>
<ol>
<li>添加 <code>@EnableAsync</code> 注解。在主类上或者 某个类上，否则，异步方法不会生效</li>
<li>添加 <code>@Async</code> 注解。在异步方法上添加此注解。异步方法不能被 <code>static</code> 修饰</li>
<li>需要自定义线程池，则可以配置线程池（下文有）</li>
</ol>
<h3 id="使用-Async"><a href="#使用-Async" class="headerlink" title="使用@Async"></a>使用<code>@Async</code></h3><p><code>@Async</code>注解可以应用于任何Spring Bean（通常是Service层的方法）的方法声明上，指示该方法应该在一个单独的线程中异步执行：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这个方法将在一个独立的线程中执行</span></span><br><span class="line">        <span class="comment">// 执行耗时的操作，如数据库查询、网络请求等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>❗ 注意，被<code>@Async</code>标注的方法必须是void类型的，且不能有返回值，除非返回类型是Future，这样可以通过Future获取异步操作的结果。</p>
</blockquote>
<h3 id="Async方法的异常处理"><a href="#Async方法的异常处理" class="headerlink" title="@Async方法的异常处理"></a><code>@Async</code>方法的异常处理</h3><p>由于异步方法是在后台线程中执行的，因此抛出的异常不会立即中断主线程的执行。为了捕获和处理这些异常，可以利用<code>@Async</code>注解所在方法所在的类上的<code>@AsyncExceptionHandler</code>方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 可能抛出异常的异步代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AsyncExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAsyncException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理异步方法中抛出的异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>综上所述，Spring的<code>@Async</code>注解极大地简化了异步编程模型，使得开发者能够方便地实现异步任务调度，提高系统并发处理能力和用户体验。同时，合理配置线程池并妥善处理异步任务中可能出现的异常，也是保障系统稳定性和健壮性的重要环节。</p>
<h2 id="自定义-Async-注解的线程池"><a href="#自定义-Async-注解的线程池" class="headerlink" title="自定义@Async 注解的线程池"></a>自定义<code>@Async</code> 注解的线程池</h2><h3 id="方法-1-使用AsyncConfigurer指定线程池"><a href="#方法-1-使用AsyncConfigurer指定线程池" class="headerlink" title="方法 1 使用AsyncConfigurer指定线程池"></a>方法 1 使用<code>AsyncConfigurer</code>指定线程池</h3><p><code>AsyncConfigurer</code>接口是Spring框架用于全局配置异步执行器（即线程池）的核心接口。当我们的Spring应用需要统一管理所有异步任务的执行环境时，可以选择实现此接口。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@EnableAsync</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalAsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>); <span class="comment">// 核心线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>); <span class="comment">// 最大线程数</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">20</span>); <span class="comment">// 队列容量</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;global-&quot;</span>); <span class="comment">// 线程名称前缀</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在此示例中，<code>GlobalAsyncConfig</code>类实现了<code>AsyncConfigurer</code>接口，并在<code>getAsyncExecutor()</code>方法中配置了一个全局的线程池。这意味着，对于应用中所有标记为<code>@Async</code>的方法，默认都会使用这个配置好的线程池执行异步任务。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeGlobalTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 此方法将使用GlobalAsyncConfig中配置的线程池执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="方法-2-指定使用自定义的线程池-Excutor-实例-Bean"><a href="#方法-2-指定使用自定义的线程池-Excutor-实例-Bean" class="headerlink" title="方法 2 指定使用自定义的线程池 Excutor 实例 Bean"></a>方法 2 指定使用自定义的线程池 <code>Excutor</code> 实例 Bean</h3><p>在Spring容器中注册一个线程池Bean，这种方式允许你根据业务需求更加灵活地管理和分配不同的线程池资源。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomThreadPoolConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;customExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">customExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">3</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">5</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;custom-&quot;</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>现在，我们可以明确地将特定的线程池Bean与某个异步方法关联起来：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Async(&quot;customExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCustomTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 此方法将使用CustomThreadPoolConfig中名为customExecutor的线程池执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过在<code>@Async</code>注解中指定<code>customExecutor</code>，系统将优先使用这个名字注册在Spring容器中的线程池，而不是全局配置的线程池。</p>
<h3 id="Spring-的默认线程池配置"><a href="#Spring-的默认线程池配置" class="headerlink" title="Spring 的默认线程池配置"></a>Spring 的默认线程池配置</h3><ol>
<li>注意早期版本的Spring Boot环境中，如果用户没有自定义配置异步执行器（Async Executor），并且没有实现<code>AsyncConfigurer</code>接口来提供一个自定义的执行器，那么Spring Boot会使用一个默认的异步执行器，而在某些早期版本或特定配置下，这个默认执行器可能是<code>SimpleAsyncTaskExecutor</code>，这是个不重用线程、无界并发的执行器。每个提交的任务创建一个新的线程来执行。这意味着每次调用都会创建新的线程资源，而不从固定大小的线程池中获取可用线程。</li>
<li>在后期版本中，如果没有 <code>Executor</code> 的实例 Spring Boot将会使用其默认配置的线程池（名称为 taskExecutor）来执行被<code>@Async</code>注解修饰的异步方法。</li>
<li>在Spring Boot如果不存在 Excutor Bean 会通过<code>TaskExecutionAutoConfiguration</code>，它会自动配置一个基于<code>ThreadPoolTaskExecutor</code>的默认线程池，取名为<code>applicationTaskExecutor</code> 和 <code>taskExecutor</code> 进行自动配置。如果已经自定义了Executor bean 那么<code>applicationTaskExecutor</code>将不会自动配置。</li>
<li>这个默认线程池的相关配置通常基于Spring Boot的默认属性这些属性可以根据应用的具体需求，在<code>application.properties</code>或<code>application.yml</code>文件中进行调整。例如：<br>  a. <code>spring.task.execution.pool.core-size</code>：核心线程数，默认值可能依赖于具体版本，一般较小。<br>  b. <code>spring.task.execution.pool.max-size</code>：最大线程数，默认值也可能因版本不同而变化。<br>  c. <code>spring.task.execution.pool.queue-capacity</code>：线程池的工作队列容量。<br>  d. <code>spring.task.execution.pool.keep-alive</code>：空闲线程的存活时间。</li>
</ol>
<h2 id="失效场景"><a href="#失效场景" class="headerlink" title="失效场景"></a>失效场景</h2><blockquote>
<p>💡 <code>@Async</code>注解基于 Spring AOP 动态代理实现</p>
</blockquote>
<h3 id="调用者与被调用者在同一个类中"><a href="#调用者与被调用者在同一个类中" class="headerlink" title="调用者与被调用者在同一个类中"></a>调用者与被调用者在同一个类中</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>当调用 <code>@Async</code>注解 的方法的类和被调用的方法在同一个类中时，<code>@Async</code> 注解不会生效。因为 Spring 的 AOP 代理是基于接口的，对于同一个类中的方法调用，不会经过代理，因此 <code>@Async</code> 注解不会被处理。例如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟耗时操作  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Async method executed.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callAsyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        asyncMethod(); <span class="comment">// 直接调用，不会异步执行  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>确保异步方法和调用它的方法不在同一个类中。可以将异步方法提取到一个单独的 Service 中，并在需要的地方注入这个 Service。</li>
<li>确保异步方法的执行类（即包含 <code>@Async</code> 注解方法的类）被 Spring 容器管理，比如通过 <code>@Service</code>、<code>@Component</code> 等注解标注</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一定使用@Service、@Component 等注解标注，确保执行类被Spring管理，</span></span><br><span class="line"><span class="comment">// 因为异步线程是通过动态代理实现的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟耗时操作  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Async method executed.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="配置类未启用异步支持"><a href="#配置类未启用异步支持" class="headerlink" title="配置类未启用异步支持"></a>配置类未启用异步支持</h3><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>如果配置类中没有启用异步支持，即没有使用 <code>@EnableAsync</code> 注解，那么 <code>@Async</code> 注解同样不会生效。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有使用 @EnableAsync 注解，因此不会启用异步支持  </span></span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> &#123;  </span><br><span class="line">    <span class="comment">// ... 其他配置 ...  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟耗时操作  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Async method executed.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>在配置类上使用 <code>@EnableAsync</code> 注解，启用异步支持。<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> &#123;  </span><br><span class="line">    <span class="comment">// ... 其他配置 ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="方法不是-public-的"><a href="#方法不是-public-的" class="headerlink" title="方法不是 public 的"></a>方法不是 public 的</h3><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p><code>@Async</code> 注解的方法必须是 <code>public</code> 的，否则不会被 Spring AOP 代理捕获，导致异步执行不生效。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 但这个方法不是 public 的，所以 @Async 不会生效  </span></span><br><span class="line">    <span class="meta">@Async</span> </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟耗时操作  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Async method executed.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callAsyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        asyncMethod(); <span class="comment">// 直接调用，但由于 asyncMethod 不是 public 的，因此不会异步执行  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>● 确保异步方法是 <code>public</code> 的</p>
<h3 id="线程池未正确配置"><a href="#线程池未正确配置" class="headerlink" title="线程池未正确配置"></a>线程池未正确配置</h3><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><p>在使用 <code>@Async</code> 注解时，如果没有正确配置线程池，可能会遇到异步任务没有按预期执行的情况。例如，线程池被配置为只有一个线程，且该线程一直被占用，那么新的异步任务就无法执行。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@EnableAsync</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个只有一个线程的线程池，这会导致并发问题  </span></span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();  </span><br><span class="line">        executor.setCorePoolSize(<span class="number">1</span>);  </span><br><span class="line">        executor.setMaxPoolSize(<span class="number">1</span>);  </span><br><span class="line">        executor.setQueueCapacity(<span class="number">10</span>);  </span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;Async-&quot;</span>);  </span><br><span class="line">        executor.initialize();  </span><br><span class="line">        <span class="keyword">return</span> executor;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ... 其他配置 ...  </span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟耗时操作  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Async method executed.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><p>● 正确配置线程池：确保线程池配置合理，能够处理预期的并发任务量</p>
<h3 id="异常处理不当"><a href="#异常处理不当" class="headerlink" title="异常处理不当"></a>异常处理不当</h3><h4 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h4><p>如果在异步方法中抛出了异常，并且没有妥善处理，那么这个异常可能会导致任务失败，而调用者可能无法感知到异常的发生。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟一个可能会抛出异常的耗时操作  </span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Async method exception&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用者  </span></span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallerService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> MyService myService;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callAsyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        myService.asyncMethod(); <span class="comment">// 调用异步方法，但如果该方法抛出异常，调用者不会立即感知到  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h4><p>● 合理处理异常：在异步方法中妥善处理异常，可以通过 <code>Future</code> 对象来捕获异步任务执行过程中抛出的异常。</p>
<h3 id="Spring代理未生效"><a href="#Spring代理未生效" class="headerlink" title="Spring代理未生效"></a>Spring代理未生效</h3><h4 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h4><p>如果通过 <code>new</code> 关键字直接创建了服务类的实例，而不是通过 Spring 容器来获取，那么 Spring 的 AOP 代理将不会生效，导致 <code>@Async</code> 注解无效。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟耗时操作  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Async method executed.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeNonSpringClass</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接通过 new 创建 MyService 实例，不会经过 Spring 代理  </span></span><br><span class="line">        <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>(); </span><br><span class="line">        myService.asyncMethod(); <span class="comment">// 这里 `@Async` 不会生效  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h4><p>● 合理利用依赖注入：始终通过 Spring 容器来获取服务类的实例，而不是直接通过 <code>new</code> 关键字创建</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟耗时操作  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Async method executed.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeNonSpringClass</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> MyService myService;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;   </span><br><span class="line">        myService.asyncMethod(); <span class="comment">// 这里 `@Async` 会生效  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用-Transactional-与-Async-同时注解方法，导致事务失效"><a href="#使用-Transactional-与-Async-同时注解方法，导致事务失效" class="headerlink" title="使用 @Transactional 与 @Async 同时注解方法，导致事务失效"></a>使用 <code>@Transactional</code> 与 <code>@Async</code> 同时注解方法，导致事务失效</h3><h4 id="问题-6"><a href="#问题-6" class="headerlink" title="问题"></a>问题</h4><p>在同一个方法上同时使用 <code>@Transactional</code> 和 <code>@Async</code> 注解可能会导致问题。由于 <code>@Async</code> 会导致方法在一个新的线程中执行，而 <code>@Transactional</code> 通常需要在一个由 Spring 管理的事务代理中执行，这两个注解的结合使用可能会导致事务管理失效或行为不可预测。此种场景不会导致<code>@Async</code>注解失效，但是会导致<code>@Transactional</code>注解失效，也就是事务失效。例如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> MyRepository myRepository;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 错误的用法：同时使用了 @Transactional 和 `@Async`  </span></span><br><span class="line">    <span class="meta">@Transactional</span>  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncTransactionalMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 模拟一个数据库操作  </span></span><br><span class="line">        myRepository.save(<span class="keyword">new</span> <span class="title class_">MyEntity</span>());  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 模拟可能抛出异常的代码  </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Database operation failed!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;MyEntity, Long&gt; &#123;  </span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEntity</span> &#123;  </span><br><span class="line">    <span class="comment">// ... 实体类的属性和映射 ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面的代码，在抛出异常的时候，我们期望的是回滚前面的数据库保存操作，但是因为事务失效，会导致错误数据成功保存进数据库。</p>
<h4 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h4><p>● 正确配置事务，比如单独提取事务执行的逻辑到一个新的Service里，事务执行方法单独使用<code>@Transactional</code>标识</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> MyTransactionalService myTransactionalService;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AsyncExecutor asyncExecutor;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callAsyncTransactionalMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 在事务中执行数据库操作  </span></span><br><span class="line">        <span class="type">MyEntity</span> <span class="variable">entity</span> <span class="operator">=</span> myTransactionalService.transactionalMethod();  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 异步执行其他操作  </span></span><br><span class="line">        asyncExecutor.execute(() -&gt; &#123;  </span><br><span class="line">            <span class="comment">// 这里执行不需要事务管理的异步操作  </span></span><br><span class="line">            <span class="comment">// ...  </span></span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransactionalService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> MyRepository myRepository;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Transactional</span>  </span><br><span class="line">    <span class="keyword">public</span> MyEntity <span class="title function_">transactionalMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 在事务中执行数据库操作  </span></span><br><span class="line">        <span class="keyword">return</span> myRepository.save(<span class="keyword">new</span> <span class="title class_">MyEntity</span>());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncExecutor</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Async</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span> &#123;  </span><br><span class="line">        task.run();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 状态机</title>
    <url>/2024/06/21/Spring-%E7%8A%B6%E6%80%81%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="Spring-状态机"><a href="#Spring-状态机" class="headerlink" title="Spring 状态机"></a>Spring 状态机</h1><h2 id="什么是状态机"><a href="#什么是状态机" class="headerlink" title="什么是状态机"></a>什么是状态机</h2><blockquote>
<p>先来解释什么是”状态”（ State ）。现实事物是有不同状态的，例如一个自动门，就有 open 和 closed 两种状态。我们通常所说的状态机是有限状态机，也就是被描述的事物的状态的数量是有限个，例如自动门的状态就是两个 open 和 closed 。</p>
</blockquote>
<p>状态机，也就是 State Machine ，不是指一台实际机器，而是指一个数学模型。<br>说白了，一般就是指一张状态转换图。例如，根据自动门的运行规则，我们可以抽象出下面这么一个图。<br>自动门有两个状态，open 和 closed ，closed 状态下，如果读取开门信号，那么状态就会切换为 open 。<br>open 状态下如果读取关门信号，状态就会切换为 closed 。<br>状态机的全称是有限状态自动机，自动两个字也是包含重要含义的。<br>给定一个状态机，同时给定它的当前状态以及输入，那么输出状态时可以明确的运算出来的。例如对于自动门，给定初始状态 closed ，给定输入”开门”，那么下一个状态时可以运算出来的。<br>重复一下：状态机是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型。</p>
<h2 id="四大概念"><a href="#四大概念" class="headerlink" title="四大概念"></a>四大概念</h2><ul>
<li>状态 : 一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。</li>
<li>事件 : 事件就是执行某个操作的触发条件或者口令。对于自动门，”按下开门按钮”就是一个事件。</li>
<li>动作 : 事件发生以后要执行动作。例如事件是”按开门按钮”，动作是”开门”。编程的时候，一个 Action一般就对应一个函数。</li>
<li>转变 : 也就是从一个状态变化为另一个状态。例如”开门过程”就是一个变换。</li>
</ul>
<p>有限状态机（Finite-state machine,FSM），又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。<br>FSM是一种算法思想，简单而言，有限状态机由一组状态、一个初始状态、输入和根据输入及现有状态转换为下一个状态的转换函数组成。<br>其作用主要是描述对象在它的生命周期内所经历的状态序列，以及如何响应来自外界的各种事件。</p>
<p>①现态：是指当前所处的状态。待支付<br>②条件：又称为”事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。支付事件<br>③动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。状态转换为待发货<br>④次态：条件满足后要迁往的新状态。”次态”是相对于”现态”而言的，”次态”一旦被激活，就转变成新的”现态”了。待发货 注意事项</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/PNYpCWw_7HIDevMLv4-QxA" >Spring状态机 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>TOTP 动态口令</title>
    <url>/2024/06/27/TOTP-%E5%8A%A8%E6%80%81%E5%8F%A3%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="OTP-HOTP-TOTP"><a href="#OTP-HOTP-TOTP" class="headerlink" title="OTP&#x2F;HOTP&#x2F;TOTP"></a>OTP&#x2F;HOTP&#x2F;TOTP</h2><h3 id="OTP-One-time-Password"><a href="#OTP-One-time-Password" class="headerlink" title="OTP (One-time Password)"></a>OTP (One-time Password)</h3><p>OTP 是一次性密码，又称动态密码或单次有效密码，是指计算机系统或其他数字设备上只能使用一次的密码，有效期为只有一次登录会话或交易。</p>
<h3 id="HOTP-HMAC-based-One-time-Password"><a href="#HOTP-HMAC-based-One-time-Password" class="headerlink" title="HOTP (HMAC-based One-time Password)"></a>HOTP (HMAC-based One-time Password)</h3><p>HOTP 是一种基于散列消息验证码(HMAC)的一次性密码算法。</p>
<h3 id="TOTP-Time-based-One-Time-Password"><a href="#TOTP-Time-based-One-Time-Password" class="headerlink" title="TOTP (Time-based One-Time Password)"></a>TOTP (Time-based One-Time Password)</h3><p>TOTP 是一种根据预共享的密钥与当前时间计算一次性密码的算法。它已被互联网工程任务组接纳为RFC 6238标准，成为主动开放认证(OATH)的基石，并被用于众多多重要素验证系统当中。</p>
<p>TOTP基于HOTP实现，它结合一个私钥与当前时间戳，使用一个密码散列函数来生成一次性密码。由于网络延迟与时钟不同步可能导致密码接收者不得不尝试多次遇到正确的时间来进行身份验证，时间戳通常以30秒为间隔，从而避免反复尝试。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a class="link"   href="https://medium.com/@rakesh.open.source/time-based-one-time-password-totp-java-implementation-82a472bd6bf9" >Time-Based One-Time Password (TOTP) — Java Implementation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/641587128" >基于 TOTP 实现多重身份(Multi-factor)认证 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://stytch.com/blog/what-is-totp/" >What is TOTP and why does it matter? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://allthingsauth.com/2018/04/20/a-medium-dive-on-the-totp-spec/" >A medium dive on the Time-based One-time Passwords (TOTP) spec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.twilio.com/docs/glossary/totp" >What is a Time-based One-time Password (TOTP)? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>密码</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Version 版本</title>
    <url>/2024/06/22/Version-%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h1><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/version.png"
                      alt="version"
                ><figcaption>version</figcaption></figure></p>
<blockquote>
<p>语义化版本 : 版本格式 -&gt; 主版本号.次版本号.修订号</p>
</blockquote>
<ul>
<li>主版本号：当你做了不兼容的API 修改。</li>
<li>次版本号：当你做了向下兼容的功能性新增。</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
</ul>
<blockquote>
<p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p>
</blockquote>
<p>在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。<br>作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共API。这可以透过文件定义或代码强制要求来实现。无论如何，这套API 的清楚明了是十分重要的。一旦你定义了公共API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。<br>这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p>
<h2 id="语义化版本控制规范-SemVer"><a href="#语义化版本控制规范-SemVer" class="headerlink" title="语义化版本控制规范(SemVer)"></a>语义化版本控制规范(SemVer)</h2><p>以下关键词MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）</p>
<ol>
<li>使用语义化版本控制的软件“必须MUST”定义公共API。该API可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</li>
<li>标准的版本号“必须MUST”采用XYZ的格式， 其中X、Y和Z为非负的整数，且“禁止MUST NOT”在数字前方补零。X是主版本号、Y是次版本号、而Z为修订号。每个元素“必须MUST”以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</li>
<li>标记版本号的软件发行后，“禁止MUST NOT”改变该版本软件的内容。任何修改都“必须MUST”以新版本发行。</li>
<li>主版本号为零（0.yz）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共API 不应该被视为稳定版。</li>
<li>1.0.0 的版本号用于界定公共API 的形成。这一版本之后所有的版本号更新都基于公共API 及其修改内容。</li>
<li>修订号Z（xyZ | x &gt; 0）“必须MUST”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</li>
<li>次版本号Y（xYz | x &gt; 0）“必须MUST”在有向下兼容的新功能出现时递增。在任何公共API的功能被标记为弃用时也“必须MUST”递增。也“可以MAY”在内部程序有大量新功能或改进被加入时递增，其中“可以MAY”包括修订级别的改变。每当次版本号递增时，修订号“必须MUST”归零。</li>
<li>主版本号X（Xyz | X &gt; 0）“必须MUST”在有任何不兼容的修改被加入公共API时递增。其中“可以MAY”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须MUST”归零。</li>
<li>先行版本号“可以MAY”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须MUST”由ASCII码的英数字和连接号[0-9A-Za-z-]组成，且“禁止MUST NOT”留白。数字型的标识符号“禁止MUST NOT”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、 1.0.0-0.3.7、1.0.0-x.7.z.92。</li>
<li>版本编译信息“可以MAY”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须MUST”由ASCII的英数字和连接号[0-9A-Za-z-]组成，且“禁止MUST NOT”留白。当判断版本的优先层级时，版本编译信息“可SHOULD”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、 1.0.0-beta+exp.sha.5114f85。</li>
<li>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须MUST”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须MUST”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以ASCII的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏 位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。</li>
</ol>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Version</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/02/09/hello-world/</url>
    <content><![CDATA[<blockquote>
<p>Hello World </p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>webp 转换工具 cwebp</title>
    <url>/2024/07/01/webp-%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7-cwebp/</url>
    <content><![CDATA[<blockquote>
<p>webp是Google推出的一种新式图片格式、相比于常用的jpg、png和gif格式，最大的优势就是同等质量下压缩率更高、图片文件更小、利于节约存储空间和网络带宽。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a class="link"   href="https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html" >cwebp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>下载完成后解压至某个路径下,然后将其中的<code>bin</code>目录路径添加至环境变量<code>path</code>下即可</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">cwebp -version</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">1.4.0</span><br><span class="line">libsharpyuv: 0.4.0</span><br></pre></td></tr></table></figure></div>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">cwebp input.png -o output.webp</span><br></pre></td></tr></table></figure></div>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">680K -rw-r--r-- 1 Windows 197121 677K  7月  1 09:52  maven.png</span><br><span class="line"> 36K -rw-r--r-- 1 Windows 197121  34K  7月  1 10:21  maven.webp</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
        <category>Tools</category>
        <category>Image</category>
      </categories>
      <tags>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>不用很麻烦很累的CodeReview入门</title>
    <url>/2024/06/22/%E4%B8%8D%E7%94%A8%E5%BE%88%E9%BA%BB%E7%83%A6%E5%BE%88%E7%B4%AF%E7%9A%84CodeReview%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/code/code1.png"
                     
                ></p>
<blockquote>
<p>注：本文仅关注 Code Review 的实行，不讨论 “为什么要 Code Review” 或 “Code Review 是否有价值” 这类话题。</p>
</blockquote>
<p>通过 Code Review 来保证项目代码质量、提高团队的技术水平，已经是很多公司的常规操作，大多数人也已经认可了进行 Code Review 的必要性。然而，现实是这样的：</p>
<p>”伴随着号召和口号，大家热情高涨，一顿操作花式输出，目指用洞察世界的双眼来拯救这个腐朽的Repo，而待多巴胺褪去，热情难以为继，全都恢复成了没有感情的 Coder，三天打鱼两天晒网，再到最后完全流于形式，直至热情再一次被唤醒……“</p>
<p>陷入循环中，我们不禁要呐喊：</p>
<h2 id="“为什么Code-Review这么麻烦这么累”"><a href="#“为什么Code-Review这么麻烦这么累”" class="headerlink" title="“为什么Code Review这么麻烦这么累”"></a>“为什么Code Review这么麻烦这么累”</h2><h3 id="1-错的不是我，是这个PR"><a href="#1-错的不是我，是这个PR" class="headerlink" title="1. 错的不是我，是这个PR"></a>1. 错的不是我，是这个PR</h3><p>Code Review 会让人觉得麻烦、代码看起来很累，很多情况下确实是因为这个 PR 并不易于 Review，本身存在一些问题：</p>
<ul>
<li>PR 太大：动辄几千行代码、几十个文件修改，打开一看就怕了怕了，没有做好心理建设、没有两三个小时的空闲时间谁敢 Review，告辞告辞；</li>
<li>PR 要做事的太多：东边儿全局修改了变量名，西边儿重构了公用方法，南边儿调整了页面样式，北边儿还顺便修了一个陈年老 bug……嚯，好家伙，一个迭代的需求一个 PR 就提上来了，也就 Author 勉强在当天还能搞清楚哪段是哪段，Reviewer 一路看下来就得怀疑人生；</li>
<li>PR 没有上下文：“为什么要删除这段代码？为什么要加这么多分支逻辑？这么多类似的方法真的是必须的吗？这种场景没有判断，是遗漏了还是业务需求？”你是否有很多问号？？？总会有很多问题，在缺乏上下文时，是很难给出解答的，不写任何 Description，想要让 Reviewer 自己主动去搞清楚业务背景实在是不厚道，所以也别怪没人肯 Review 了；</li>
<li>PR 代码质量太差：不遵守既定规范、格式乱七八糟、命名天马行空、逻辑晦涩难懂，整篇代码毫无“可读性”可言，对于这种 PR，Review 两眼是情分，直接Request Change才是本分。</li>
</ul>
<h3 id="2-即使我有错，也是有原因的"><a href="#2-即使我有错，也是有原因的" class="headerlink" title="2. 即使我有错，也是有原因的"></a>2. 即使我有错，也是有原因的</h3><p>如果，PR 确实不存在问题，代码整洁、逻辑清晰，Description 安排地明明白白，却还是没能得到回应，那的确应该是 Reviewer 的问题，不过为他们考虑考虑，可能也是有原因的：</p>
<ul>
<li>工作量过于饱和：再简洁明了的 PR，Review 起来还是需要时间的，忙得已经没有喝水的时间，哪还有工夫去做 Code Review；</li>
<li>道不同不相为谋：你有你的原则，我有我的风格，既然谁也说服不了谁，那就这样吧；</li>
<li>技术领域不同：“我说另请高明吧，我实在也不是谦虚，我一个后端开发怎么就点进前端PR了呢？”；</li>
<li>看不出问题：虽然说起来有点尴尬，但确实是一个很普遍的情况，没有掌握方法、相关技术储备不足、Review 角度不同等等，一篇 PR 读下来，似乎觉得哪里不对，又似乎也有道理，Comment 憋不出来、Approve 又不放心，那就跳过跳过，等其他大牛出手吧。</li>
</ul>
<p>那么，有这么多严峻的问题存在，你看，我们还有机会吗？</p>
<p>问得好！还记得文章的标题吗：</p>
<h2 id="“我们不用很麻烦很累就可以-Code-Review”"><a href="#“我们不用很麻烦很累就可以-Code-Review”" class="headerlink" title="“我们不用很麻烦很累就可以 Code Review”"></a>“我们不用很麻烦很累就可以 Code Review”</h2><h3 id="1-作为-Author"><a href="#1-作为-Author" class="headerlink" title="1. 作为 Author"></a>1. 作为 Author</h3><ul>
<li>PR 尽可能小<ul>
<li>创建 Draft PR：便于获得早期反馈，避免在代码成型后出现大规模的修改返工</li>
<li>PR 只关注一件事：降低阅读 PR 时的认知成本、更易于确定合理的 Assignee、Rollback 的可行性更高、开发更具计划性</li>
<li>严格执行 Rebase：避免引入不必要的修改或造成 Review 的返工</li>
</ul>
</li>
<li>添加关键的上下文<ul>
<li>不可缺少的 Description（必要时可尝试使用Github PR template辅助规范化），可以主要关注以下几点：<ul>
<li>这段代码改动的目的是？（通常情况下提供需求 Ticket 标题及链接即可）</li>
<li>能预料可能会提出的问题，请提前说明（如存在多种近似解决方案，选择当前方案的原因）</li>
<li>（若存在）特定逻辑需要特定 Reviewer 关注，请提前说明</li>
<li>（若存在）批量修改，请提前说明</li>
<li>（若存在）UI 修改，请提供屏幕截图或可查看到实际效果的链接</li>
</ul>
</li>
<li>易于理解的 Commit Message，严厉抵制 ”fix bug“ 这种偷懒 message</li>
<li>代码中添加必要的注释</li>
</ul>
</li>
<li>Assign给正确的人<ul>
<li>Assign组内成员</li>
<li>期望能给出反馈的人:<ul>
<li>擅长&#x2F;熟识该业务领域的人；</li>
<li>擅长&#x2F;熟识该技术领域的人；</li>
</ul>
</li>
<li>期望能知晓该 PR 的人：<ul>
<li>会受到该代码改动影响的人；</li>
<li>近期正在学习该业务&#x2F;技术领域的人；</li>
</ul>
</li>
</ul>
</li>
<li>收到Comment及时跟进<ul>
<li>修改后及时回复 comment 或 refresh assignee，不要指望其他人能一直蹲守你的更新或修改</li>
<li>出现意见分歧，避免过度依赖 Comment 交流，线下沟通优先，其次是 IM</li>
<li>若因时间或计划问题无法在当前 PR 中完成修改，达成一致后创建 Tech Debt Ticket 备忘</li>
<li>尽可能避免在已经Approve的PR上进行无关修改，以免给Reviewer造成不必要的重复工作</li>
</ul>
</li>
</ul>
<p>一句话总结：对自己提出的每一个 PR 负责</p>
<h3 id="2-作为Reviewer"><a href="#2-作为Reviewer" class="headerlink" title="2. 作为Reviewer"></a>2. 作为Reviewer</h3><ul>
<li>主动阅读 Description<ul>
<li>作为普通 Reviewer，有必要了解 PR 的上下文</li>
<li>作为业务&#x2F;技术领域相关者，有必要了解代码及逻辑变更情况</li>
</ul>
</li>
<li>得当的 Comment<ul>
<li>表述简洁清晰无歧义</li>
<li>通常应具有目的性：明确知道自己想要的回复是哪一种，是希望 Author 改正问题？补充上下文？解答疑惑？或是说明计划？目的不明的 Comment 只会造成不必要的反复沟通</li>
<li>不仅可以指出问题，同样可以请教问题</li>
<li>给出肯定或表扬的 Comment</li>
<li>无需过于正式：Comment 的数量并不会用于反映工作量，因而任何形式不会对双方工作造成影响的 Comment 都是可行且值得鼓励的</li>
</ul>
</li>
<li>Comment 后及时跟进<ul>
<li>及时回复 Author 的追问</li>
<li>Author 修改后及时 Resolve 或 Approve</li>
</ul>
</li>
<li>及时给出反馈<ul>
<li>根据实际情况，给出 Approve，Comment 或 Request Change</li>
<li>谨慎给出 Approve：Review 代码后，若有足够把握，可以给出 Approve；若存在疑虑（不了解相关业务、底层逻辑），也应给出 Comment 表明 Review 完成，不应让 Author 无止尽的空等</li>
</ul>
</li>
<li>不要成为 Blocker<ul>
<li>仅有的 Repo Code Owner、点名指定的 Reviewer（业务&#x2F;技术领域相关者），必须要给出反馈</li>
<li>Request Change 的 Reviewer，必须要即使跟进</li>
</ul>
</li>
</ul>
<p>一句话总结：对自己给出的每一个 Comment 和 Approve 负责</p>
<h3 id="3-参与者应有的共识"><a href="#3-参与者应有的共识" class="headerlink" title="3. 参与者应有的共识"></a>3. 参与者应有的共识</h3><ul>
<li>Code Review 的主要目的不应是为了发现 Bug，也不应是为了检查代码风格和规范</li>
<li>Code Review 是沟通的一种形式，作用是相互的</li>
<li>Code Review 时不要吝啬你的赞美之词</li>
<li>Code Review 时不可固执己见</li>
<li>Code Review 时应正面且友善</li>
</ul>
<p>最后，</p>
<h2 id="还有几句要说："><a href="#还有几句要说：" class="headerlink" title="还有几句要说："></a>还有几句要说：</h2><p>看到这儿大家应该都能感觉到，Author 要做的事情和 Reviewer 要做的事情基本都是相辅相成，两边缺一不可，说到底，推动 Code Review 需要整个 Team 甚至公司一起努力，但需要努力，并不意味着“不用很麻烦很累”是 Fake News，只要 Code Review 成为公司的一种文化、一种习惯，所有的一切都会变得理所当然，且有趣。</p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>CodeReview</tag>
        <tag>代码质量</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2017/04/03/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<blockquote>
<p>为什么会存在十六进制并且广泛使用？</p>
</blockquote>
<p>我的理解是十进制描述的是纯数值型，十六进制是标称型+数值型，标称型用于处理状态机。人有十个手指，这可能是十进制最早起源的原因，但是无法表示状态。我们如何记录正负，甚至是虚数、复数。如果不加入额外标识无法表示吧，那机器呢，他可是只能运算二进制信号，所以最合适的描述载体有两个必要条件：</p>
<ol>
<li>二的直系等比倍数；</li>
<li>大于十并且越小越好。</li>
</ol>
<p>那么十六是最合适的选择。</p>
<hr>
<blockquote>
<p>计算机通信的基本原理是将电信号转换为逻辑信号，其转换方式是将高低电频表示为二进制数中的1和0, 再通过不同的二进制序列来表示所有的信息。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">含义</th>
<th align="center">Pascal语言</th>
<th align="center">C语言</th>
<th align="center">Java</th>
<th align="center">Scala</th>
<th align="center">Python</th>
</tr>
</thead>
<tbody><tr>
<td align="center">按位与</td>
<td align="center">a and b</td>
<td align="center">a &amp; b</td>
<td align="center">a &amp; b</td>
<td align="center">a &amp; b</td>
<td align="center">a &amp; b</td>
</tr>
<tr>
<td align="center">按位或</td>
<td align="center">a or b</td>
<td align="center">a &brvbar; b</td>
<td align="center">a &brvbar; b</td>
<td align="center">a &brvbar; b</td>
<td align="center">a &brvbar; b</td>
</tr>
<tr>
<td align="center">按位异或</td>
<td align="center">a xor b</td>
<td align="center">a ^ b</td>
<td align="center">a ^ b</td>
<td align="center">a ^ b</td>
<td align="center">a ^ b</td>
</tr>
<tr>
<td align="center">按位取反</td>
<td align="center">not a</td>
<td align="center">~a</td>
<td align="center">~a</td>
<td align="center">~a</td>
<td align="center">~a</td>
</tr>
<tr>
<td align="center">左移</td>
<td align="center">a shl b</td>
<td align="center">a &lt;&lt; b</td>
<td align="center">a &lt;&lt; b</td>
<td align="center">a &lt;&lt; b</td>
<td align="center">a &lt;&lt; b</td>
</tr>
<tr>
<td align="center">带符号右移</td>
<td align="center">a shr b</td>
<td align="center">a &gt;&gt; b</td>
<td align="center">a &gt;&gt; b</td>
<td align="center">a &gt;&gt; b</td>
<td align="center">a &gt;&gt; b</td>
</tr>
<tr>
<td align="center">无符号右移</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">a &gt;&gt;&gt; b</td>
<td align="center">a &gt;&gt;&gt; b</td>
<td align="center">a &gt;&gt;&gt; b</td>
</tr>
</tbody></table>
<h1 id="BIN-OCT-HEX-DEC"><a href="#BIN-OCT-HEX-DEC" class="headerlink" title="BIN_OCT_HEX_DEC"></a>BIN_OCT_HEX_DEC</h1><ul>
<li><p>BIN : binary 二进制</p>
</li>
<li><p>OCT : octal 八进制</p>
</li>
<li><p>DEC : decimal 十进制</p>
</li>
<li><p>HEX : hexadecimal 十六进制</p>
<p>  位运算基于二进制</p>
</li>
</ul>
<h1 id="与-and运算"><a href="#与-and运算" class="headerlink" title="与 and运算 &amp;"></a>与 and运算 &amp;</h1><blockquote>
<p>同位同为1结果为1</p>
</blockquote>
<h3 id="5-3"><a href="#5-3" class="headerlink" title="5 &amp; 3"></a>5 &amp; 3</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">5</td>
<td align="center">0101</td>
</tr>
<tr>
<td align="center">数二</td>
<td align="center">3</td>
<td align="center">0011</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">1</td>
<td align="center">0001</td>
</tr>
</tbody></table>
<h3 id="4-1"><a href="#4-1" class="headerlink" title="4 &amp; 1"></a>4 &amp; 1</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">4</td>
<td align="center">0100</td>
</tr>
<tr>
<td align="center">数二</td>
<td align="center">1</td>
<td align="center">0001</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">0</td>
<td align="center">0000</td>
</tr>
</tbody></table>
<h1 id="或-or运算"><a href="#或-or运算" class="headerlink" title="或 or运算 |"></a>或 or运算 |</h1><blockquote>
<p>同位存在1结果为1</p>
</blockquote>
<h3 id="5-3-1"><a href="#5-3-1" class="headerlink" title="5 | 3"></a>5 | 3</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">5</td>
<td align="center">0101</td>
</tr>
<tr>
<td align="center">数二</td>
<td align="center">3</td>
<td align="center">0011</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">7</td>
<td align="center">0111</td>
</tr>
</tbody></table>
<h3 id="10-5"><a href="#10-5" class="headerlink" title="10 | 5"></a>10 | 5</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">2</td>
<td align="center">0010</td>
</tr>
<tr>
<td align="center">数二</td>
<td align="center">5</td>
<td align="center">0101</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">7</td>
<td align="center">0111</td>
</tr>
</tbody></table>
<h1 id="异或-xor运算"><a href="#异或-xor运算" class="headerlink" title="异或 xor运算 ^"></a>异或 xor运算 ^</h1><blockquote>
<p>同位不同结果为1</p>
</blockquote>
<h3 id="5-3-2"><a href="#5-3-2" class="headerlink" title="5 ^ 3"></a>5 ^ 3</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">5</td>
<td align="center">0101</td>
</tr>
<tr>
<td align="center">数二</td>
<td align="center">3</td>
<td align="center">0011</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">6</td>
<td align="center">0110</td>
</tr>
</tbody></table>
<h3 id="10-5-1"><a href="#10-5-1" class="headerlink" title="10 ^ 5"></a>10 ^ 5</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">2</td>
<td align="center">0010</td>
</tr>
<tr>
<td align="center">数二</td>
<td align="center">5</td>
<td align="center">0101</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">7</td>
<td align="center">0111</td>
</tr>
</tbody></table>
<h3 id="10-10"><a href="#10-10" class="headerlink" title="10 ^ 10"></a>10 ^ 10</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">7</td>
<td align="center">0111</td>
</tr>
<tr>
<td align="center">数二</td>
<td align="center">7</td>
<td align="center">0111</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">0</td>
<td align="center">0000</td>
</tr>
</tbody></table>
<h1 id="非-not运算"><a href="#非-not运算" class="headerlink" title="非 not运算 ~"></a>非 not运算 ~</h1><blockquote>
<p>按位取反</p>
</blockquote>
<h3 id="5"><a href="#5" class="headerlink" title="~ 5"></a>~ 5</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">5</td>
<td align="center">0101</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">-6</td>
<td align="center">1010</td>
</tr>
</tbody></table>
<h1 id="左移位-shl运算"><a href="#左移位-shl运算" class="headerlink" title="左移位 shl运算 &lt;&lt;"></a>左移位 shl运算 &lt;&lt;</h1><blockquote>
<p>左移2n位后，低位补0</p>
</blockquote>
<h3 id="5-2"><a href="#5-2" class="headerlink" title="5 &lt;&lt; 2"></a>5 &lt;&lt; 2</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">5</td>
<td align="center">0000 0101</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">10</td>
<td align="center">0000 1010</td>
</tr>
</tbody></table>
<h1 id="右移位-shr运算"><a href="#右移位-shr运算" class="headerlink" title="右移位 shr运算 &gt;&gt;"></a>右移位 shr运算 &gt;&gt;</h1><blockquote>
<p>右移2n位，高位补0</p>
</blockquote>
<h3 id="4-2"><a href="#4-2" class="headerlink" title="4 &gt;&gt; 2"></a>4 &gt;&gt; 2</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">4</td>
<td align="center">0000 0100</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">2</td>
<td align="center">0000 0010</td>
</tr>
</tbody></table>
<blockquote>
<p>易失去精度，无法恢复</p>
</blockquote>
<h3 id="5-2-1"><a href="#5-2-1" class="headerlink" title="5 &gt;&gt; 2"></a>5 &gt;&gt; 2</h3><table>
<thead>
<tr>
<th align="center">标识</th>
<th align="center">DEC</th>
<th align="center">BIN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数一</td>
<td align="center">5</td>
<td align="center">0000 0101</td>
</tr>
<tr>
<td align="center">结果</td>
<td align="center">2</td>
<td align="center">0000 0010</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Think</tag>
      </tags>
  </entry>
  <entry>
    <title>剑道 基础</title>
    <url>/2024/07/02/%E5%89%91%E9%81%93-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="Kamae-构"><a href="#Kamae-构" class="headerlink" title="Kamae 构"></a>Kamae 构</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/kamae.png"
                      alt="Kamae"
                ><figcaption>Kamae</figcaption></figure></p>
<h2 id="Hakama-袴"><a href="#Hakama-袴" class="headerlink" title="Hakama 袴"></a>Hakama 袴</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/hakama.jpg"
                      alt="Hakama"
                ><figcaption>Hakama</figcaption></figure></p>
<h2 id="Katana-竹剑"><a href="#Katana-竹剑" class="headerlink" title="Katana 竹剑"></a>Katana 竹剑</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/katana.jpg"
                      alt="Katana"
                ><figcaption>Katana</figcaption></figure></p>
<h2 id="间合"><a href="#间合" class="headerlink" title="间合"></a>间合</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/distance.jpg"
                      alt="Distance"
                ><figcaption>Distance</figcaption></figure></p>
]]></content>
      <categories>
        <category>Kendo 剑道</category>
      </categories>
      <tags>
        <tag>剑道</tag>
      </tags>
  </entry>
  <entry>
    <title>剑道 轨迹</title>
    <url>/2024/07/02/%E5%89%91%E9%81%93-%E8%BD%A8%E8%BF%B9/</url>
    <content><![CDATA[<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/kendo_2.jpg"
                      alt="Kendo"
                ><figcaption>Kendo</figcaption></figure></p>
<h2 id="Locus-轨迹"><a href="#Locus-轨迹" class="headerlink" title="Locus 轨迹"></a>Locus 轨迹</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/locus.jpg"
                      alt="Locus"
                ><figcaption>Locus</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/locus_2.jpg"
                      alt="Locus2"
                ><figcaption>Locus2</figcaption></figure></p>
<h2 id="Men-面的打击"><a href="#Men-面的打击" class="headerlink" title="Men 面的打击"></a>Men 面的打击</h2><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/locus_3.jpg"
                      alt="Men"
                ><figcaption>Men</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/men_new_old.jpg"
                      alt="Men2"
                ><figcaption>Men2</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/kendo/men_order.jpg"
                      alt="Men3"
                ><figcaption>Men3</figcaption></figure></p>
]]></content>
      <categories>
        <category>Kendo 剑道</category>
      </categories>
      <tags>
        <tag>剑道</tag>
      </tags>
  </entry>
  <entry>
    <title>只做正确的事情，并持续输出价值</title>
    <url>/2017/02/24/%E5%8F%AA%E5%81%9A%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BA%8B%E6%83%85%EF%BC%8C%E5%B9%B6%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA%E4%BB%B7%E5%80%BC/</url>
    <content><![CDATA[<blockquote>
<p>转载<br><a class="link"   href="http://www.nowamagic.net/librarys/veda/detail/2673" >http://www.nowamagic.net/librarys/veda/detail/2673 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 只做正确的事情，并持续输出价值</p>
</blockquote>
<p>最近经常有网友问，博客为啥更新得这么慢。这一段时间几乎都在忙一些琐事，但是任何忙都是借口，其实都是因为懒。顺便做个广告，现在博客很少更新技术类文章了，技术文章大部分都以专题的形式更新在 现代魔法学院 里。有任何意见都欢迎给我提一下～博客现在主要是发表一些自己的思考。</p>
<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>一个朋友昨天跟我聊天，说离职了，准备加入一个手游创业团队，薪酬挺高的，比之前的工作要高两倍有多。我当时敷衍过去了，但是心里却有别的想法。</p>
<p>我老婆是个重度“游戏是电子海洛因”观点坚持者，或多或少也影响了我的一些看法。我也玩游戏，但是是偶尔玩玩，玩多了绝对会被骂，之前就发过这么一条微博：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_24_01.png"
                     
                ></p>
<p>前几年多玩的一个朋友内推我，后来因为老婆（那会是女朋友）的脸色，没去成，那时多玩还没上市。她说，好端端地，不要去做游戏毒害别人。我也玩游戏，我对游戏不存在偏见，也不抗拒，正是因为我也玩游戏，我深切地体会到，游戏无法给我们的人生带来多少积极的影响。我们用有限的生命时间去博无限的游戏时间，是很不值得的一件事。</p>
<p>比如现在我也有在玩“炉石传说”，周末有空也偶尔上YY、斗鱼看看直播，发现一些热门主播竟然有几万人同时在看。据说荷尔蒙经济效应很明显，一些热门的妹子主播每个月大概有几万的直播收入，甚至更高，因为每天晚上都有几万屌丝同时在线看直播。还有些人花几千上万元购买卡包，托炉石传说的福，网易上个季度的收入创了新高。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_02_24_02.jpg"
                     
                ></p>
<p>这不是一个好的现象。屌丝们虽然会因为游戏而快乐，但到头来时间、精力还有金钱都被游戏消耗太多，以至于一事难成。大部分人是缺乏远见的，一个常见的例子就是，现在给你100块，和明年给你500块，二选一，绝大部分人会选择前者。贪图眼前的小利而看不到未来是人类的本能。比如贪图一时游戏的快乐，而忘了有更重要的事去做。而互联网，则是人类欲望的集合点。互联网经济大部分都是建立在人类的欲望之上的：</p>
<ul>
<li>我要看视频，于是有一大堆视频网站。</li>
<li>我要打游戏，于是一大堆网游。</li>
<li>我要购物，于是有一大堆电商。</li>
<li>……<br>可以说，任何互联网产品都是为了满足人类的欲望（需求）而产生的。</li>
</ul>
<h3 id="互联网有毒"><a href="#互联网有毒" class="headerlink" title="互联网有毒"></a>互联网有毒</h3><p>我们必须要注意这么一点，<strong>互联网对大部分人来说是有毒的</strong>。</p>
<p>为什么这么说呢？首先，你要知道，什么东西对你最重要，那就是时间和注意力，这两样东西是你有所成就的两个必要条件。</p>
<p>比如你看微博，关注那些八卦碎片信息，无形中你的时间、注意力还有意志力就会被消耗，看完了你也没多少精力去干活了。比如你看视频，网上的一些连续剧，同样消耗你的时间和注意力，并且还会影响你的大脑，让你去回味故事情节，占用你的大脑。游戏更不用说了，沉迷游戏基本等于荒废，这个我是有经验的。</p>
<p>文艺作品（书籍影视等）是可以改变大脑的。比如你看了一篇鸿篇巨著，有可能会影响你的一生。但是一档连续剧，可能看了没一个月你连人物都忘记了。所以优秀的文艺作品可以流芳百世，影响无数人，而快餐影视仅仅是快餐而已，甚至传播一些错误的价值观，快餐毕竟对身体不怎么好。插个小段子，我中学的时候特别喜欢《棋魂》这部动画，我那时傻傻地要像主人公全部时间花在围棋上一样把全部时间花在功课上（所谓的追求神之一身、最好的一手），其结果是，每次大考我必然是全年级第一，那会可是传说一般的存在。优秀的动漫作品对我影响真的很大很大。直到现在我也还是很喜欢棋魂，可能十年后，它还会影响着我。</p>
<p>不恰当地使用互联网，你的时间、注意力就会被投入到一个无底洞，从而让你无法发现你需要去做的那些正确的事，或者发现了又没有足够的时间与精力投入，其结果就是一事难成。</p>
<p>也就是说：</p>
<pre><code>* 如果你想在编程有很深的造诣，那么最好把游戏卸载了，不要关注那些游戏直播，也不要关注那些游戏信息，你要做的是每晚每晚都去练习编程，去Github拿一些优秀的开源项目代码回来琢磨，理解各编程大师的想法；
* 如果你想在数学有所建树，那么就不要老是刷微博、看SNS Feed流，留意那些可有可无的八卦信息，你要做的是每晚每晚努力去专研数学，体验思考的乐趣与想通问题带来的满足感与成就感；
* 如果你想钢琴弹得很好，那么就不要老是玩手机，各种娱乐应用，也不要因为想放松而去看连续剧，你要做的是每晚每晚努力去练习钢琴，因为你想把琴练得很好，那么你心里最好只有琴。
* ……
</code></pre>
<p>大家都知道，一件事情，进入状态很难。而出状态，则可能是分分秒秒的事。我们的技艺，只有在沉醉状态中才能有效提高。也许有哪个高人可以边玩LOL边写代码，但我觉得，这种人应该不多吧。</p>
<p>而站在互联网产品提供这边，我们要做的，并不是要去做那些哗众取宠的的东西，比如什么“天天酷跑天天爱消除天天爱干嘛”，什么“美拍闪拍各种拍”，而是要专注于给用户提供价值的东西，正确的东西，比如百度前首席架构师林仕鼎从百度离职，做了“云校”，试图通过互联网和大数据，“再一次，定义教育”。我觉得，这是一件很正确、很有意义的事。同样的，网易公开课也是一个很不错的东西。</p>
<p>那么什么才是正确的事呢？这个就是我一直坚持的“普世价值观”，那些放在大部分情况都是对别人有价值的事情。比如最近我看到的“防蓝光镜片”这事，佩戴之后可以减少电子设备蓝光激发对眼睛的伤害，我觉得就是一件很正确、很有意义的事情。不要小看来自电脑手机屏幕的蓝光辐射，这个问题会越来越严重。防蓝光镜片可以缓解这个问题，那么这就是一件很有意义的事，正确的事，因为这事对别人有价值。假若这个镜片的制作发起人沉迷LOL小学生联盟，那么这个好东西就会出现得比较晚。</p>
<p>我老婆是个重度“腾讯系”用户，每天都看微信朋友圈，逛QQ空间，挂QQ然后看QQ群…… 我都说她好多次，让她注意别浪费太多时间在这些无聊的Feed上面了。她朋友圈、QQ空间无非就是一些哪个同事结婚了，哪个同学去哪玩了，哪个朋友在秀美食什么的，也看不懂她为什么如此乐此不疲。反正我觉得，腾讯的那些所谓社交产品，消耗了她很多时间和注意力。</p>
<p>而我则很少用腾讯的东西，甚至QQ都很少用，相对地，我则是“Google系”或者“阿里系”用户。阿里巴巴的产品我用得很多，比如我的网站就是放在阿里云的，网站收入虽然少但毕竟也有，而且也能对外持续输出我的价值。我的一些闲钱也放在余额宝里，收益至少比银行高，对我也是有价值的，支付宝转账到各行都是免费，这非常方便。我装修的电器、门、油漆什么的都是在聚划算买的，也帮我省钱了。所以，我认为阿里巴巴是一家让人尊敬的公司，因为它坚持做正确的事，对用户有价值的事。Google也是一家让人尊敬的公司，他做的很多产品都对用户很有价值，而且大部分是免费的。腾讯虽然口号是成为“最受尊敬的互联网企业”，但是从他的大半收入是靠游戏和社交来看，我觉得有点背道而驰。</p>
<p>一件事情，如果不适用于普世价值，再怎么美化也没用。你可以说游戏有多少好处，但是你却无法否认，他消耗了多少生命，让多少人事业踌躇不前。</p>
<p>根基建立在普世价值之上的公司可以长久，马云说，阿里巴巴要活102年，如果阿里巴巴坚持他的价值观，我觉得没问题。而一些游戏公司，很可能就会因为一款游戏的热情消退而落幕，比如第九城市。一家日本的和服店可以经营450年，你敢信？原因很简单，坚持做正确的事情，并持续输出价值。</p>
<p>我们不需要开创多么伟大的事业，只要找到你正确的事情，坚持就可以了，哪怕是一间和服店。</p>
<p>回到前面说的那个要去做手游的朋友，确实，手游是下一个引爆点，必定能够赚不少钱。但是，你做的游戏越成功，就有越多人把时间消耗在你的游戏中，你的利益来自于损害用户的利益，但如果你不介意，也没事，这样的人多了去了。前段时间在贴吧看到一个高三学生发了一个帖子，说炉石毁了他，让他分数很低，找不到学校读书什么的。嘛，沉迷游戏耽误人的事也不是很罕见了。</p>
<p>所以，假如你想做点事情，首先考虑的是，它能不能对别人产生价值，而不是能不能赚钱。如果只考虑赚钱，到头来很可能赚不到钱。而一切围绕着对用户产生价值，并且持续每天不断地输出价值，一切都会纷至沓来。</p>
]]></content>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>开源协议比较</title>
    <url>/2017/02/22/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h1 id="五种开源协议的比较-BSD，Apache，GPL，LGPL，MIT"><a href="#五种开源协议的比较-BSD，Apache，GPL，LGPL，MIT" class="headerlink" title="五种开源协议的比较(BSD，Apache，GPL，LGPL，MIT)"></a>五种开源协议的比较(BSD，Apache，GPL，LGPL，MIT)</h1><h3 id="什么是软件许可协议？"><a href="#什么是软件许可协议？" class="headerlink" title="什么是软件许可协议？"></a>什么是软件许可协议？</h3><pre><code>通俗来讲，许可协议是指用来授权其他人具有某种使用你的作品的权利。
</code></pre>
<p>依靠许可协议将你的作品对外开源或者对你的作品的各个方面逐一进行授权，是一个不错的方法(WordPress, Drupal 和许多其它的内容管理系统都是开源软件)。一旦对外开源，你将失去所有对你的作品的版权，别人也没有义务将你标注为作品的原创者或捐献者。</p>
<p>开源许可协议 使人们免去了研究那些专业的许可条款的麻烦，使人们更方便的对开源项目贡献出自己的代码。而且它还能保护你作为作品的原创作者，确保你至少拥有由于贡献参与而带来的署名荣誉。它还能用来阻止其他人企图声明对你的作品拥有所有权的行为。</p>
<p>但是很多的软件作者和设计者都对各种不同的开源许可协议的内容和含义不甚了了。当你选择了某种开源许可协议时，你都放弃了哪些权力？在没有能明白各种开源协议的确切含义前，在不知道它们最适用于什么情况下时，软件开发者不可能在关于哪个许可协议最适合自己的软件的问题上做出准确的抉择。</p>
<h3 id="BSD开源协议-original-BSD-license、FreeBSD-license、Original-BSD-license"><a href="#BSD开源协议-original-BSD-license、FreeBSD-license、Original-BSD-license" class="headerlink" title="BSD开源协议(original BSD license、FreeBSD license、Original BSD license)"></a>BSD开源协议(original BSD license、FreeBSD license、Original BSD license)</h3><blockquote>
<p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”，可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>
</blockquote>
<blockquote>
<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p>
</blockquote>
<blockquote>
<p>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。如果再发布的只是二进制类库&#x2F;软件，则需要在类库&#x2F;软件的文档和版权声明中包含原来代码中的BSD协议。</p>
</blockquote>
<blockquote>
<p>不可以用开源代码的作者&#x2F;机构名字和原来产品的名字做市场推广。</p>
</blockquote>
<blockquote>
<p>BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p>
</blockquote>
<h3 id="Apache-Licence-2-0-Apache-License，-Version-2-0、Apache-License，-Version-1-1、Apache-License，-Version-1-0"><a href="#Apache-Licence-2-0-Apache-License，-Version-2-0、Apache-License，-Version-1-1、Apache-License，-Version-1-0" class="headerlink" title="Apache Licence 2.0(Apache License， Version 2.0、Apache License， Version 1.1、Apache License， Version 1.0)"></a>Apache Licence 2.0(Apache License， Version 2.0、Apache License， Version 1.1、Apache License， Version 1.0)</h3><blockquote>
<p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布(作为开源或商业软件)。需要满足的条件也和BSD类似：</p>
</blockquote>
<blockquote>
<p>需要给代码的用户一份Apache Licence，如果你修改了代码，需要在被修改的文件中说明。<br>在延伸的代码中(修改和有源代码衍生的代码中)需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</p>
</blockquote>
<blockquote>
<p>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</p>
</blockquote>
<blockquote>
<p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布&#x2F;销售。</p>
</blockquote>
<h3 id="GPL-GNU-General-Public-License"><a href="#GPL-GNU-General-Public-License" class="headerlink" title="GPL(GNU General Public License)"></a>GPL(GNU General Public License)</h3><blockquote>
<p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD，Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源&#x2F;免费使用和引用&#x2F;修改&#x2F;衍生代码的开源&#x2F;免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软<br>件了。</p>
</blockquote>
<blockquote>
<p>GPL协议的主要内容是只要在一个软件中使用(”使用”指类库引用，修改后的代码或者衍生代码)GPL协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>
</blockquote>
<blockquote>
<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成&#x2F;采用作为类库和二次开发的基础。</p>
</blockquote>
<blockquote>
<p>其它细节如再发布的时候需要伴随GPL协议等和BSD&#x2F;Apache等类似。</p>
</blockquote>
<h3 id="LGPL-GNU-Lesser-General-Public-License"><a href="#LGPL-GNU-Lesser-General-Public-License" class="headerlink" title="LGPL(GNU Lesser General Public License)"></a>LGPL(GNU Lesser General Public License)</h3><blockquote>
<p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用&#x2F;修改&#x2F;衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用<br>并发布和销售。</p>
</blockquote>
<blockquote>
<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>
</blockquote>
<blockquote>
<p>GPL&#x2F;LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p>
</blockquote>
<h3 id="MIT-MIT"><a href="#MIT-MIT" class="headerlink" title="MIT(MIT)"></a>MIT(MIT)</h3><blockquote>
<p>MIT是和BSD一样宽范的许可协议，作者只想保留版权，而无任何其他了限制.也就是说，你必须在你的发行版里包含原许可协议的声明，无论你是以二进制发布的还是以源代码发布的。</p>
</blockquote>
<h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/LICENES.png"
                      alt="LICENES"
                ><figcaption>LICENES</figcaption></figure></p>
]]></content>
      <tags>
        <tag>LICENES</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影 三要素</title>
    <url>/2024/07/02/%E6%91%84%E5%BD%B1-%E4%B8%89%E8%A6%81%E7%B4%A0/</url>
    <content><![CDATA[<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/spiekbriefje-diafragma-sluitertijd-iso.webp"
                      alt="tips"
                ><figcaption>tips</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/base_5.png"
                      alt="tips"
                ><figcaption>tips</figcaption></figure></p>
<h2 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h2><blockquote>
<p>是照相机镜头中控制光线进入镜头量的装置。它通常设置在镜头的前部，通过控制光圈的大小和孔径，可以控制镜头的进光量以及景深效果。</p>
</blockquote>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/lens-size.webp"
                      alt="lens"
                ><figcaption>lens</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/lens-size2.webp"
                      alt="lens"
                ><figcaption>lens</figcaption></figure></p>
<p>在摄影中，光圈的大小是影响照片曝光的关键因素之一。如果光圈开得过大，照片可能会过度曝光，失去细节和颜色；如果光圈开得过小，照片可能会欠曝光，显得暗淡无光。因此，合理调整光圈大小是非常重要的。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/aperture.jpg"
                      alt="aperture"
                ><figcaption>aperture</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/aperture_1.jpg"
                      alt="aperture"
                ><figcaption>aperture</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/aperture_2.jpg"
                      alt="aperture"
                ><figcaption>aperture</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/aperture_3.jpg"
                      alt="aperture"
                ><figcaption>aperture</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/aperture_4.jpg"
                      alt="aperture"
                ><figcaption>aperture</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/aperture_5.webp"
                      alt="aperture"
                ><figcaption>aperture</figcaption></figure></p>
<p>除了控制曝光，光圈的大小还会影响景深效果。一般来说，光圈越大，景深越浅，即清晰范围越小；而光圈越小，景深则越深，即清晰范围越大。这种景深效果在拍摄人像、风景等需要突出主题、虚化背景的场景中非常有用。</p>
<p>此外，光圈的大小也会影响照片的画质。一般来说，光圈越大，画面的清晰度可能会降低，出现所谓的“散光”现象；而光圈越小，画面的清晰度则越高。因此，在拍摄高质量的照片时，需要根据实际情况选择合适的光圈大小。</p>
<p>总之，光圈是照相机中一个非常重要的装置，它不仅控制着光线的进入量，还影响着照片的曝光、景深效果和画质。通过合理调整光圈大小，摄影师可以创作出各种不同效果的照片。</p>
<h2 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h2><blockquote>
<p>快门快门是相机中控制曝光时间的重要部件，它的作用是控制相机曝光的时间长短。在拍摄时，我们需要根据不同的光线条件和拍摄需求来选择合适的快门速度。</p>
</blockquote>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/shutter-speed-2.jpg"
                      alt="shutter-speed"
                ><figcaption>shutter-speed</figcaption></figure></p>
<p>首先，让我们来了解一下快门的种类。常见的快门类型有机械快门和电子快门两种。机械快门是通过机械方式控制快门速度，而电子快门则是通过电子方式控制快门速度。两种快门都可以实现快速、准确的曝光控制，但在使用上略有不同。</p>
<p>其次，在拍摄时，我们需要根据不同的拍摄需求来选择合适的快门速度。例如，在拍摄运动场景时，我们需要使用较快的快门速度来捕捉运动员的动作和表情；而在拍摄风景时，我们需要使用较慢的快门速度来捕捉自然光线的变化和细节。此外，在拍摄夜景时，我们也需要使用较慢的快门速度来捕捉城市的灯光和天上的星星。</p>
<p>最后，在使用快门时，我们需要注意以下几点。首先，要保持相机的稳定和平衡，避免因为手抖或者姿势不当而导致照片模糊。其次，要根据不同的光线条件和拍摄需求来选择合适的快门速度，避免因为曝光不足或者过度而导致照片质量下降。最后，要学会灵活运用快门速度的变化来控制照片的曝光效果和氛围。</p>
<p>总之，快门是相机中控制曝光时间的重要部件，它的作用是控制相机曝光的时间长短。在拍摄时，我们需要根据不同的光线条件和拍摄需求来选择合适的快门速度，并注意相机的稳定和平衡以及灵活运用快门速度的变化来控制照片的曝光效果和氛围。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/speed.jpg"
                      alt="shutter-speed"
                ><figcaption>shutter-speed</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/speed_1.jpg"
                      alt="shutter-speed"
                ><figcaption>shutter-speed</figcaption></figure></p>
<h2 id="感光度"><a href="#感光度" class="headerlink" title="感光度"></a>感光度</h2><blockquote>
<p>感光度感光度是指相机传感器对光线的敏感程度。在摄影中，感光度是一个非常重要的参数，因为它决定了照片的曝光程度和画质。一般来说，感光度越高，传感器对光线的敏感度就越高，照片的曝光就越好，但同时也会带来一些负面影响，比如噪点增多和画质下降。</p>
</blockquote>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/iso_5.webp"
                      alt="iso"
                ><figcaption>iso</figcaption></figure></p>
<p>在拍摄照片时，摄影师需要根据拍摄环境的光线和拍摄需求来选择合适的感光度。如果拍摄环境的光线比较暗，那么就需要使用高感光度来保证照片的曝光程度；如果拍摄环境的的光线比较充足，那么使用低感光度就可以满足拍摄需求。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/iso_1.jpg"
                      alt="iso"
                ><figcaption>iso</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/iso_2.jpg"
                      alt="iso"
                ><figcaption>iso</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/iso_3.jpg"
                      alt="iso"
                ><figcaption>iso</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/iso_4.jpg"
                      alt="iso"
                ><figcaption>iso</figcaption></figure></p>
<p>此外，不同的相机传感器对光线的敏感度也不同。一般来说，全画幅相机比APS-C画幅相机具有更高的感光度范围，因此全画幅相机在暗光环境下表现更好。</p>
<p>除了对照片曝光的影响外，感光度还可以影响摄影师的拍摄速度。如果摄影师需要拍摄快速移动的物体，那么就需要使用高感光度来提高拍摄速度，从而捕捉到更好的画面。</p>
<p>总之，感光度是摄影中一个非常重要的参数，它决定了照片的曝光程度和画质。摄影师需要根据拍摄环境的光线和拍摄需求来选择合适的感光度，从而拍摄出更加完美的照片。</p>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-Apriori</title>
    <url>/2017/03/16/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-Apriori/</url>
    <content><![CDATA[<blockquote>
<p>从海量数据中挖掘可信频繁项集</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">易编码实现</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">大数据集运行缓慢</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">数值型，标称型</td>
</tr>
</tbody></table>
<h1 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h1><table>
<thead>
<tr>
<th align="center">名词</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">association analysis</td>
<td align="center">关联分析</td>
</tr>
<tr>
<td align="center">association rule learning</td>
<td align="center">关联规则学习</td>
</tr>
<tr>
<td align="center">frequent item set</td>
<td align="center">频繁项集</td>
</tr>
<tr>
<td align="center">association rule</td>
<td align="center">关联规则</td>
</tr>
<tr>
<td align="center">frequent</td>
<td align="center">频繁</td>
</tr>
<tr>
<td align="center">support</td>
<td align="center">支持度</td>
</tr>
<tr>
<td align="center">confidence</td>
<td align="center">可信度</td>
</tr>
</tbody></table>
<pre><code>a priori 一个先验 使用知识作为条件进行推断
a postriori 一个后验 使用结果作为条件检测
</code></pre>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>如果某个项集是频繁项集，那么他的子项集也是频繁项集。反之，如果一个项集是非频繁项集，那么他的所有超集也是非频繁项集。</p>
<ol>
<li>收集数据</li>
<li>准备数据</li>
<li>分析数据</li>
<li>训练算法</li>
<li>测试算法</li>
<li>使用算法</li>
</ol>
<hr>
<ul>
<li>首先发现频繁项集</li>
<li>然后计算出关联规则</li>
</ul>
<h3 id="生成候选项集"><a href="#生成候选项集" class="headerlink" title="生成候选项集"></a>生成候选项集</h3><ul>
<li>记录训练数据集中每一条数据为候选项集</li>
<li>检查每一个候选项集属于数据集子集的个数</li>
<li>对于候选项集如果最小值不小于支持度，则保留该项集</li>
<li>返回所有频繁项集</li>
</ul>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-K-Means</title>
    <url>/2017/03/21/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-K-Means/</url>
    <content><![CDATA[<blockquote>
<p>类内数据点越近越好，类间数据点越远越好。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">容易实现</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">可能收敛到局部最小值，在大规模数据集上收敛较慢</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">数值型</td>
</tr>
</tbody></table>
<p>输入：分类个数k，包含在n个数据对象的数据集</p>
<p>输出：k个聚类</p>
<p>步骤：</p>
<ol>
<li>从n个数据对象中任意选取k个对象作为初始聚类中心</li>
<li>分别计算每个对象到各个聚类中心距离，把对象分配到距离最近的聚类中</li>
<li>所有对象分配后，重新计算k个聚类的中心</li>
<li>与前一次计算得到k个聚类中心比较，如果聚类中心发生变化，转步骤2，否则转步骤</li>
<li>得出结果</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_05_1.jpg"
                     
                ></p>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-KNN</title>
    <url>/2017/03/06/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-KNN/</url>
    <content><![CDATA[<blockquote>
<p>KNN 近邻算法：测量不同特征值之间距离进行分类</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">精度高，对异常值不敏感，无数据输入假定</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">计算复杂度高，空间复杂度高</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">数值型，标称型</td>
</tr>
</tbody></table>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>存在一个训练集，并且每个数据都存在标签</p>
</li>
<li><p>输入没有标签的新数据</p>
</li>
<li><p>将新数据与训练集特征进行比较</p>
</li>
<li><p>提取训练集中特征最相似的分类标签分类</p>
<p> 一般只选择训练集中的前 K 个最相似数据</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-MapReduce</title>
    <url>/2017/03/14/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-MapReduce/</url>
    <content><![CDATA[<blockquote>
<p>可以通过分布式进行大数据量的计算的软件框架</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">短时间内完成大量工作</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">算法必须经过重写，需要对系统工程有一定理解</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">数值型，标称型</td>
</tr>
</tbody></table>
<p>MapReduce 在大量节点组成的集群上运行（分布式计算）。</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol>
<li>map阶段 : 单个作业被分成很多小分，输入数据也被切片分发到每个节点，各个节点只在本地数据上运算 对应运算代码称为mapper</li>
<li>sort&#x2F;combine阶段 ： 对mapper进行排序或组合</li>
<li>shuffle阶段：将map的输出作为reduce的输入的过程，MapReduce主要在这个地方优化</li>
<li>reduce阶段 : 每个mapper的输出通过某种方式组合（一般包括排序），排序后再被分成小份分发到各个节点进行下一步处理工作。对应运算代码称为reducer</li>
</ol>
<hr>
<ul>
<li>主节点控制 <strong>MapReduce</strong> 的作业流程</li>
<li><strong>MapReduce</strong> 的作业可以分成 <strong>map</strong> 任务和 <strong>reduce</strong> 任务</li>
<li><strong>map</strong> 任务之间不做数据交流，<strong>reduce</strong> 任务也一样（每个节点只处理自己的事务）</li>
<li>在 <strong>map</strong> 和  <strong>reduce</strong> 阶段之间，有一个 <strong>sort</strong> 或 <strong>combine</strong> 阶段</li>
<li>数据被重复存放在不同的机器上，以防某个机器失效</li>
<li><strong>mapper</strong> 和 <strong>reducer</strong> 传输的数据形式为 <strong>key&#x2F;value</strong> 对</li>
</ul>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-PCA降维</title>
    <url>/2017/03/13/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-PCA%E9%99%8D%E7%BB%B4/</url>
    <content><![CDATA[<blockquote>
<p>若存在N个M维的训练集，N与M不小于百万级，该如何处理？</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">降低数据的复杂性，识别最重要的多个特征</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">不一定需要，有一定损失有用信息的可能</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">数值型</td>
</tr>
</tbody></table>
<h1 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h1><table>
<thead>
<tr>
<th align="center">名词</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">dimensionality reduction</td>
<td align="center">降维</td>
</tr>
<tr>
<td align="center">principal component analysis</td>
<td align="center">PCA主元分析</td>
</tr>
<tr>
<td align="center">factor analysis</td>
<td align="center">FA因子分析</td>
</tr>
<tr>
<td align="center">latent variable</td>
<td align="center">隐变量</td>
</tr>
<tr>
<td align="center">independent component analysis</td>
<td align="center">ICA独立成分分析</td>
</tr>
</tbody></table>
<hr>
<h1 id="降维方式"><a href="#降维方式" class="headerlink" title="降维方式"></a>降维方式</h1><ol>
<li>PCA （ Principal Component Analysis ）主元分析。是一种掌握事物主要矛盾的统计分析方法，它可以从多元事物中解析出主要影响因素，揭示事物的本质，简化复杂的问题。计算主成分的目的是将高维数据投影到较低维空间。给定 n 个变量的 m 个观察值，形成一个 n ′ m 的数据矩阵， n 通常比较大。</li>
<li>FA（Factor Analysis）因子分析。从观察数据中找出观察不到的隐变量（观察数据 &#x3D; （隐变量 + 某些噪声）线性组合）</li>
<li>ICA（Independent Component Analysis）独立成分分析。假设数据从N个数据源获取，数据源之间统计上相互独立，如果数据源的数目少于观察数据的数目，则可以实现降维过程。</li>
</ol>
<p>对于一个由多个变量描述的复杂事物，人们难以认识，那么PCA降维就是用来减少不确定干扰变量或者对分析结果影响较小的变量，以此达到降低训练集维度的效果。这样做的优势是分解难度以及提高效率。</p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul>
<li>使数据集更易使用</li>
<li>降低很多算法开销</li>
<li>去除噪声</li>
<li>使结果易懂</li>
</ul>
<h5 id="个人的一点浅见，之所以降维是因为高纬度的可视化人类或许无法有共识的理解，人是三维生物，低维度生物无法理解高维度，因为他们无法感知，但是高维度生物却轻松掌握低纬度，就像我们看一维度的坐标，与二维度的横竖坐标，所以每一个人对与四维度以及以上都会有自己想象的模型，或许是一种超矩阵立方体，或许是蠕虫形状的无限切面，所以将维度降低到一个普遍可以接受并且符合客观的标准，更有助于人类消化与学习。"><a href="#个人的一点浅见，之所以降维是因为高纬度的可视化人类或许无法有共识的理解，人是三维生物，低维度生物无法理解高维度，因为他们无法感知，但是高维度生物却轻松掌握低纬度，就像我们看一维度的坐标，与二维度的横竖坐标，所以每一个人对与四维度以及以上都会有自己想象的模型，或许是一种超矩阵立方体，或许是蠕虫形状的无限切面，所以将维度降低到一个普遍可以接受并且符合客观的标准，更有助于人类消化与学习。" class="headerlink" title="个人的一点浅见，之所以降维是因为高纬度的可视化人类或许无法有共识的理解，人是三维生物，低维度生物无法理解高维度，因为他们无法感知，但是高维度生物却轻松掌握低纬度，就像我们看一维度的坐标，与二维度的横竖坐标，所以每一个人对与四维度以及以上都会有自己想象的模型，或许是一种超矩阵立方体，或许是蠕虫形状的无限切面，所以将维度降低到一个普遍可以接受并且符合客观的标准，更有助于人类消化与学习。"></a>个人的一点浅见，之所以降维是因为高纬度的可视化人类或许无法有共识的理解，人是三维生物，低维度生物无法理解高维度，因为他们无法感知，但是高维度生物却轻松掌握低纬度，就像我们看一维度的坐标，与二维度的横竖坐标，所以每一个人对与四维度以及以上都会有自己想象的模型，或许是一种超矩阵立方体，或许是蠕虫形状的无限切面，所以将维度降低到一个普遍可以接受并且符合客观的标准，更有助于人类消化与学习。</h5><blockquote>
<p>有效的降维可以达到预期效果，但是降维往往是不可逆的，若选取了错误的维度消除，训练出的规则也必将偏离。</p>
</blockquote>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-SVM</title>
    <url>/2017/03/09/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-SVM/</url>
    <content><![CDATA[<blockquote>
<p>SVM：寻找一条最优的分界线使得它到两边的距离 <strong>margin</strong> 都最大。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">泛化错误率低，计算开销不大，易于理解</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">对参数调节和核函数选择敏感，原始分类器不参加修改适合处理二类问题</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">数值型，标称型</td>
</tr>
</tbody></table>
<h1 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h1><table>
<thead>
<tr>
<th align="center">名词</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">data</td>
<td align="center">数据</td>
</tr>
<tr>
<td align="center">classifier</td>
<td align="center">分类器</td>
</tr>
<tr>
<td align="center">optimization</td>
<td align="center">最优解</td>
</tr>
<tr>
<td align="center">kernel</td>
<td align="center">核函数</td>
</tr>
<tr>
<td align="center">hyperplane</td>
<td align="center">超平面</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>SVM - Support Vector Machine 支持向量机</strong>，为一种有监督机器（<strong>supervised</strong> learning）算法，属于分类（<strong>classification</strong>）的范畴。在数据挖掘的应用中，与无监督（<strong>unsupervised</strong>）的聚类（<strong>Clustering</strong>）相对应和区别。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_07_1.jpg"
                     
                ></p>
<p>在这种情况下边缘加粗的几个数据点就叫做 <strong>Support Vector</strong>。</p>
<h1 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h1><pre><code>在二维平面上可用一个线性函数可以将两类样本完全分开叫做线性可分。
</code></pre>
<p>事实上，大部分数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。对于非线性的情况，SVM 的处理方法是选择一个核函数（<strong>Kernel</strong>） ，通过将数据映射到高维空间，<br>拓展至任意n维乃至无限维空间，来解决在原始空间中线性不可分的问题。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_07_3.gif"
                     
                ></p>
<p>核函数的价值在于它虽然也是将特征进行从低维到高维的转换，但核函数事先在低维上进行计算，而将实质上的分类效果表现在了高维上，避免了直接在高维空间中的复杂计算。</p>
<h1 id="常见分类模型"><a href="#常见分类模型" class="headerlink" title="常见分类模型"></a>常见分类模型</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_07_2.png"
                     
                ></p>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-Spark</title>
    <url>/2017/03/28/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-Spark/</url>
    <content><![CDATA[<blockquote>
<p>Spark : 借鉴了MapReduce之上发展而来的，继承了其分布式并行计算的优点并改进了MapReduce明显的缺陷</p>
</blockquote>
<h1 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h1><table>
<thead>
<tr>
<th align="center">环境</th>
<th align="center">描述</th>
<th align="center">模式</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>local</strong></td>
<td align="center">本地单进程模式</td>
<td align="center">本地模式</td>
</tr>
<tr>
<td align="center"><strong>standalone</strong></td>
<td align="center">分布式集群,Master-Worker架构（或者Master-Slave），<br>Master负责调度，Worker负责具体Task的执行</td>
<td align="center">集群模式</td>
</tr>
<tr>
<td align="center"><strong>on yarn&#x2F;mesos</strong></td>
<td align="center">通过YARN或Mesos作为资源管理，Spark作为调度控制</td>
<td align="center">集群模式</td>
</tr>
<tr>
<td align="center"><strong>on cloud</strong></td>
<td align="center">AWS（Amazom Web Services）的EC2（Elastic Compute Cloud）<br>服务</td>
<td align="center">集群模式</td>
</tr>
</tbody></table>
<h1 id="Spark生态系统"><a href="#Spark生态系统" class="headerlink" title="Spark生态系统"></a>Spark生态系统</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_21_1.bmp"
                     
                ></p>
<ol>
<li>Spark SQL : 允许直接处理RDD，也可查询Hive、HBase等外部数据源。</li>
<li>Spark Streaming ： 实时数据流处理组件（Storm）。</li>
<li>MLlib : 机器学习算法，含聚类、分类、回归、协同过滤。</li>
<li>GraphX : 用于图计算API。</li>
<li>Spark Core : Spark的基本功能，内存计算、任务调度、部署模式、故障恢复、存储管理等</li>
<li>Standalone Scheduler : 分布式独立运行。</li>
<li>YARN : Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop 资源管理器。</li>
<li>Mesos : Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核。</li>
</ol>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><table>
<thead>
<tr>
<th align="center">概念</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RDDs</td>
<td align="center">Resillient Distributed DataSets，弹性分布式数据集，是分布式内存的一个抽象概念，提供一种高度受限的共享内存模型</td>
</tr>
<tr>
<td align="center">DAG</td>
<td align="center">Directed Acyclic Graph，有向无环图，反映RDD之间的依赖关系</td>
</tr>
<tr>
<td align="center">Application</td>
<td align="center">Spark的应用程序，包含一个Driver program和若干Executor</td>
</tr>
<tr>
<td align="center">Driver Program</td>
<td align="center">运行Application的main()函数并且创建SparkContext</td>
</tr>
<tr>
<td align="center">Cluster Manager</td>
<td align="center">在集群上获取资源的外部服务(例如：Standalone、Mesos、Yarn)</td>
</tr>
<tr>
<td align="center">Worker Node</td>
<td align="center">集群中任何可以运行Application代码的节点，运行一个或多个Executor进程</td>
</tr>
<tr>
<td align="center">Executor</td>
<td align="center">是为Application运行在工作节点（Worker Node）上的一个进程，该进程负责运行Task，并且负责将数据存在内存或者磁盘上。每个Application都会申请各自的Executor来处理任务</td>
</tr>
<tr>
<td align="center">SparkContext</td>
<td align="center">Spark应用程序的入口，负责调度各个运算资源，协调各个Worker Node上的Executor</td>
</tr>
<tr>
<td align="center">Job</td>
<td align="center">一个Job含多个RDD及作用于RDD上的各种操作，SparkContext提交的具体Action操作，常和Action对应</td>
</tr>
<tr>
<td align="center">Stage</td>
<td align="center">是Job的基本调度单位，一个Job分为多组Task，每组Task被称为Stage，或者称为TaskSet，代表了一组关联的、相互之间没有Shuffle依赖关系的任务组成的任务集</td>
</tr>
<tr>
<td align="center">Task</td>
<td align="center">运行在Executor上的工作单元</td>
</tr>
<tr>
<td align="center">DAGScheduler</td>
<td align="center">根据Job构建基于Stage的DAG，并提交Stage给TaskScheduler</td>
</tr>
<tr>
<td align="center">TaskScheduler</td>
<td align="center">将Taskset提交给Worker node集群运行并返回结果</td>
</tr>
<tr>
<td align="center">Transformations</td>
<td align="center">是Spark API的一种类型，Transformation返回值还是一个RDD，所有的Transformation采用的都是懒策略，如果只是将Transformation提交是不会执行计算的</td>
</tr>
<tr>
<td align="center">Action</td>
<td align="center">是Spark API的一种类型，Action返回值不是一个RDD，而是一个scala集合；计算只有在Action被提交的时候计算才被触发</td>
</tr>
</tbody></table>
<h1 id="Spark运行流程"><a href="#Spark运行流程" class="headerlink" title="Spark运行流程"></a>Spark运行流程</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_21_2.bmp"
                     
                ></p>
<ol>
<li>提交一个Application后，首先构建基本运行环境，即由Driver创建一个SparkContext，由SparkContext负责和资源管理器（Cluster Manager）的通信，以及资源的申请、任务的分配和监控等。SparkContext会向资源管理器注册并申请运行Executor的资源；</li>
<li>资源管理器为Executor分配资源，启动Executor进程，Executor运行情况随着“心跳”发送到资源管理器上；</li>
<li>SparkContext根据RDD的依赖关系构建DAG图，DAG图提交给DAGScheduler进行解析，将DAG图分解成Stage，并计算Stage间的依赖关系，然后将一个个TaskSet（即Stage）提交给底层调度器TaskScheduler进行处理；Executor向SparkContext申请Task，TaskScheduler将Task发放给Executor运行，同时，SparkContext将应用程序代码发送给Executor；</li>
<li>Task在Executor上运行，结果反馈给TaskScheduler，然后反馈给DAGScheduler，运行完毕后写入数据，并释放资源。</li>
</ol>
<h1 id="Spark架构特点"><a href="#Spark架构特点" class="headerlink" title="Spark架构特点"></a>Spark架构特点</h1><ul>
<li>每个Application都有专属的Executor进程，并且在Application运行期间一直驻留。Executor进程以多线程的方式运行Task；</li>
<li>Spark运行过程与资源管理器无关，只要能获取Executor进程并保存通信即可；</li>
<li>Task采用数据本地性和推测执行等优化机制。数据本地性，即计算向数据靠拢，移动计算比移动数据占得网络资源要少。Spark采用延时调度机制，可在更大程度上实现执行过程优化。</li>
</ul>
]]></content>
      <tags>
        <tag>DataMining</tag>
        <tag>Tools</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-决策树</title>
    <url>/2017/03/05/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    <content><![CDATA[<blockquote>
<p>决策树：从属性相同的一类别事例推理树状规则分类方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">计算复杂度不高，输出易于理解，中间值缺失不敏感，可以处理不相关特征数据</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">可能产生过拟合</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">数值型，标称型</td>
</tr>
</tbody></table>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>生成决策树：关键&#x3D;&gt; 选择适合的属性作为判别依据</li>
<li>修剪决策树：生成决策树时未考虑的噪声影响，容易出现过拟合，预测效果差，预先剪枝，后剪枝</li>
<li>识别叶子节点：差异较大，为规则</li>
</ol>
<h1 id="ID3不足"><a href="#ID3不足" class="headerlink" title="ID3不足"></a>ID3不足</h1><ol>
<li>无法回溯，不一定是全局最优解</li>
<li>信息增益，信息熵偏向属性取值较多的属性</li>
<li>仅处理离散，不能处理连续属性</li>
<li>样本过小或包含噪声时，容易过拟合（Overfitting）</li>
</ol>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-回归分析</title>
    <url>/2017/03/07/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>原文<br><a class="link"   href="https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/" >https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>译文<br><a class="link"   href="http://blog.csdn.net/lynnucas/article/details/47948639" >http://blog.csdn.net/lynnucas/article/details/47948639 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<hr>
<blockquote>
<p>回归分析 : 是一种预测性的建模技术,使用曲线拟合数据点，最终获取到数据点的距离差异最小的曲线</p>
</blockquote>
<pre><code>回归主要三个度量：自变量的个数，因变量的类型以及回归线的形状
</code></pre>
<h1 id="线性回归-（Linear-Regression）"><a href="#线性回归-（Linear-Regression）" class="headerlink" title="线性回归 （Linear Regression）"></a>线性回归 （Linear Regression）</h1><blockquote>
<p>因变量是连续的，自变量可以是连续的也可以是离散的，回归线的性质是线性的。</p>
</blockquote>
<p>线性回归使用最佳的拟合直线（也就是回归线）在因变量（Y）和一个或多个自变量（X）之间建立一种关系。</p>
<p>用一个方程式来表示它，即Y&#x3D;a+b*X + e，其中a表示截距，b表示直线的斜率，e是误差项。这个方程可以根据给定的预测变量（s）来预测目标变量的值。</p>
<p>一元线性回归和多元线性回归的区别在于，多元线性回归有（&gt;1）个自变量，而一元线性回归通常只有1个自变量。</p>
<ul>
<li>自变量与因变量之间必须有线性关系</li>
<li>多元回归存在多重共线性，自相关性和异方差性。</li>
<li>线性回归对异常值非常敏感。它会严重影响回归线，最终影响预测值。</li>
<li>多重共线性会增加系数估计值的方差，使得在模型轻微变化下，估计非常敏感。结果就是系数估计值不稳定</li>
<li>在多个自变量的情况下，我们可以使用向前选择法，向后剔除法和逐步筛选法来选择最重要的自变量。</li>
</ul>
<h1 id="逻辑回归-（Logistic-Regression）"><a href="#逻辑回归-（Logistic-Regression）" class="headerlink" title="逻辑回归 （Logistic Regression）"></a>逻辑回归 （Logistic Regression）</h1><blockquote>
<p>逻辑回归是用来计算“事件&#x3D;Success”和“事件&#x3D;Failure”的概率。当因变量的类型属于二元（1 &#x2F; 0，真&#x2F;假，是&#x2F;否）变量时，我们就应该使用逻辑回归。</p>
</blockquote>
<p>因为在这里我们使用的是的二项分布（因变量），我们需要选择一个对于这个分布最佳的连结函数。它就是Logit函数。在上述方程中，通过观测样本的极大似然估计值来选择参数，而不是最小化平方和误差（如在普通回归使用的）。</p>
<ul>
<li>它广泛的用于分类问题。</li>
<li>逻辑回归不要求自变量和因变量是线性关系。它可以处理各种类型的关系，因为它对预测的相对风险指数OR使用了一个非线性的log转换。</li>
<li>为了避免过拟合和欠拟合，我们应该包括所有重要的变量。有一个很好的方法来确保这种情况，就是使用逐步筛选方法来估计逻辑回归。</li>
<li>它需要大的样本量，因为在样本数量较少的情况下，极大似然估计的效果比普通的最小二乘法差。</li>
<li>自变量不应该相互关联的，即不具有多重共线性。然而，在分析和建模中，我们可以选择包含分类变量相互作用的影响。</li>
<li>如果因变量的值是定序变量，则称它为序逻辑回归。</li>
<li>如果因变量是多类的话，则称它为多元逻辑回归。</li>
</ul>
<h1 id="多项式回归-（Polynomial-Regression）"><a href="#多项式回归-（Polynomial-Regression）" class="headerlink" title="多项式回归 （Polynomial Regression）"></a>多项式回归 （Polynomial Regression）</h1><blockquote>
<p>对于一个回归方程，如果自变量的指数大于1，那么它就是多项式回归方程。</p>
</blockquote>
<p>在这种回归模型中，最佳拟合线不是直线。而是一个用于拟合数据点的曲线。</p>
<ul>
<li>虽然会有一个诱导可以拟合一个高次多项式并得到较低的错误，但这可能会导致过拟合。你需要经常画出关系图来查看拟合情况，并且专注于保证拟合合理，既没有过拟合又没有欠拟合。</li>
<li>明显地向两端寻找曲线点，看看这些形状和趋势是否有意义。更高次的多项式最后可能产生怪异的推断结果。</li>
</ul>
<h1 id="逐步回归-（Stepwise-Regression）"><a href="#逐步回归-（Stepwise-Regression）" class="headerlink" title="逐步回归 （Stepwise Regression）"></a>逐步回归 （Stepwise Regression）</h1><blockquote>
<p>在处理多个自变量时，我们可以使用这种形式的回归。</p>
</blockquote>
<p>这一壮举是通过观察统计的值，如R-square，t-stats和AIC指标，来识别重要的变量。逐步回归通过同时添加&#x2F;删除基于指定标准的协变量来拟合模型。下面列出了一些最常用的逐步回归方法：</p>
<ul>
<li>标准逐步回归法做两件事情。即增加和删除每个步骤所需的预测。</li>
<li>向前选择法从模型中最显著的预测开始，然后为每一步添加变量。</li>
<li>向后剔除法与模型的所有预测同时开始，然后在每一步消除最小显着性的变量。</li>
</ul>
<p>这种建模技术的目的是使用最少的预测变量数来最大化预测能力。这也是处理高维数据集的方法之一。</p>
<h1 id="岭回归-（Ridge-Regression）"><a href="#岭回归-（Ridge-Regression）" class="headerlink" title="岭回归 （Ridge Regression）"></a>岭回归 （Ridge Regression）</h1><blockquote>
<p>岭回归分析是一种用于存在多重共线性（自变量高度相关）数据的技术。</p>
</blockquote>
<p>在多重共线性情况下，尽管最小二乘法（OLS）对每个变量很公平，但它们的差异很大，使得观测值偏移并远离真实值。岭回归通过给回归估计上增加一个偏差度，来降低标准误差。</p>
<p>在一个线性方程中，预测误差可以分解为2个子分量。一个是偏差，一个是方差。预测错误可能会由这两个分量或者这两个中的任何一个造成。</p>
<ul>
<li>除常数项以外，这种回归的假设与最小二乘回归类似；</li>
<li>它收缩了相关系数的值，但没有达到零，这表明它没有特征选择功能</li>
<li>这是一个正则化方法，并且使用的是L2正则化。</li>
</ul>
<h1 id="套索回归-（Lasso-Regression）"><a href="#套索回归-（Lasso-Regression）" class="headerlink" title="套索回归 （Lasso Regression）"></a>套索回归 （Lasso Regression）</h1><blockquote>
<p>它类似于岭回归，Lasso （Least Absolute Shrinkage and Selection Operator）也会惩罚回归系数的绝对值大小。</p>
</blockquote>
<p>此外，它能够减少变化程度并提高线性回归模型的精度。</p>
<p>Lasso 回归与Ridge回归有一点不同，它使用的惩罚函数是绝对值，而不是平方。这导致惩罚（或等于约束估计的绝对值之和）值使一些参数估计结果等于零。使用惩罚值越大，进一步估计会使得缩小值趋近于零。这将导致我们要从给定的n个变量中选择变量。</p>
<ul>
<li>除常数项以外，这种回归的假设与最小二乘回归类似；</li>
<li>它收缩系数接近零（等于零），这确实有助于特征选择；</li>
<li>这是一个正则化方法，使用的是L1正则化；</li>
</ul>
<p>如果预测的一组变量是高度相关的，Lasso 会选出其中一个变量并且将其它的收缩为零。</p>
<h1 id="弹性网络回归（ElasticNet-Regression）"><a href="#弹性网络回归（ElasticNet-Regression）" class="headerlink" title="弹性网络回归（ElasticNet Regression）"></a>弹性网络回归（ElasticNet Regression）</h1><blockquote>
<p>ElasticNet是Lasso和Ridge回归技术的混合体。</p>
</blockquote>
<p>它使用L1来训练并且L2优先作为正则化矩阵。当有多个相关的特征时，ElasticNet是很有用的。Lasso 会随机挑选他们其中的一个，而ElasticNet则会选择两个。</p>
<p>Lasso和Ridge之间的实际的优点是，它允许ElasticNet继承循环状态下Ridge的一些稳定性。</p>
<ul>
<li>在高度相关变量的情况下，它会产生群体效应；</li>
<li>选择变量的数目没有限制；</li>
<li>它可以承受双重收缩。</li>
</ul>
]]></content>
      <tags>
        <tag>转载</tag>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-朴素贝叶斯</title>
    <url>/2017/03/04/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
    <content><![CDATA[<blockquote>
<p>朴素贝叶斯 (<strong>Naive Bayesian</strong>) : 通过随机事件A和B的条件概率（或边缘概率）判断规则是否可信</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">数据较少仍然有效，可以处理多类别问题</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">对于输入数据敏感</td>
</tr>
<tr>
<td align="center">适用</td>
<td align="center">标称型</td>
</tr>
</tbody></table>
<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://61.91.161.217/chart?cht=tx&chl=\Large p(y|x)=\frac{p(x|y)p(y)}{p(x)}"
                      style="border:none;"
                >

<h1 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算每个类别特征数目</span><br><span class="line">对每个训练集：</span><br><span class="line">	对每个特征：</span><br><span class="line">		如果特征出现在集合中-&gt;增加该特征计数值</span><br><span class="line">		增加所有特征计数值</span><br><span class="line">	对每个特征：</span><br><span class="line">		对每条数据：</span><br><span class="line">			将该数据的数目除以总数据数目得到条件概率</span><br><span class="line">	返回每个特征的条件概率	</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-欠拟合与过拟合</title>
    <url>/2017/03/08/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E6%AC%A0%E6%8B%9F%E5%90%88%E4%B8%8E%E8%BF%87%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[<blockquote>
<p>以MATLAB 模拟离散点</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_04_1.png"
                     
                ></p>
<blockquote>
<p>以下为欠拟合与过拟合图示：</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2017_03_04_2.png"
                     
                ></p>
<h1 id="欠拟合"><a href="#欠拟合" class="headerlink" title="欠拟合"></a>欠拟合</h1><blockquote>
<p>模型没有很好地捕捉到数据特征，不能够很好地拟合数据。</p>
</blockquote>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>添加其他特征项，有时候我们模型出现欠拟合的时候是因为特征项不够导致的，可以添加其他特征项来很好地解决。</li>
<li>添加多项式特征，这个在机器学习算法里面用的很普遍，例如将线性模型通过添加二次项或者三次项使模型泛化能力更强。</li>
<li>减少正则化参数，正则化的目的是用来防止过拟合的，但是现在模型出现了欠拟合，则需要减少正则化参数。</li>
</ol>
<h1 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h1><blockquote>
<p>模型数据学习过于彻底，噪声数据特征也学习了，后期测试无法很好地识别数据，不能正确的分类，模型泛化能力太差。</p>
</blockquote>
<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li><p>重新清洗数据，导致过拟合的一个原因也有可能是数据不纯导致的，如果出现了过拟合就需要我们重新清洗数据。</p>
</li>
<li><p>增大数据的训练量，还有一个原因就是我们用于训练的数据量太小导致的，训练数据占总数据的比例过小。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-距离计算</title>
    <url>/2017/03/03/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<blockquote>
<p>计算样本间的“距离”(Distance) ，估算分类时不同样本之间的相似性度量(Similarity Measurement)。</p>
</blockquote>
<ol>
<li>欧氏距离</li>
<li>曼哈顿距离</li>
<li>切比雪夫距离</li>
<li>闵可夫斯基距离</li>
<li>标准化欧氏距离</li>
<li>马氏距离</li>
<li>夹角余弦</li>
<li>汉明距离</li>
<li>杰卡德距离&amp; 杰卡德相似系数</li>
<li>相关系数&amp; 相关距离</li>
<li>信息熵</li>
</ol>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>概率学-随机变量</title>
    <url>/2017/03/02/%E6%A6%82%E7%8E%87%E5%AD%A6-%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<blockquote>
<p>作者：Vamei 出处：<a class="link"   href="http://www.cnblogs.com/vamei" >http://www.cnblogs.com/vamei <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 欢迎转载，也请保留这段声明。谢谢！</p>
</blockquote>
<blockquote>
<p>提示：若无法正确显示 LaTeX 公式<br>在hosts 文件中添加</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">61.91.161.217	chart.googleapis.com</span><br></pre></td></tr></table></figure></div>

<p>我们了解了“样本空间”，“事件”，“概率”。样本空间中包含了一次实验所有可能的结果，事件是样本空间的一个子集，每个事件可以有一个发生的概率。概率是集合的一个“测度”。</p>
<p>这一讲，我们将讨论随机变量。	<strong>随机变量(random variable)</strong>	的本质是一个函数，是从样本空间的子集到实数的映射，将事件转换成一个数值。根据样本空间中的元素不同(即不同的实验结果)，随机变量的值也将随机产生。可以说，随机变量是“数值化”的实验结果。在现实生活中，实验结果可以是很“叙述性”，比如“男孩”，“女孩”。在数学家眼里，这些文字化的叙述太过繁琐，我们为什么不能拿数字来代表它们呢？</p>
<p>(数学家恐怕是很难成为文学家吧？)</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5C2017_03_01_1.jpg"
                     
                ></p>
<h1 id="离散随机变量"><a href="#离散随机变量" class="headerlink" title="离散随机变量"></a>离散随机变量</h1><p>在连续掷两次硬币的例子中，样本空间为:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= \Omega = \{ HH, HT, TH, TT \}"
                      style="border:none;"
                >


<p>这样的实验结果可以有很多数值化的方法，比如定义HH为400， HT为30， TH为0.2，TT为1。要注意的是，这里是用某个数字来代表样本空间的某个元素，这个数字并不是概率值。</p>
<p>如何对样本空间的元素数值化是根据现实需求的。比如说，根据出现正面的次数，我们将赢取不同的奖励。那么在分析时，可以取“结果中正面的次数”为随机变量。这样一个随机变量将有2, 1, 0三种可能的取值。该随机变量只能取离散的几个孤立值，这样一种随机变量称为	<strong>离散随机变量</strong>	。</p>
<p>映射关系如下:</p>
<table>
<thead>
<tr>
<th align="center">实验结果</th>
<th align="center">随机变量</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HH</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">HT</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">TH</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">TT</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>我们通常用一个大写字母来表示一个随机变量，比如X。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5C2017_03_01_2.png"
                     
                ></p>
<p>如果样本空间中的每个结果等概率，那么随机变量取值可能性为:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= P(X=2) = 0.25"
                      style="border:none;"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= P(X=1) = 0.5"
                      style="border:none;"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= P(X=0) = 0.25"
                      style="border:none;"
                >

<p>当X取 0 , 1 , 2 之外的值时，概率为 0 。注意到， X&#x3D;1 这个事件，实际上包含了两个元素，HT, TH。因此， X&#x3D;1 出现的概率较高。所有可能取值的概率和为 1 。</p>
<p>表示了随机变量在不同取值下的概率，称为	<strong>概率质量函数(PMF, probability mass function)</strong>	。我们将看到其他的表示概率分布的方式。</p>
<h1 id="累积分布函数"><a href="#累积分布函数" class="headerlink" title="累积分布函数"></a>累积分布函数</h1><p>上面的函数列出了每个取值的对应概率。等价的，我们可以用	<strong>累积分布函数(CDF, cumulative distribution function)</strong>	来表示随机变量的概率分布状况。在累积分布函数，我们列出的，总是随机变量X，在小于x的这个区间的概率和。当x增大时，X &lt; x包含的结果增加，概率和也相应增加。当x为正无穷时，实际上是所有情况的概率和，那么累积分布函数为1。</p>
<p>严格的定义为:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= F(x) = P(X \le x), -\infty < x < \infty"
                      style="border:none;"
                >

<p>我们可以绘制上面例子的CDF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5C2017_03_01_3.png"
                     
                ></p>
<p>这样的累积分布函数似乎并不比概率质量函数来得方便。但在后面，我们会很快看到它的优势。即它可以同时用于离散随机变量和连续随机变量。</p>
<p>上面的图片可以用如下代码生成:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># By Vamei</span></span><br><span class="line"><span class="comment"># Plot the CDF of total number of heads in two flips</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.75</span>, <span class="number">0.75</span>, <span class="number">1.0</span>, <span class="number">1.0</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax  = plt.subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">ax.plot(x, y)</span><br><span class="line">ax.set_ylim([-<span class="number">0.1</span>, <span class="number">1.1</span>])</span><br><span class="line">ax.set_title(<span class="string">&quot;CDF, total number of heads&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<h1 id="连续随机变量"><a href="#连续随机变量" class="headerlink" title="连续随机变量"></a>连续随机变量</h1><p>随机变量还可以是连续取值，这样的随机变量称为	**连续随机变量(continuous random variable)**。比如，一个随机变量，可以随机的取0到1的任意数值。</p>
<p>当这样取值时，任意区间能实际上都有无穷多个结果。比如，我们测量温度，可以有1度和2度，但两者之间，还可以有1.1度，1.003度，1.658度等等无穷种结果。这样的话，每个结果的可能性都是无穷小。我们讨论的是某个区间内的概率，即<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= P(a<X<b)"
                      style="border:none;"
                >，而不是具体某一数值的概率。在这样的情况下，分到各个结果的概率都无限趋近于0。显然，我们无法用概率质量函数来描述连续随机变量的分布。</p>
<p>我们这里遇到的困境是现代数学的一个相当的困扰。考虑一个线段，它是点的集合，并且有“长度”这样的测度。然而，线段上有无穷个多个点。讨论“每个点的长度”是完全没有意义的。将线段换成区间，将点换成取值，将长度换成概率，我们发现这两个问题异常相似。另一方面，我们知道，可以从线段上截取某一小段，而这一小段是可以有“长度”的。连续随机变量的概率定义，正依赖于此：对于连续随机变量，我们只讨论某个区间，比如从1.2到1.4这一区间的概率，而不讨论具体某个点，比如1.3的概率。 </p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5C2017_03_01_4.jpg"
                     
                ></p>
<p> 观察一个很简单的连续随机分布。假设我们有一个随机数生成器，产生一个从0到1的实数，每个实数出现的概率相等。这样的一个分布被称为	**均匀分布(uniform distribution)**。直觉告诉我们，相同长度的每一段区间，对应的概率都相同。由此，[0, 0.5]是整个区间的一半，概率为1&#x2F;2。对于均匀分布来说，概率正好和区间长度这一测度等同。</p>
<p>我们尝试用更正式的方式来描述分布。累积分布函数本身就表示随机变量在一个区间概率，所以可以直接用于连续随机变量。即</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= F(x) = P(X \le x), - \infty < x < \infty"
                      style="border:none;"
                >

<p>对于均匀分布来说，它的累积分布函数是:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= F(x) = F(x) = 0, x < 0"
                      style="border:none;"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= F(x) = F(x) = x, 0 \le x \le 1"
                      style="border:none;"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= F(x) = F(x) = 1, x > 1"
                      style="border:none;"
                >

<p>它类似从线段的一头到某一点的“长度”。这样，我们就知道了从起点到每一点的长度。如果我们想知道某个特定区间[a, b]的概率，它就是F(b) - F(a)。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5C2017_03_01_5.png"
                     
                ></p>
<p>借用“无穷小”的概念，我们可以构建	<strong>概率密度函数(PDF，probability density function)</strong>	。粗糙的讲，我们在某个点附近取一个“无穷小”段，该小段的区间长度为dx，而这个“无穷小”段对应的概率为dF，那么该点的概率密度为dF&#x2F;dx。这实际上是微积分的领域。</p>
<p>概率密度函数可以代替累积分布函数，来表示一个连续随机变量的概率分布:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= f(x) = \frac{dF(x)}{dx}"
                      style="border:none;"
                >

<p>即密度函数是累积分布函数的微分，或者说，</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= F(x) = \int_{-\infty}^x f(u)du"
                      style="border:none;"
                >

<p>即累积分布函数是密度函数从负无穷到x的积分。</p>
<p>密度函数满足:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= \int_{-\infty}^{+\infty} f(u)du = 1"
                      style="border:none;"
                >

<p>均匀分布的密度函数可以写成:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://chart.googleapis.com/chart?cht=tx&chl= f(x) = \left\{ \begin{array}{l} 1, 0 \leq x \leq 1 \\ 0, x<0 \, or \, x>1 \end{array}\right."
                      style="border:none;"
                >

<p>可以画出该密度函数</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5C2017_03_01_6.png"
                     
                ></p>
<p>对一个函数的积分，获得的是该函数曲线下的面积。因此，<strong>密度曲线下某个区间的面积</strong>，就是密度概率函数的积分，代表了随机变量在该区间的概率。概率密度函数就可以非常直观的通过“面积”，来表示概率的大小。</p>
<p>从负无穷到正无穷积分，就代表了所有可能结果的概率和，即为1。</p>
<p>上面的图片可以利用下面代码生成:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># By Vamei</span></span><br><span class="line"><span class="comment"># Density function for uniform distribution</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">ax.plot(x, y)</span><br><span class="line">ax.set_xlim([-<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">ax.set_ylim([-<span class="number">0.1</span>, <span class="number">1.1</span>])</span><br><span class="line">ax.set_title(<span class="string">&quot;density function for uniform distribution&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>随机变量，随机变量的概率分布</p>
<p>累积分布函数</p>
<p>密度函数</p>
]]></content>
      <tags>
        <tag>转载</tag>
        <tag>概率学</tag>
      </tags>
  </entry>
  <entry>
    <title>熵</title>
    <url>/2017/03/01/%E7%86%B5/</url>
    <content><![CDATA[<blockquote>
<p>熵 （Entropy）: 热力学第二定律，熵反映了状态的无序程度。范围（0~1）值越大越混乱。</p>
</blockquote>
<p>物体从一种有序转变为另一种有序状态，必经过一个无序状态。无序状态程度即为熵。而为了消除这种无序使其有序，需要额外的能量。在信息中则是变量的不确定性越大，熵也就越大，把它搞清楚所需要的信息量也就越大。 </p>
<p>一个系统越是有序，信息熵就越低；反之，一个系统越是混乱，信息熵就越高。所以，信息熵也可以说是系统有序化程度的一个度量。</p>
<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://61.91.161.217/chart?cht=tx&chl={H_s={\sum^{n}+_{i=1}p_iI_e}={-\sum^{n}+_{i=1}{p_ilogp_i}"
                      style="border:none;"
                >

<p>而我们也可能是宇宙由起点至终点两个有序状态中的熵。（热寂宇宙末日假说，也是在熵的概念上提出的）</p>
<pre><code>熵的概念也被广泛应用到各个领域（热力学、统计学、信息学、天文学）
</code></pre>
]]></content>
      <tags>
        <tag>DataMining</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]如何用人类的方式进行 Code Review</title>
    <url>/2024/06/22/%E8%AF%91-%E5%A6%82%E4%BD%95%E7%94%A8%E4%BA%BA%E7%B1%BB%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C-Code-Review/</url>
    <content><![CDATA[<h1 id="【译】如何用人类的方式进行-Code-Review"><a href="#【译】如何用人类的方式进行-Code-Review" class="headerlink" title="【译】如何用人类的方式进行 Code Review"></a>【译】如何用人类的方式进行 Code Review</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文是 Google 工程师 Michael Lynch 的个人博客文章：</p>
<ul>
<li><a class="link"   href="https://mtlynch.io/human-code-reviews-1/" >https://mtlynch.io/human-code-reviews-1/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://mtlynch.io/human-code-reviews-2/" >https://mtlynch.io/human-code-reviews-2/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>读了之后深有感触，目前国内大多数公司对于 Code review 的重视程度还远远不够，大多数人都把它视为一件麻烦事。即使在有 Code review 流程的团队，也缺乏相关经验，而且目前中文技术圈关于 Code review 的文章真的太少了，所以在这里翻译这篇个人认为很不错的文章给大家看。</p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>最近，我读了很多关于 code review 最佳实践的文章。但我发现大多数文章都着重于教你如何找到代码中的 bug，而几乎完全忽略了 code review 的其他部分。比如你沟通的方式是否足够建设性及专业呢？无所谓！只要找到所有 bug，剩下的就自生自灭去吧。</p>
<p>所以我获得了一个启示：如果这些跟代码相关，为什么不能以一种更浪漫的形式呢？于是，我想把我的新书介绍给开发者们，以帮助他们以及他们热爱的生活。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-fe43e2fe9e616f34835d8e5decf35051_720w.jpg"
                      alt="封面"
                ><figcaption>封面</figcaption></figure></p>
<p>我这本革命性的书将会教你一些<em>实用的技巧</em>，以帮助你最大限度地找到你同伴身上的所有缺点。但它不会包括以下内容：</p>
<ul>
<li>如何与你的同伴沟通，让你们相互理解、产生共鸣</li>
<li>如何帮助你的同伴找到他们的不足之处</li>
</ul>
<p>这本书适合你吗？我仿佛听到了你喊“不不不不！”</p>
<p>所以，为什么我们一定要用那种（没人性的）方式来讨论 code review 呢？</p>
<p>唯一的回答就是，我是在遥远的未来读这本书的，那个时代所有的开发者都是机器人。在那个世界里，你的团队小伙伴很喜欢冰冷的、生硬的、无情的评论，因为它们都是机器人，阅读这些评论能温暖它们的机械之心。</p>
<p>但我想做一个大胆的假设，你现在就想改善你们团队的 code review，而你们的团队成员都是活生生的人类。我还想做一个更大胆的假设，那就是 “与同事建立积极的关系” 本身就是一个目的，而不是简单地调整某个变量，以减少 bug。在这种情况下，你的 code review 会发生怎样的变化呢？</p>
<p>我的这篇文章会介绍一些技巧，让 code review 不再仅仅是一种技术上的流程，更是一种社交性的流程。</p>
<hr>
<h2 id="什么是-Code-Review？"><a href="#什么是-Code-Review？" class="headerlink" title="什么是 Code Review？"></a>什么是 Code Review？</h2><p>“Code Review” 这个术语实际上包含了一个很大范围内的活动，从最简单的读同伴的代码，到 20 个人正襟危坐在会议室里一行一行地剖析代码，都可以称为 “Code Review”。在后文里，我用这个术语来指代一个正式且书面化的过程，但不是像内部 Code Review 会议那样重量级。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-3a5ef146bc70233b01c11210fbaffc42_720w.jpg"
                      alt="What"
                ><figcaption>What</figcaption></figure></p>
<p>参与 review 的人有两种，一种是<em>作者（author）</em>，也就是代码的编写者和 review 的发起者；另一种是<em>评审者（reviewer）</em>，也就是阅读代码，并且决定代码是否可以合并进入团队代码库的人。评审者可以有多个人，但后文里我会假设你是唯一的评审者。<br>在 review 开始之前，作者必须创建一个<em>变更列表（changelist）</em>。它含有一系列的修改，而作者想要把这些修改合并进入代码库。<br>当作者把变更列表交给评审者之后，review 就开始了。review 是一种轮转的方式进行的，每一轮都是一次作者和评审者之间的往返：作者提交变更列表，评审者对这些变更作出反馈。每个 review 都会有一轮或多轮。<br>当评审者<em>同意（approve）</em>这些更改之后，code review 就结束了。这个时候一般会评论一句 “LGTM”，也就是 “looks good to me” 的缩写。</p>
<h2 id="这有哪些难点？"><a href="#这有哪些难点？" class="headerlink" title="这有哪些难点？"></a>这有哪些难点？</h2><p>设想一下，如果一名程序员给你递交了一份他们自认为很赞的变更列表，而你回复了一大堆问题，告诉他这份变更列表并不好，这里就很容易让人感到冒犯。</p>
<blockquote>
<p>这就是为啥我从来不怀念 IT 行业的原因，程序员都是些很不讨人喜欢的人… 要是放在航天行业，这些高估自己能力的人坟头草都已经一米多高了.<br>— Philip Greenspun，ArsDigita 联合创始人</p>
</blockquote>
<p>对于代码的作者来说，评论或者批评他们的代码，很容易被视为一种暗示，即他们不是一名称职的程序员。虽然 code review 是一个很好的机会来分享知识、做一些工程上的抉择，但如果 code review 被视为人身攻击，那么这些好处都不会发生。<br>就算上面这种情况不会发生，你也会遇到沟通的问题，把你脑子里的想法用文字准确地表述下来是很具有挑战性的，因为别人很容易产生误解。代码的作者听不到你的语音语调，也看不到你的肢体语言，所以清楚的写下你的反馈是一件很重要的事情。对于戒备心理很强的代码作者而言，一句无意的 “你忘了关掉 file handle”，可以被理解为，“你竟然忘了关闭 file handle？你这个蠢猪。”</p>
<hr>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p><em>让电脑做重复的事情</em></p>
<p>在会议和邮件的交替轰炸中，你能专注于代码的时间实际上是很稀有的，你的精神耐受力甚至更短。读团队小伙伴的代码需要大量的精力和高度的精神集中，所以不要把精力花在计算机可以代替我们做的事情上，特别是那些计算机做得更好的事情。<br>空格问题就是一个明显的例子。比较一下，评审者靠肉眼找到一处缩进错误，然后协助代码作者修正它，和直接使用一个代码格式化工具，哪一个耗费的时间更少？</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-76d895dcd60cf89202e4e8058f415be6_720w.jpg"
                      alt="review"
                ><figcaption>review</figcaption></figure></p>
<p>表格的右边之所以啥都不需要干，是因为作者已经使用了一个自动格式化工具，在每次保存代码时，都会自动执行。最坏的情况下，作者没检查代码就提交 review 了，持续集成系统也会报错，这样作者就可以在评审者发现之前就修复这个问题。<br>在你的 code review 中找到可以被自动化的地方，下面是一些常见的点：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-ae0880384bd53cbad9e6000b36b43c2c_720w.jpg"
                      alt="way"
                ><figcaption>way</figcaption></figure></p>
<p>自动化可以让作为评审者的你做更多有意义的事情。当你可以不需要在意某大类问题（例如 imports 的顺序、源文件的命名约定），你就可以有更多的精力关注其他更有趣的问题，例如函数错误或者可读性差的问题。<br>自动化同样可以让代码的作者受益，它可以让作者快速地在几秒钟（而不是几小时）内找到一些粗心产生的低级错误。快速的错误反馈产生的修复成本也很低，因为代码作者的脑中依然有这段代码的上下文。另外，来自电脑的报错相比于来自评审者的纠错，从自尊心上讲，更容易让人接受。<br>你的团队应该立刻把这样一套自动化工具加入到 code review 的工作流中（比如 Git 的 pre-commit hook，还有 Github 的 webhook）。如果 review 需要评审者手工去做这些事情，那就丧失了很多益处。代码的作者总是会忘记遵守某些东西，以至于你必须重复地检查很多简单又低级的问题，而这些问题本应是自动化工具代替你做的。</p>
<hr>
<h2 id="用代码风格规范来解决代码风格的争议"><a href="#用代码风格规范来解决代码风格的争议" class="headerlink" title="用代码风格规范来解决代码风格的争议"></a>用代码风格规范来解决代码风格的争议</h2><p>关于代码风格的争吵在 code review 中是非常浪费时间的。一致的代码风格当然是非常重要的，但 code review 的时间并不该浪费在讨论圆括号该放在哪里。最好的做法是通过维护一份代码风格规范来避免这里的争吵。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-275261322f32c3e0dce033e76a7b9d11_720w.jpg"
                      alt="争吵"
                ><figcaption>争吵</figcaption></figure></p>
<p>一份优秀的代码风格规范，不仅仅定义了诸如命名规范、空格规范这些表面上的东西，同样也应该定义如何使用语言的某些特性。例如 JavaScript 和 Perl，它们具有函数式编程的特性 —— 也就是说它们提供了多种方式来完成同一件事情。代码规范里应该只定义<em>一种正确的方式</em>，这样的话才能让你的团队不会一半的人用某些语言特性，而另一半的人用完全不同的其它特性。<br>当你有了一份风格规范后，你就再也不需要把时间浪费在讨论谁的命名规范最好这种问题上了，只要按照规范来就可以。如果你的风格指南没有针对某个特殊问题作出规定，那么它在 review 过程中不应该被讨论。如果遇到规范中没有涵盖的问题，并且这个问题足够重要，那么可以与团队成员进行讨论，然后将讨论结果记录在代码风格规范中，这样你们以后就不用再讨论了。</p>
<h3 id="选项一：使用一份已有的代码规范"><a href="#选项一：使用一份已有的代码规范" class="headerlink" title="选项一：使用一份已有的代码规范"></a>选项一：使用一份已有的代码规范</h3><p>在网上搜一搜，就能找到不少已有的代码规范，其中 Google Style Guide 是最广为人知的。当然，如果它不适合你的话，你也可以用别的规范。使用已有的规范，你可以直接获得收益，而不需要从零开始创建一份规范。</p>
<p>直接复用一份现成的规范，缺点在于，这些规范可能是为了原团队中某些特殊需求而优化的。比如 Google 的代码规范，对于新的语言特性十分保守，因为他们有一个巨大无比的代码库，这些代码可能会运行在很多地方，从家庭路由器，到最新款的 iPhone 上。如果你所在的是只有四个人和一款产品的小型初创公司，那么你可能会更喜欢使用最尖端的语言特性或者扩展。</p>
<h3 id="选项二：渐进式地建立你自己的代码规范"><a href="#选项二：渐进式地建立你自己的代码规范" class="headerlink" title="选项二：渐进式地建立你自己的代码规范"></a>选项二：渐进式地建立你自己的代码规范</h3><p>如果不想直接使用现成的代码规范，当然可以自己创建一份。每当 code review 时产生了关于代码风格的争议，就把这个问题提给团队所有成员，来决定正式的标准。达成一致后，把这个标准写入你的代码规范中。</p>
<p>我一般喜欢把我团队的代码风格规范以 Markdown 的格式托管在版本控制软件之下（比如 Github pages）。这样，对规范的任何修改都会经过一个正式的 review 流程 —— 必须有某人明确地批准修改，团队中的任何人都有机会提出疑虑。用 Wiki 和 Google Docs 当然也是可以的。</p>
<h3 id="选项三：混合式的方法"><a href="#选项三：混合式的方法" class="headerlink" title="选项三：混合式的方法"></a>选项三：混合式的方法</h3><p>结合选项一和选项二，你可以用一份现成的代码规范，在它的基础上，建立你自己的代码格式规范。比如 Chromium C++ style guide 就是个很好的例子，它建立在 Google C++ style 的基础之上，但有它自己修改或添加的一些规则。</p>
<hr>
<h2 id="立刻开始-Review"><a href="#立刻开始-Review" class="headerlink" title="立刻开始 Review"></a>立刻开始 Review</h2><p>code review 应该被视作高优先级的事情。你阅读代码并提供反馈意见时，花点时间无所谓，但 review 必须要立刻开始 —— 最好是在几分钟内。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-6af6e2929dd5ab99294226aaffebcc27_720w.jpg"
                      alt="How"
                ><figcaption>How</figcaption></figure></p>
<h2 id="Code-Review-的接力赛"><a href="#Code-Review-的接力赛" class="headerlink" title="Code Review 的接力赛"></a>Code Review 的接力赛</h2><p>一旦团队成员提交给了你一份变更列表，这可能意味着在你的 review 完成之前，他们的工作会被阻塞住。虽然在理论上，版本控制系统可以让代码的作者切换到新的分支，然后把审核中的提交合并到新的分支，继续工作。但实际上，只有很少的人能高效率地做这些事情，因为这需要同时同步三个分支（译者注：master、review 中的分支、新分支）的变动。</p>
<p>当你立即开始 code review，你就创造了一个良性循环。你一轮 review 所需要花的时间，和变更列表的大小及复杂度成正相关。这就鼓励了代码的作者提交小范围的变更列表，这也让你的 review 变得更轻松愉悦，你的 review 也会更快，形成一个正向循环。</p>
<p>想象一下，你的小伙伴实现了一个新功能，需要改变 1000 行代码。 如果他们知道你可以在大约 2 小时内查看 200 行的更改列表，则可以将其功能分解为多个变更，每个约 200 行，于是你就可以在一两天内 review 完毕。 但是，如果你每个 review 都是拖了一天之后才开始 ，那么就需要花费几乎一周的时间才能做完 review。你的小伙伴当然不想就呆坐在那里一周，因此他们就会偏向于提交更大体积的 review，比如500-600行。 这些大的 review 要花的时间更多，而且会产生质量更差的反馈意见（因为你要在脑内记住 600 行的变化而不是 200 行）。</p>
<p>一轮 review 的最大周期应该限于一个工作日，如果你因为某些优先级更高的事情忙成狗了，那么请你告诉你的小伙伴，让他们把 review 的任务交给别人。如果每个月都有几次这样的情况发生，那就说明你的团队需要减速了，这样才能保证团队的开发不会失去控制（译者注：在中国就别想了）</p>
<hr>
<h2 id="自顶向下的方法"><a href="#自顶向下的方法" class="headerlink" title="自顶向下的方法"></a>自顶向下的方法</h2><p>你在一轮 review 中提出的问题越多，代码作者感到的压力就会越大。具体数量的限制因人而异，但一般一轮 review 提出的问题应该限制在 20 - 50 个之内。</p>
<p>如果你担心评论太多，把代码原作者淹没在茫茫的问题之中，那么建议你在早期的 review 中先关注一些高层次的问题，例如重新设计类的接口，以及分解复杂函数等。直到这些问题得到解决，再去关注低层次的问题，比如变量命名，或者代码注释的清晰程度。</p>
<p>代码原作者关注高层次问题时，一些低层次的问题可能会被忽视。把这些低层次问题暂时延后到下一轮 review，就可以避免重复检查这些低级问题，也可以节省代码原作者的时间。这个小技巧可以让你在 review 过程中对应该关注的层面进行细分，帮助你和原作者以一种更加清晰、系统的方式处理更改列表。</p>
<hr>
<h2 id="多写代码示例"><a href="#多写代码示例" class="headerlink" title="多写代码示例"></a>多写代码示例</h2><p>在理想的世界里，代码作者应该会很感谢他们收到的每一个 review，因为这是一个很好的学习机会，并且让他们纠正了错误。但在现实中，有诸多因素可能会导致作者负面地看待这些 review，并且反感你对他们代码的评论。也许他们正面临着压力，要在最后期限之前完成任务，所以除了即刻批准以外的任何事情都会被视为一种阻碍。 也许你们之间没有太多的合作经验，所以他们不相信你的反馈是好意的。</p>
<p>这有一个好方法，可以在 review 过程中舒缓作者的心情，那就是在 review 期间找机会送给他们礼物。所有开发者都喜欢接受的礼物是什么？那当然是，代码示例。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-a375be6b9b62daa8b708b5854ee6be76_720w.jpg"
                      alt="Good"
                ><figcaption>Good</figcaption></figure></p>
<p>你可以通过写一些示例代码来减轻作者的负担，以展现出你作为评审者的慷慨大度。</p>
<p>比如说，你有一个同事并不是很熟悉 Python 的列表推导特性，他给你发了如下的代码：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">urls = []</span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">  url = <span class="string">&#x27;https://&#x27;</span></span><br><span class="line">  url += domain</span><br><span class="line">  url += path</span><br><span class="line">  urls.append(url)</span><br></pre></td></tr></table></figure></div>

<p>作为回复，一句 “我们能不能用列表推导来简化这儿的代码？” 可能会让他们感到恼怒，因为他们或许需要花 20 分钟来搜索他们之前从没用过的东西。</p>
<p>但如果收到的评论是像下面这样，他们应该会很高兴：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">可以考虑这样简化代码：</span><br><span class="line">urls = [<span class="string">&#x27;https://&#x27;</span> + domain + path <span class="keyword">for</span> path <span class="keyword">in</span> paths]</span><br></pre></td></tr></table></figure></div>

<p>这个小技巧不仅限于单行代码。我会经常创建自己的分支来向原作者展示大量的概念，比如拆解一个大的函数，或者添加单元测试来覆盖额外的边界情况。</p>
<p>这个小技巧会让你得到明确的、无争议的改进。在上面的示例中，很少有人会反对将代码行数减少83％。相比之下，如果你写了个冗长的例子来展示你个人品味上觉得 “更好” 的示例（例如，代码风格），这会使你看起来更一意孤行，而不是开明大方。</p>
<p>当然示例代码也不能写得太多了，如果你为原作者写了几乎覆盖整个变更列表的示例代码，那就表示你不认为他们有能力编写自己的代码。</p>
<hr>
<h2 id="不要说“你”"><a href="#不要说“你”" class="headerlink" title="不要说“你”"></a>不要说“你”</h2><p>这听起来有些奇怪，但请相信我说的：在 code review 中，不要使用 “你” 这个词。</p>
<p>你在 review 中所做的评论应该是基于 “什么使得代码更好”，而不是 “谁提出了这个想法”。你的小伙伴在他们的变更列表上花费了大量的精力，他们当然会为他们所做的工作感到自豪，所以当收到批评时，自然会产生戒备心理。</p>
<p>你应该用一种最不会产生戒备心理的方式来评论代码。要记住你批评的是代码，而不是代码的作者。当代码的作者在评论里看到 “你” 这个词的时候，会把注意力从代码上转移到他们自己身上。这会加剧他们抗拒你的评论的可能性。</p>
<p>比如说下面这个无恶意的评论：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">你把 &#x27;successfully&#x27; 拼错了</span><br></pre></td></tr></table></figure></div>

<p>作者可能会把它读成两种意思：</p>
<ul>
<li>含义一：嘿，好兄弟！你把 ‘successfully’ 拼错了，但我认为你这么聪明，这应该只是一处小粗心吧！</li>
<li>含义二：你把 ‘successfully’ 拼错了！白痴！</li>
</ul>
<p>相比之下，如果你的评论里没有提及 “你” 这个词：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sucessfully -&gt; successfully</span><br></pre></td></tr></table></figure></div>

<p>这条评论就只是简单地纠正了拼写错误，没有包含任何对于作者的评价。<br>幸运的是，在评论中去掉 “你” 这个词非常容易。</p>
<h3 id="选项一：用-“我们”-代替-“你”"><a href="#选项一：用-“我们”-代替-“你”" class="headerlink" title="选项一：用 “我们” 代替 “你”"></a>选项一：用 “我们” 代替 “你”</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">你能不能把这个变量名写得更清晰一点？比如 seconds_remaining？</span><br></pre></td></tr></table></figure></div>

<p>修改之后：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们能不能把这个变量名写得更清晰一点？比如 seconds_remaining？</span><br></pre></td></tr></table></figure></div>

<p>“我们” 这个词强调了团队对于代码的责任。代码的作者可能未来会去别的公司，你也可能会，但这里的代码会被它所属的团队一直维护着。当然，用 “我们” 这个词听起来有些愚蠢，因为这显然是你作为一名评审者，要求作者做的事情，但愚蠢总比指责更好。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-d2e1d4399a4df909b1b26c12b2b0b08e_720w.jpg"
                      alt="指责"
                ><figcaption>指责</figcaption></figure></p>
<h3 id="选项二：移除句子的主语"><a href="#选项二：移除句子的主语" class="headerlink" title="选项二：移除句子的主语"></a>选项二：移除句子的主语</h3><p>避免使用 “你” 的另一个方法是移除句子的主语：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">建议使用更清晰的变量名，比如 seconds_remaining。</span><br></pre></td></tr></table></figure></div>

<p>当然被动语态也是可以的。虽然我在写技术文章时尽量避免使用被动语态，但它在 “你” 这个词的问题上确实有用处：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个变量应该使用更清晰的名字，比如 seconds_remaining。</span><br></pre></td></tr></table></figure></div>

<p>还有一种方法是把它化为一个问题：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">要把这个变量名换成更清晰的吗？比如 seconds_remaining？</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="使用请求的语气，而不是命令"><a href="#使用请求的语气，而不是命令" class="headerlink" title="使用请求的语气，而不是命令"></a>使用请求的语气，而不是命令</h2><p>Code review 比日常的交流需要更多的精力，因为很容易把讨论变成个人观点的碰撞。你总是期望评审者能在评论中保持礼貌，但奇怪的是，他们总是和期望相反。日常工作中，大多数人都不会对同事说：“把订书机拿给我，然后给我倒一杯苏打水过来。” 但 review 过程中却经常看到类似这样的评论：“把这个 class 放到另一个文件里。”</p>
<p>这样的语句经常会让你的评论令人恼怒。你的评论应该使用请求或者建议的语气，而不是命令。</p>
<p>比较下面这两种语气的区别：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-296c9359d034869cb0f1c8b98441765b_720w.jpg"
                      alt="命令"
                ><figcaption>命令</figcaption></figure></p>
<p>大多数人都喜欢完全掌控他们的工作，使用请求的语气可以让他们有自主的感觉。</p>
<p>另外，请求的语气也让作者更容易礼貌地推辞你的评论，或许他们是出于某些原因，考虑过后才写下的代码。如果你的语气是命令式的，那么作者的任何推辞和解释都会变成直接的不服从行为。如果你用的是请求或者提问的语气，那么作者可以简单地回复你。</p>
<p>比较下面这两种情况：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-53438cd9bde57d30f293d4d1ef6bf126_720w.jpg"
                      alt="请求"
                ><figcaption>请求</figcaption></figure></p>
<p>看，当你的语气变成请求式之后，是不是交流少了很多火气呢？</p>
<hr>
<h2 id="评论应该基于原则，而不是观点"><a href="#评论应该基于原则，而不是观点" class="headerlink" title="评论应该基于原则，而不是观点"></a>评论应该基于原则，而不是观点</h2><p>当你写下一条评论，要记得同时写下<em>要做什么</em>以及<em>为什么要做</em>。说 “我们应该把这个 class 切分成两个” 是不太好的，更好的说法是 “现在这个 class 负责下载并且解析文件。根据单一职责原则，我们应该把它切分成两个 class，一个负责下载，一个负责解析。”</p>
<p>你的评论应该是基于原则的，这样才可以让 review 是建设性的。当你有一个明确的理由为什么要这样做时，比如 “我们应该把这个方法私有化，以减少公共方法的数量”，作者一般都不会简单地回复 “不，我更喜欢现在这样”。即使他们这样简单地回复了，这样的回复也会看起来很傻，因为你都已经说明理由了，而他们只是因为个人偏好而拒绝你的理由。</p>
<p>软件开发既是一门艺术，也是一门科学。有些时候，即使有了既定的原则，你也不能清楚地证明一段代码是错误，因为有时代码只是丑陋或不直观而已。在这些情况下，请详细解释一下为什么，并保持客观。比如如果你说 “我觉得这很难理解”，这就是一个客观的陈述。但如果你说 “这里写得乱七八糟”，这就是一种价值判断，是仁者见仁智者见智的。</p>
<p>另外，在提供支持性材料的时候，尽可能以链接的形式附在后面。团队的代码风格规范是最好的，当然你也可以发一个语言或库文档的链接，高赞数的 StackOverflow 答案也可以。但是要知道的是，离权威性文档越远，材料就越无力。</p>
<hr>
<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>如果你喜欢这篇文章，还可以去看它的第二部分，着重于介绍如何让 Code Review 顺利完成，而不是各种碰壁。第二篇文章会介绍以下技巧：</p>
<ul>
<li>如何处理超大的 Code review</li>
<li>恰当地称赞对方</li>
<li>限制 Review 的范围</li>
<li>如何缓解僵局</li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>CodeReview</tag>
        <tag>代码质量</tag>
      </tags>
  </entry>
  <entry>
    <title>选择 www 或非 www URL 作为域名</title>
    <url>/2017/02/13/%E9%80%89%E6%8B%A9-www-%E6%88%96%E9%9D%9E-www-URL-%E4%BD%9C%E4%B8%BA%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<blockquote>
<p>选择非 www 或 www 作为网址，对于网站持有者是一个反复出现的问题。本页将会提供了一些有用的相关建议。</p>
</blockquote>
<h1 id="什么是域名？"><a href="#什么是域名？" class="headerlink" title="什么是域名？"></a>什么是域名？</h1><p>在 HTTP URL 中，跟在网址头部 http:&#x2F;&#x2F; 或 https:&#x2F;&#x2F; 后面的第一个子字符串称为域，它是网站文件资源所在的服务器的名称。</p>
<p>服务器不一定是物理机：几台服务器可以驻留在同一台物理机器上，或者一台服务器可以通过几台机器进行处理，协作处理并响应或负载均衡它们之间的请求。关键点在于语义上一个域名代表一个单独的服务器。</p>
<h1 id="所以，我只能选择其中一个做为我的网站的网址？"><a href="#所以，我只能选择其中一个做为我的网站的网址？" class="headerlink" title="所以，我只能选择其中一个做为我的网站的网址？"></a>所以，我只能选择其中一个做为我的网站的网址？</h1><p>是的，你必须选择其中之一，并坚持使用。选择并使用其中哪一个取决于你，但无论你选择那一个，保持下去。这将让你的网站在用户使用搜索引擎检索时更加准确与一致。这包括始终链接到所选域名（如果你在网站中使用相对网址，则不应该很难），也可以始终将链接（通过电子邮件&#x2F;社交网络等）共享使用同一个域名。<br>不，你不能有两个。最重要的是，你是保持的那一个官方的域名，这个官方域名被称为规范名称。你所有的绝对链接应该使用它。但即便如此，你仍然可以有其他域名使用：HTTP允许使用两种技术，以便它在使用规范域名的同时还允许非规范域名使用，使使用者或搜索引擎可以准确的访问到所预期的页面。<br>所以，选择其中一个作为你的域名的规范地址！下面有两种技术允许不规范的域名仍然起作用。</p>
<h1 id="规范网址方式"><a href="#规范网址方式" class="headerlink" title="规范网址方式"></a>规范网址方式</h1><p>选择下面有两种不同的方式使网站规范。</p>
<h3 id="使用HTTP301重定向"><a href="#使用HTTP301重定向" class="headerlink" title="使用HTTP301重定向"></a>使用HTTP301重定向</h3><p>在这种情况下，你需要配置服务器接收的HTTP请求（ 常见为 www 和非 www 网址相同）以及适当的HTTP响应 301 去响应所有非规范的域名请求。这会将尝试使访问非规范网址的浏览器重定向到其规范的等效网址。举例来说，如果您选择使用非 www 网址为规范类型，你的所有 www 网址都应该被重定向到对应的非 www 网址上。</p>
<p>例如：</p>
<ol>
<li>服务器收到 <a class="link"   href="http://www.example.org/whaddup" >http://www.example.org/whaddup <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 请求（当规范域名是 example.org 时）</li>
<li>服务器则以代码 301 与头 Location ：<a class="link"   href="http://example.org/whaddup" >http://example.org/whaddup <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>该客户端发出的规范的域名请求：<a class="link"   href="http://example.org/whatddup" >http://example.org/whatddup <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<p><a class="link"   href="https://github.com/h5bp/html5-boilerplate" >HTML5 boilerplate project <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  有一个示例 <a class="link"   href="https://github.com/h5bp/html5-boilerplate/blob/7a22a33d4041c479d0962499e853501073811887/.htaccess#L219-L258" >how to configure an Apache server to redirect one domain to the other <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 。</p>
<h3 id="使用-HTML-标签元素"><a href="#使用-HTML-标签元素" class="headerlink" title="使用 HTML 标签元素"></a>使用 HTML 标签元素</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;canonical&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>它可以将一个特殊的 HTML <link> 元素添加到网页指示什么网页的标准地址，这对页面的访问者没有影响，但在搜索引擎检索时会告诉搜索引擎当页面实际的地址。通过这种方式，搜索引擎不需要索引同一页面多次，那样可能导致它被视为重复的内容或垃圾邮件，甚至从搜索引擎结果中删除或者降低你的页面显示排名。</p>
<p>当加入这样一个标签，会告诉搜索引擎，你提供相同内容的两个域名那一个是规范的。<br>以上方为例，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.example.org/whaddup</span><br></pre></td></tr></table></figure></div>
<p>将提供与 </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.org/whaddup</span><br></pre></td></tr></table></figure></div>
<p> 相同的内容，但有一个附加的 <link> 头部元素：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">&quot;http://example.org/whaddup&quot;</span> rel=<span class="string">&quot;canonical&quot;</span>&gt; </span><br></pre></td></tr></table></figure></div>

<p>不同于以往，浏览器历史记录将考虑非 www 和 www 的网址作为独立的条目。</p>
<h1 id="请使用两者中的一个为你的网页服务"><a href="#请使用两者中的一个为你的网页服务" class="headerlink" title="请使用两者中的一个为你的网页服务"></a>请使用两者中的一个为你的网页服务</h1><p>有了这些技术，您可以将服务器配置为两个正确响应， www 的前缀和非 www 前缀的域名，这是要做到这一点，因为你无法预测哪些 URL 用户输入他们的浏览器的 URL 好的建议酒吧，这是选择你要作为规范的位置使用，然后重定向其他类型的它哪种类型的问题。</p>
<h1 id="根据情况决定使用"><a href="#根据情况决定使用" class="headerlink" title="根据情况决定使用"></a>根据情况决定使用</h1><p>可以认为这是一个非常主观 <a class="link"   href="http://bikeshed.com/" >bikeshedding <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 问题。 如果你想更深入的阅读，请参阅  <a class="link"   href="http://www.hyperarts.com/blog/www-vs-non-www-for-your-canonical-domain-url-which-is-best-and-why/" >WWW vs non-WWW for your Canonical Domain URL – Which is Best and Why? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，它可能提出进一步的见解。</p>
<h1 id="请参阅"><a href="#请参阅" class="headerlink" title="请参阅"></a>请参阅</h1><p><a class="link"   href="http://www.chrisfinke.com/2011/07/25/what-do-people-type-in-the-address-bar/" >Stats on what people type in the URL bar <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (2011)</p>
<h1 id="源网页"><a href="#源网页" class="headerlink" title="源网页"></a>源网页</h1><ul>
<li>英文版 <a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Choosing_between_www_and_non-www_URLs" >Choosing between www and non-www URLs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>中文版 <a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/%E9%80%89%E6%8B%A9_www_%E6%88%96%E9%9D%9E_www_URL_%E4%BD%9C%E4%B8%BA%E5%9F%9F%E5%90%8D" >选择 www 或非 www URL 作为域名 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Puls 批量插入实现</title>
    <url>/2024/07/03/MyBatis-Puls-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p><code>BaseMapper</code> 默认不提供批量插入</p>
</blockquote>
<h2 id="BaseMapper"><a href="#BaseMapper" class="headerlink" title="BaseMapper"></a>BaseMapper</h2><p>实体类对应的mapper在继承BaseMapper后，就可以使用以下Mybatis-plus提供的方法进行数据操作。<br>BaseMapper中默认提供一个insert()方法，仅支持数据的单条插入。如果有上万甚至数十万数据需要插入时，耗时过久。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="IService"><a href="#IService" class="headerlink" title="IService"></a>IService</h2><p>与BaseMapper相同，实体类对应接口在继承了IService后，可以调用其中提供的save(),saveBatch()进行插入操作。其中saveBatch()入参为list，可以实现批量插入。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IService</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认批次提交数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">DEFAULT_BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().insert(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入（批量）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> saveBatch(entityList, DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入（批量）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  插入批次数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> saveOrUpdateBatch(entityList, DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  每次的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是，saveBatch()方法实现的批量插入其实是伪批量，其底层实现仍然是一条条数据进行插入的。源码的解析就不贴了，有兴趣的小伙伴可以看一下这篇文章</p>
<p><a class="link"   href="https://www.cnblogs.com/chcha1/p/16340254.html" >为什么说saveBatch是伪批量插入? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="通过添加mapper层选装插件实现真正的批量插入"><a href="#通过添加mapper层选装插件实现真正的批量插入" class="headerlink" title="通过添加mapper层选装插件实现真正的批量插入"></a>通过添加mapper层选装插件实现真正的批量插入</h2><p>Mybatis-plus其实是有真正实现了批量插入的方法的，方法名是insertBatchSomeColumn()需要我们配合SQL注入器来开启。(可能是因为仅支持MySQL，所以作者没有将其设置为默认方法？)</p>
<p>开启insertBatchSomeColumn()可分为3个步骤:</p>
<h3 id="创建插件类"><a href="#创建插件类" class="headerlink" title="创建插件类"></a>创建插件类</h3><p>新建一个名为InsertBatchSqlInjector 的类，继承DefaultSqlInjector。（当然，类名可以根据自己的喜好来）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertBatchSqlInjector</span> <span class="keyword">extends</span> <span class="title class_">DefaultSqlInjector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title function_">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass, TableInfo tableInfo)</span> &#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="built_in">super</span>.getMethodList(mapperClass, tableInfo);</span><br><span class="line">        <span class="comment">// 添加InsertBatchSomeColumn方法</span></span><br><span class="line">        methodList.add(<span class="keyword">new</span> <span class="title class_">InsertBatchSomeColumn</span>());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="将SQL注入器交给Spring容器"><a href="#将SQL注入器交给Spring容器" class="headerlink" title="将SQL注入器交给Spring容器"></a>将SQL注入器交给Spring容器</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> InsertBatchSqlInjector insertBatchSqlInjector;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加批量插入插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GlobalConfig <span class="title function_">globalConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        globalConfig.setSqlInjector(insertBatchSqlInjector);</span><br><span class="line">        <span class="keyword">return</span> globalConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>💡 这一步中，有一点需要注意。如果你的MybatisPlusConfig类中自定义了sqlSessionFactory，上面的配置不会被加载到，需要在sqlSessionFactory中进行设置。</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;sqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;globalConfig&quot;)</span> GlobalConfig globalConfig )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        </span><br><span class="line">	<span class="comment">// 其他设置，与本话题无关</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加自定义sql注入接口</span></span><br><span class="line">    sqlSessionFactory.setGlobalConfig(globalConfig);<span class="comment">//添加自定义sql注入接口</span></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="配置自定义Mapper继承BaseMapper"><a href="#配置自定义Mapper继承BaseMapper" class="headerlink" title="配置自定义Mapper继承BaseMapper"></a>配置自定义Mapper继承BaseMapper</h3><p>新建BaseBatchMapper类，继承BaseMapper，并在此类中配置insertBatchSomeColumn()方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseBatchMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入 仅适用于mysql</span></span><br><span class="line"><span class="comment">     * 如果要自动填充，<span class="doctag">@Param</span>(xx) xx参数名必须是 list/collection/array 3个的其中之一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insertBatchSomeColumn</span><span class="params">(<span class="meta">@Param(&quot;list&quot;)</span> Collection&lt;T&gt; list)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后，用业务Mapper继承BaseBatchMapper就可以调用insertBatchSomeColumn()方法了。</p>
<blockquote>
<p>当然，如果在你的项目中，仅仅有一两个类需要用到批量插入，那完全没必要抽取一个BaseBatchMapper。直接用你的业务Mapper继承BaseMapper，并在对应业务Mapper中配置insertBatchSomeColumn()方法即可，代码同上。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://blog.csdn.net/knock_me/article/details/132165909" >Mybatis-plus实现【真·批量插入】 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Program</category>
        <category>Java</category>
        <category>ORM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务版本控制 Microservices Versioning</title>
    <url>/2024/07/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-Microservices-Versioning/</url>
    <content><![CDATA[<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><ul>
<li><a class="link"   href="https://www.codeguru.com/dotnet/best-practices-versioning-microservices/" >Best Practices in Microservices Versioning <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="What-is-Versioning-and-Why-is-it-Important-什么是版本控制-为什么它很重要"><a href="#What-is-Versioning-and-Why-is-it-Important-什么是版本控制-为什么它很重要" class="headerlink" title="What is Versioning and Why is it Important? 什么是版本控制?为什么它很重要?"></a>What is Versioning and Why is it Important? 什么是版本控制?为什么它很重要?</h2><p>版本控制是一种策略，可让您维护具有相同功能的多个服务。与传统应用程序不同，基于微服务的应用程序中的版本控制并不简单。</p>
<p>版本控制是 API 设计的重要组成部分，它使开发人员能够改进 API，而不会破坏其他版本 API 的现有功能。随着应用程序的不断发展和演变，企业通常需要提供新功能，以便客户可以使用此类服务​​。</p>
<p>微服务架构主张团队应独立设计、构建、测试和部署服务。因此，版本控制可能是一个挑战，因为服​​务兼容性可能会丢失。您应该以这样的方式设计微服务，以便在需要时可以恢复到以前的版本。</p>
<h2 id="Microservices-Versioning-微服务版本控制"><a href="#Microservices-Versioning-微服务版本控制" class="headerlink" title="Microservices Versioning 微服务版本控制"></a>Microservices Versioning 微服务版本控制</h2><p>假设您有一个在生产环境中运行的服务，并且有多个消费者。现在假设您需要为该服务添加更多功能以满足客户的需求。</p>
<p>由于旧服务有多个用户，您可能希望保留现有功能。因此，您可能有一些用户需要旧服务，而其他用户则需要具有新功能或扩展功能的版本。这正是 API 版本控制发挥作用的地方。</p>
<p>阅读: <a class="link"   href="https://www.developer.com/design/transition-to-microservices/" >Transitioning to Microservices – Are You Ready? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Microservices-Versioning-Strategies-微服务版本控制策略"><a href="#Microservices-Versioning-Strategies-微服务版本控制策略" class="headerlink" title="Microservices Versioning Strategies 微服务版本控制策略"></a>Microservices Versioning Strategies 微服务版本控制策略</h2><p>微服务应该随着时间推移而发展——它们应该能够表现出多种行为以满足不同客户的需求。这正是微服务版本控制的作用所在。</p>
<p>基于微服务的应用程序 API 版本控制最常见的两种方式是：</p>
<ul>
<li>URI 中的版本控制</li>
<li>标题中的版本控制</li>
</ul>
<p>微服务的版本控制有点棘手。虽然团队设计、开发和部署彼此独立的微服务，但这在版本控制方面带来了问题。虽然您应该设计一个基于微服务的应用程序来支持该服务的多个版本，但这需要额外的路由逻辑来帮助应用程序在运行时支持同一微服务的多个版本。</p>
<p>阅读: <a class="link"   href="https://www.developer.com/java/version-rest-api/" >Read: Versioning REST APIs. <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="URI-Versioning-URI-版本控制"><a href="#URI-Versioning-URI-版本控制" class="headerlink" title="URI Versioning URI 版本控制"></a>URI Versioning URI 版本控制</h2><p>在此方法中，版本信息作为服务 URL 的一部分提供。这样您就可以识别正在使用的服务版本。您应该将 URL 中未指定版本的服务请求重定向到服务的默认版本。以下是 URI 中使用版本信息的示例:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://myecommerceapp/v1.1.2/v1/GetAllProducts</span><br><span class="line">http://myecommerceapp/v2.0.0/GetProducts</span><br></pre></td></tr></table></figure></div>

<p>URI 修订通常用于更新服务的公共 API。它不会对其后端数据存储进行任何重大更改。使用 URI 版本控制的缺点是，随着时间的推移，处理非常大的 URI 占用空间可能会变得难以管理。</p>
<p>以下代码片段展示了如何实现启用版本控制的控制器。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SaveRequestResponseHeader.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>] </span><br><span class="line">    [<span class="meta">ApiVersion(<span class="string">&quot;1.0&quot;</span>)</span>] </span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;api/&#123;version:apiVersion&#125;/product&quot;</span>)</span>] </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductV1Controller</span> : <span class="title">ControllerBase</span> </span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet</span>] </span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span> </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OkObjectResult(<span class="string">&quot;Inside Product v1 Controller&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Header-Versioning-标头版本控制"><a href="#Header-Versioning-标头版本控制" class="headerlink" title="Header Versioning 标头版本控制"></a>Header Versioning 标头版本控制</h2><p>在此方法中，版本信息使用请求标头传递。HTTP 协议中的几个标头属性之一是内容版本。标头驱动的版本控制使用此属性来指定服务。</p>
<p>标头版本控制的主要好处是资源的名称和位置保持不变。这可确保 URI 不会因版本信息而杂乱无章，并且 API 对开发人员而言仍然具有语义意义。</p>
<p>这种方法有一个缺点：信息无法轻松地编码在超媒体链接中。以下是在 ASP.NET Core 中配置基于标头的版本控制的方法。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        services.AddControllers();</span><br><span class="line">        services.AddApiVersioning(config =&gt; &#123;</span><br><span class="line">        config.DefaultApiVersion = <span class="keyword">new</span> ApiVersion(<span class="number">1</span>, <span class="number">0</span>); </span><br><span class="line">        config.AssumeDefaultVersionWhenUnspecified = <span class="literal">true</span>; </span><br><span class="line">        config.ReportApiVersions = <span class="literal">true</span>; </span><br><span class="line">        config.ApiVersionReader = </span><br><span class="line">        <span class="keyword">new</span> HeaderApiVersionReader(<span class="string">&quot;x-api-version&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="Semantic-Versioning-语义版本控制"><a href="#Semantic-Versioning-语义版本控制" class="headerlink" title="Semantic Versioning 语义版本控制"></a>Semantic Versioning 语义版本控制</h2><p>语义版本控制是另一种版本控制策略，其中每个版本使用三个非负整数表示，即Major、Minor和Patch。使用语义版本控制指定版本信息的格式如下：MAJOR.MINOR.PATCH 以下是每个版本的含义：</p>
<ul>
<li><strong>主要版本(Major)</strong> 主要版本表示对 API 的重大更改。如果由于版本发生重大更改导致 API 与新版本不兼容，则可以增加此版本。</li>
<li><strong>次要版本(Minor)</strong> 当您拥有兼容的软件版本但业务逻辑已发生更改时，将增加次要版本。</li>
<li><strong>补丁(Patch)</strong> 如果旧版本与新版本兼容，但更新版本中修复了错误，则应增加此值。</li>
</ul>
<p>次要版本和补丁版本通常用于向后兼容更新。在语义版本控制中，版本号是根据更改的严重程度分配的。</p>
<p>例如，v1.0.1是一个小改动，只有几个补丁，而v1.1.0是一个小改动。如果您的服务有重大变化，您可以将版本号设为v2.0.0。</p>
<p>以下是使用语义版本控制调用 API 的方法。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://api.product.com/v1.2.3/GetProducts </span><br></pre></td></tr></table></figure></div>

<p>如果您正在从事的项目有多个模块之间相互依赖，那么语义版本控制是一个不错的选择。</p>
<h2 id="Calendar-Versioning-日历版本控制"><a href="#Calendar-Versioning-日历版本控制" class="headerlink" title="Calendar Versioning 日历版本控制"></a>Calendar Versioning 日历版本控制</h2><p>日历版本控制是一种语义版本控制，利用日历日期代替非负整数。它不固定特定的格式 - 相反，它使用年、月、日的组合，并允许您从各种年、月、日组合中进行选择。</p>
<p>对于受时间限制的应用程序来说，日历版本控制是一个不错的选择。与语义版本控制不同，用于指定日历版本控制的格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAJOR.MINOR.MICRO </span><br></pre></td></tr></table></figure></div>

<p>请注意，在语义版本控制中，MICRO被称为PATCH 。</p>
<p>阅读: <a class="link"   href="https://www.developer.com/mobile/android/understanding-android-versioning/" >Understanding Android Versioning. <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Program</category>
        <category>Architecture</category>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column </title>
    <url>/2024/07/05/MySQL-Expression-1-of-SELECT-list-is-not-in-GROUP-BY-clause-and-contains-nonaggregated-column/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line">Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Expression <span class="comment">#1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;db.table.id&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span></span><br></pre></td></tr></table></figure></div>

<p>这个错误通常是因为 MySQL 数据库的 <code>sql_mode</code> 设置了 <code>only_full_group_by</code>，导致在执行 SQL 查询时，必须将 GROUP BY 子句中的每个非聚合列都包含在 SELECT 列表中。如果查询中的 SELECT 列表包含非聚合列，但没有在 GROUP BY 子句中指定，就会导致这个错误。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><h3 id="方法一-调整查询语句"><a href="#方法一-调整查询语句" class="headerlink" title="方法一: 调整查询语句"></a>方法一: 调整查询语句</h3><p>在 SQL 查询中，确保将 SELECT 列表中的每个列都包含在 GROUP BY 子句中。如果查询是这样的: </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> max_salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure></div>

<p>要解决问题，应该将 id 列也包含在 GROUP BY 子句中: </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> max_salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> id, name;</span><br></pre></td></tr></table></figure></div>

<h3 id="方法二-修改-MySQL-的-sql-mode"><a href="#方法二-修改-MySQL-的-sql-mode" class="headerlink" title="方法二: 修改 MySQL 的 sql_mode"></a>方法二: 修改 MySQL 的 sql_mode</h3><p>如果不方便修改查询语句或者需要保持现有查询逻辑，可以修改 MySQL 的 sql_mode，移除 only_full_group_by。这样做需要注意，因为 only_full_group_by 是 MySQL 的一种严格模式，移除它可能会导致在某些情况下出现不符合预期的查询结果。</p>
<p>可以通过以下步骤来修改 MySQL 的 sql_mode: </p>
<p>打开 MySQL 配置文件，通常位于 <code>/etc/mysql/my.cnf</code> 或 <code>/etc/my.cnf</code>。</p>
<p>找到 sql_mode 配置项，类似于: </p>
<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">sql_mode</span> = <span class="string">&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>移除其中的 only_full_group_by，或者将整个 sql_mode 设置为适合的值。</p>
<p>重启 MySQL 服务使修改生效: </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure></div>

<p>请注意，在生产环境中修改 sql_mode 之前，请务必进行充分的测试，并确保了解可能带来的影响。</p>
<h3 id="方法三-使用-MySQL-的-ANY-VALUE-函数"><a href="#方法三-使用-MySQL-的-ANY-VALUE-函数" class="headerlink" title="方法三: 使用 MySQL 的 ANY_VALUE() 函数"></a>方法三: 使用 MySQL 的 ANY_VALUE() 函数</h3><p>在 MySQL 5.7 版本及以上，可以使用 ANY_VALUE() 函数来解决这个问题。这个函数可以避免严格模式下 GROUP BY 子句中非聚合列的问题。例如: </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ANY_VALUE(id), name, <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> max_salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure></div>

<h2 id="方法四-使用-SQL-设置-sql-mode"><a href="#方法四-使用-SQL-设置-sql-mode" class="headerlink" title="方法四: 使用 SQL 设置 sql_mode"></a>方法四: 使用 SQL 设置 sql_mode</h2><p>命令行 设置 <code>sql_mode=only_full_group_by</code></p>
<p>在登录到 MySQL 后，可以执行以下命令查看当前的 sql_mode 设置: </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@sql_mode</span>;</span><br></pre></td></tr></table></figure></div>

<p>这将显示当前的 sql_mode 配置。</p>
<p>设置新的 sql_mode</p>
<p>要设置 sql_mode，可以使用 SET GLOBAL 或 SET SESSION 命令。一般来说，全局设置需要超级用户权限，而会话级别设置只对当前连接有效，不需要特殊权限。</p>
<p>设置会话级别的 sql_mode: </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION sql_mode <span class="operator">=</span> <span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,...&#x27;</span>;  <span class="comment">-- 添加或替换需要的 sql_mode 值</span></span><br></pre></td></tr></table></figure></div>

<p>设置全局级别的 sql_mode（需要超级用户权限）: </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> GLBAL sql_mode <span class="operator">=</span> <span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,...&#x27;</span>;  <span class="comment">-- 添加或替换需要的 sql_mode 值</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意: 全局级别的设置会影响所有新连接到 MySQL 的会话，而会话级别的设置仅对当前会话有效。</p>
</blockquote>
<p>验证设置是否生效</p>
<p>设置完成后，可以再次执行 <code>SELECT @@sql_mode;</code> 命令来验证新的 sql_mode 是否已生效。</p>
<p>永久修改配置文件</p>
<p>如果希望永久修改 sql_mode，可以编辑 MySQL 的配置文件（如 &#x2F;etc&#x2F;mysql&#x2F;my.cnf 或 &#x2F;etc&#x2F;my.cnf），找到 sql_mode 配置项，并修改为需要的值。然后重启 MySQL 服务使修改生效: </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure></div>

<p>这样修改后，MySQL 将会在每次启动时使用新的 sql_mode 设置。</p>
<blockquote>
<p>注意事项:<br>修改 sql_mode 可能会影响到现有的应用程序和查询行为，请确保在生产环境中进行充分测试。<br>建议仅修改和删除有必要的 sql_mode 设置，以确保数据库的安全性和一致性。<br>在修改全局级别的 sql_mode 时需要特别注意，避免对其他应用产生不必要的影响。<br>通过以上步骤，可以在命令行中设置 MySQL 的 sql_mode，解决与 only_full_group_by 相关的 SQL 查询问题。<br>这样可以避免 id 列不在 GROUP BY 子句中的问题。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据具体情况，选择适合的方法来解决 <code>Expression #1 of SELECT list is not in GROUP BY clause</code> 错误。一般建议优先考虑调整查询语句或使用 <code>ANY_VALUE()</code> 函数来符合严格的 <code>sql_mode</code> 要求，保持数据库的安全性和一致性。</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot MyBatis 缓存关闭</title>
    <url>/2024/07/05/SpringBoot-MyBatis-%E7%BC%93%E5%AD%98%E5%85%B3%E9%97%AD/</url>
    <content><![CDATA[<p>在 Spring Boot 中使用 MyBatis，并且想要关闭缓存，可以通过以下几种方法来实现：</p>
<h2 id="方法一：在-MyBatis-配置文件中关闭缓存"><a href="#方法一：在-MyBatis-配置文件中关闭缓存" class="headerlink" title="方法一：在 MyBatis 配置文件中关闭缓存"></a>方法一：在 MyBatis 配置文件中关闭缓存</h2><p>在 MyBatis 的 XML 配置文件(通常是 <code>mybatis-config.xml</code>)中配置关闭缓存的选项。</p>
<p>创建或编辑 MyBatis 配置文件</p>
<p>如果项目中没有 <code>mybatis-config.xml</code> 文件，可以创建一个。示例配置如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关闭缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在 <code>&lt;settings&gt;</code> 下添加 <code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;false&quot;/&gt;</code>，这将关闭所有 MyBatis 映射器的缓存。</p>
<p>在 Spring Boot 中引入 MyBatis 配置</p>
<p>如果在 Spring Boot 中使用 <code>application.properties</code> 或 <code>application.yml</code> 进行 MyBatis 配置，需要在配置文件中指定 MyBatis 配置文件的位置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure></div>

<p>或者在 Java 配置中指定：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sessionFactory.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 MyBatis 配置文件路径</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        sessionFactory.setConfigLocation(resource);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方法二：在-Mapper-接口中禁用缓存"><a href="#方法二：在-Mapper-接口中禁用缓存" class="headerlink" title="方法二：在 Mapper 接口中禁用缓存"></a>方法二：在 Mapper 接口中禁用缓存</h2><p>另一种方法是在具体的 Mapper 接口或方法上禁用缓存。</p>
<p>在 Mapper 接口中配置</p>
<p>在需要禁用缓存的 Mapper 接口方法上添加 <code>@Options(useCache = false)</code> 注解。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options(useCache = false)</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样做会针对该方法禁用缓存。</p>
<h2 id="方法三：在-application-properties-或-application-yml-中配置"><a href="#方法三：在-application-properties-或-application-yml-中配置" class="headerlink" title="方法三：在 application.properties 或 application.yml 中配置"></a>方法三：在 application.properties 或 application.yml 中配置</h2><p>如果使用 Spring Boot 的自动配置，可以在 <code>application.properties</code> 或 <code>application.yml</code> 文件中配置全局的 MyBatis 属性，包括缓存配置。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="attr">configuration:</span></span><br><span class="line">        <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></div>

<p>这种方法会在全局范围内禁用 MyBatis 的缓存。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>缓存的作用：MyBatis 的缓存能够显著提高查询效率，因此在关闭缓存之前，请确保了解其对系统性能的影响。<br>多种方法选择：根据实际需求选择合适的方法，可以是全局禁用、局部禁用或配置文件中配置禁用。<br>通过以上方法，可以在 Spring Boot 中关闭 MyBatis 的缓存功能。</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>Java</category>
        <category>ORM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Mybaits</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF 与 CORS</title>
    <url>/2024/07/06/CSRF-%E4%B8%8E-CORS/</url>
    <content><![CDATA[<p><code>CSRF(Cross-Site Request Forgery)</code>和<code>CORS(Cross-Origin Resource Sharing)</code>都是与Web安全和跨域资源共享相关的概念，但它们解决的问题和应对的场景有所不同。</p>
<ol>
<li><p>CSRF(跨站请求伪造)：CSRF是一种攻击方式，攻击者通过伪造用户已认证的请求，使用户在不知情的情况下执行恶意操作。攻击者通常利用用户的身份验证凭据，以用户的身份执行未经授权的操作，可能导致数据泄露、账户劫持等问题。为了防止CSRF攻击，常见的做法是在请求中包含一个随机生成的令牌(CSRF令牌)，并在服务器端进行验证，确保请求是来自合法的来源。</p>
</li>
<li><p>CORS(跨域资源共享)：CORS是一种机制，允许Web应用程序从不同的源头(域、协议、端口)请求资源，而不受浏览器的同源策略限制。同源策略是浏览器的安全策略，它限制了一个源头的文档或脚本如何与其他源头的资源进行交互。通过CORS，服务器可以指定哪些源头(域)有权限访问资源，从而确保跨域请求的安全性。</p>
</li>
</ol>
<p>区别总结如下：</p>
<ul>
<li>CSRF是一种攻击方式，而CORS是一种机制。</li>
<li>CSRF关注的是恶意请求的安全性，而CORS关注的是跨域资源共享的安全性。</li>
<li>CSRF攻击利用用户身份进行未经授权的操作，而CORS允许合法的跨域请求。</li>
</ul>
<p>在Web应用程序中，为了保护用户和资源的安全性，我们需要同时考虑防止CSRF攻击和使用CORS机制来进行跨域资源共享。</p>
<p>希望对你有所帮助！如果还有其他问题，请随时提问。</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 引用类型 Reference</title>
    <url>/2024/07/08/Java-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B-Reference/</url>
    <content><![CDATA[<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/reference/reference_1.webp"
                      alt="Reference"
                ><figcaption>Reference</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/reference/reference_2.webp"
                      alt="Reference"
                ><figcaption>Reference</figcaption></figure></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>每一种语言都有着自己操作内存元素的方式，C语言通过指针，而java就是通过引用。作为一门面向对象的语言，在java中世事万物皆对象。但是我们操作的标识符实际上是对象的一个引用 reference。今天我们来分析一下java中的四种引用。</p>
</blockquote>
<h3 id="引用的历史"><a href="#引用的历史" class="headerlink" title="引用的历史"></a>引用的历史</h3><p>在Java中，我们的垃圾回收机制回收垃圾对象的时候就会依据对象的引用。比如说通过不同的垃圾回收算法，这里有两种：引用计数法和可达性分析法</p>
<ol>
<li>引用计数法：为每个对象添加一个引用计数器，每当有一个引用指向它时，计数器就加1，当引用失效时，计数器就减1，当计数器为0时，则认为该对象可以被回收。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/reference/reference_3.webp"
                      alt="Reference"
                ><figcaption>Reference</figcaption></figure></li>
<li>可达性分析算法：从一个被称为 GC Roots 的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/reference/reference_4.webp"
                      alt="Reference"
                ><figcaption>Reference</figcaption></figure></li>
</ol>
<p>目前的垃圾回收基本上采用第二种方式，第一种方式基本上已经被舍弃了。<br>在jdk1.2之前，java对引用的概念只有“已被引用”和”未被引用”两种状态。后来所以在 JDK.1.2 之后，Java 对引用的概念进行了扩充，将引用分为了：强引用、软引用、弱引用、虚引用4 种，也就是我们今天所讲的主题。这 4 种引用的强度依次减弱。</p>
<h2 id="Java-有四种引用类型："><a href="#Java-有四种引用类型：" class="headerlink" title="Java 有四种引用类型："></a>Java 有四种引用类型：</h2><ol>
<li>强引用</li>
<li>软引用</li>
<li>弱引用</li>
<li>虚引用</li>
</ol>
<p>四种引用的级别由高到低依次为：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用。</p>
<h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>在 Java 中最常见的就是强引用， 把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即使该对象以后永远都不会被用到 JVM 也不会回收，因此强引用是造成 Java 内存泄漏的主要原因之一。所以要想回收该对象，则应该将指向该对象的变量显示设为 null，这样该对象就由强引用转变为无引用了。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助垃圾收集器回收此对象</span></span><br><span class="line">str = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用需要用 SoftReference 类来实现，对于只有软引用的对象来说，当系统内存足够时它不会被回收，当系统内存空间不足时它会被回收。软引用通常用在对内存敏感的程序中。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>); </span><br><span class="line"><span class="comment">// 软引用</span></span><br><span class="line">SoftReference&lt;String&gt; softRef = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;String&gt;(str);</span><br></pre></td></tr></table></figure></div>

<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用需要用 WeakReference 类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管 JVM 的内存空间是否足够，总会回收该对象占用的内存。弱引用也可以用于缓存，可以参考 WeakHashMap 类。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">// 弱引用</span></span><br><span class="line">WeakReference&lt;String&gt; weakRef = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;String&gt;(str);</span><br></pre></td></tr></table></figure></div>

<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用需要 PhantomReference 类来实现，它不能单独使用，必须和引用队列联合使用。 虚引用的主要作用是跟踪对象被垃圾回收的状态。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">//创建引用队列</span></span><br><span class="line">ReferenceQueue&lt;String&gt; refQueue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>();</span><br><span class="line"><span class="comment">//创建的虚引用</span></span><br><span class="line">PhantomReference&lt;String&gt; phantomRef = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;&gt;(str, refQueue);</span><br><span class="line"><span class="comment">//phantomRef.get()总是返回null</span></span><br></pre></td></tr></table></figure></div>

<hr>
<table>
<thead>
<tr>
<th>引用类型</th>
<th>阻止GC?</th>
<th>回收时机</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>强引用</td>
<td>是</td>
<td>显式null化后</td>
<td>普通对象引用</td>
</tr>
<tr>
<td>软引用</td>
<td>否</td>
<td>内存不足时</td>
<td>内存敏感的缓存</td>
</tr>
<tr>
<td>弱引用</td>
<td>否</td>
<td>随时可能</td>
<td>非必须的对象引用，允许随时回收</td>
</tr>
<tr>
<td>虚引用</td>
<td>否</td>
<td>随时可能，对象即将被回收</td>
<td>跟踪对象被垃圾收集器回收的活动</td>
</tr>
<tr>
<td>GC Roots</td>
<td>否</td>
<td>从不回收</td>
<td>作为垃圾收集器的起始点</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Program</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 文件上传大小设置</title>
    <url>/2024/07/06/Spring-Boot-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">20MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">200MB</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway: An expected CSRF token cannot be found</title>
    <url>/2024/07/06/Spring-Cloud-Gateway-An-expected-CSRF-token-cannot-be-found/</url>
    <content><![CDATA[<blockquote>
<p>An expected CSRF token cannot be found</p>
</blockquote>
<p>因为mvc和gateway冲突，而配置了：<code>spring.main.web-application-type=reactive</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">    http.csrf(ServerHttpSecurity.CsrfSpec::disable);</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影 分类</title>
    <url>/2024/07/07/%E6%91%84%E5%BD%B1-%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<ul>
<li><p>从广义上分类分为两大门类：第一类：记录摄影 ，第二类：艺术摄影 。</p>
<p>  从小类分有：静物摄影、人像摄影、记录摄影、艺术摄影、画意摄影、商业摄影、水墨摄影、全息摄影等等。</p>
</li>
</ul>
<h2 id="静物摄影"><a href="#静物摄影" class="headerlink" title="静物摄影"></a>静物摄影</h2><p>一种艺术流派，主要是通过图像来展现无生命的元素（食物，游戏，水果，鲜花，各种物体……），在艺术家定义的框架内以某种方式组合，多以工业或手工制成品、自然存在的无生命物体等为拍摄题材。在真实反映被摄体固有特征的基础上，经过创意构思，并结合构图、光线、影调、色彩等摄影手段进行艺术创作，将拍摄对象表现成具有艺术美感的摄影作品。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070704.png"
                      alt="静物"
                ><figcaption>静物</figcaption></figure></p>
<h2 id="人像摄影"><a href="#人像摄影" class="headerlink" title="人像摄影"></a>人像摄影</h2><p>人像摄影与一般的人物摄影不同：人像摄影以刻画与表现被摄者的具体相貌和神态为自身的首要创作任务，人物摄影是以表现有被摄者参与的事件与活动为主，它以表现具体的情节为主要任务，而不在于以鲜明的形象去表现被摄者的相貌和神态。</p>
<p>只要是以表现被摄者具体的外貌和精神状态为主的照片，都属于人像摄影的范畴。当然，它分作照相室人像、室内特定环境人像和户外人像三大类。人像摄影的要求是“形神兼备”。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/202407070A.png"
                      alt="人像"
                ><figcaption>人像</figcaption></figure></p>
<h2 id="记录摄影"><a href="#记录摄影" class="headerlink" title="记录摄影"></a>记录摄影</h2><p>纪录摄影指以纪录为第一目的，对客观事物进行真实影像反映的图片摄影。</p>
<p>摄影之所以诞生，就是为了记录的目的。它诞生之后所显示出来的强大的生命力，也恰恰在于它的记录功能。这是其他技术或艺术所无法比拟或取代的。按照纪录影像的方式和追求的价值不同来划分，纪录摄影分为新闻摄影和纪实摄影。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070701.png"
                      alt="记录"
                ><figcaption>记录</figcaption></figure></p>
<h2 id="艺术摄影"><a href="#艺术摄影" class="headerlink" title="艺术摄影"></a>艺术摄影</h2><p>随着的发展，人们在摄影中不断地增加艺术的元素，开始产生艺术摄影。它与记录摄影的区别在于艺术性的多少与高低，而无绝对的界限。艺术摄影拍出来的效果更唯美，因为这不仅需要技术，还要找准拍摄的时间、地点和角度。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070702.png"
                      alt="艺术"
                ><figcaption>艺术</figcaption></figure></p>
<h2 id="画意摄影"><a href="#画意摄影" class="headerlink" title="画意摄影"></a>画意摄影</h2><p>画意摄影以其唯美的画面语言及美好的设计内涵一直是人像摄影的一种重要的表达方式。画意摄影逐渐成为摄影艺术中的一个重要流派。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070706.png"
                      alt="画意"
                ><figcaption>画意</figcaption></figure></p>
<h2 id="商业摄影"><a href="#商业摄影" class="headerlink" title="商业摄影"></a>商业摄影</h2><p>商业摄影，顾名思义是指作为商业用途而开展的摄影活动。这类摄影是为商业利益而存在的，要按照企业要求进行拍摄，比较拘束。</p>
<hr>
<h2 id="纪实摄影"><a href="#纪实摄影" class="headerlink" title="纪实摄影"></a>纪实摄影</h2><p>纪实摄影是抓拍真实场景或事件的摄影风格。它追求对事实的真实和生动的展示，表现出对生活、社会和人性的深入理解和揭示。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070710.png"
                      alt="纪实"
                ><figcaption>纪实</figcaption></figure></p>
<h2 id="战地摄影"><a href="#战地摄影" class="headerlink" title="战地摄影"></a>战地摄影</h2><p>战地摄影是指在战争和矛盾危机等情况下拍摄的摄影风格，追求传达悲痛、突出真相、强调反战思想等特点。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070711.png"
                      alt="战地"
                ><figcaption>战地</figcaption></figure></p>
<h2 id="街头摄影"><a href="#街头摄影" class="headerlink" title="街头摄影"></a>街头摄影</h2><p>街头摄影是指摄影师在街头、公共场所等公共场合拍摄人和城市景观的摄影风格。它注重情感和思维的传递和场景分析。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070708.png"
                      alt="街头"
                ><figcaption>街头</figcaption></figure></p>
<h2 id="风景摄影"><a href="#风景摄影" class="headerlink" title="风景摄影"></a>风景摄影</h2><p>风景摄影是指以自然风景（如山脉、河流、海滨、森林）作为主要拍摄内容的摄影风格。它注重展现色彩、光线和节奏的美感。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070707.png"
                      alt="风景"
                ><figcaption>风景</figcaption></figure></p>
<h2 id="色彩摄影"><a href="#色彩摄影" class="headerlink" title="色彩摄影"></a>色彩摄影</h2><p>色彩摄影是指以色彩作为主要表现手段的摄影风格，突出色彩鲜艳、强调色彩对表现力的贡献。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070709.png"
                      alt="色彩"
                ><figcaption>色彩</figcaption></figure></p>
<h2 id="黑白摄影"><a href="#黑白摄影" class="headerlink" title="黑白摄影"></a>黑白摄影</h2><p>黑白摄影是指去除了色彩的影像，它强调光影、黑白和构图等因素的运用，追求影像的纯粹和力度。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070708.png"
                      alt="黑白"
                ><figcaption>黑白</figcaption></figure></p>
<h2 id="女性摄影"><a href="#女性摄影" class="headerlink" title="女性摄影"></a>女性摄影</h2><p>女性摄影是指以女性和女性社群为主要拍摄对象的摄影风格，它注重女性在身体、社会和文化中的角色和地位。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/2024070705.png"
                      alt="女性"
                ><figcaption>女性</figcaption></figure></p>
<h2 id="蒙太奇摄影"><a href="#蒙太奇摄影" class="headerlink" title="蒙太奇摄影"></a>蒙太奇摄影</h2><p>蒙太奇摄影是一种艺术化的摄影风格，它强调利用摄影过程中的纹理、色彩和形状，使多张影像组合在一起，形成一个视觉艺术品。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/202407070C.png"
                      alt="蒙太奇"
                ><figcaption>蒙太奇</figcaption></figure></p>
<h2 id="抽象摄影"><a href="#抽象摄影" class="headerlink" title="抽象摄影"></a>抽象摄影</h2><p>抽象摄影是指通过不同的拍摄技巧（如长曝光、移动摄影等），摄影师可以创造出特殊的图像，使图像脱离现实，发展出自己的意义。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/202407070F.png"
                      alt="抽象"
                ><figcaption>抽象</figcaption></figure></p>
<h2 id="科技摄影"><a href="#科技摄影" class="headerlink" title="科技摄影"></a>科技摄影</h2><p>科技摄影是指使用高科技技术，如红外线、芯片、激光、雷达等进行拍摄和处理，以探索和创造新的影像和图像效果。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/202407070E.png"
                      alt="科技"
                ><figcaption>科技</figcaption></figure></p>
<h2 id="人文摄影"><a href="#人文摄影" class="headerlink" title="人文摄影"></a>人文摄影</h2><p>人文摄影是一种文化性的摄影形式，强调人们的生活、文化、传统和历史，注重照片背后的故事和人类关系。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/photography/20240707/202407070D.png"
                      alt="人文"
                ><figcaption>人文</figcaption></figure></p>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义DNS拦截</title>
    <url>/2024/07/07/%E8%87%AA%E5%AE%9A%E4%B9%89DNS%E6%8B%A6%E6%88%AA/</url>
    <content><![CDATA[<blockquote>
<p>在本机上自定义DNS拦截通常涉及到修改系统的DNS设置，以使用自定义的DNS服务器或应用程序来拦截和修改DNS查询请求。以下是一些常见的方法来实现本机DNS拦截：</p>
</blockquote>
<ol>
<li><p><strong>修改系统DNS设置</strong>：</p>
<ul>
<li>对于Windows系统，可以在网络适配器的属性中修改DNS服务器地址。</li>
<li>对于macOS，可以在系统偏好设置中的网络部分修改DNS设置。</li>
</ul>
</li>
<li><p><strong>使用本地DNS服务</strong>：</p>
<ul>
<li>运行一个本地DNS服务器，如BIND、dnsmasq或Unbound，然后配置系统使用该服务器作为DNS解析的首选服务器。</li>
</ul>
</li>
<li><p><strong>使用代理软件</strong>：</p>
<ul>
<li>使用如Squid、Shadowsocks或V2Ray等代理软件，它们可以配置为拦截DNS请求并将其转发到指定的DNS服务器。</li>
</ul>
</li>
<li><p><strong>修改<code>/etc/hosts</code>文件</strong>：</p>
<ul>
<li>在Linux或macOS上，可以在<code>/etc/hosts</code>文件中添加自定义的域名和IP映射，以拦截特定的域名解析。</li>
</ul>
</li>
<li><p><strong>使用操作系统的网络策略</strong>：</p>
<ul>
<li>在Windows上，可以使用组策略编辑器或注册表来设置特定的DNS拦截规则。</li>
<li>在macOS上，可以使用Network Configuration Profiles来设置DNS拦截。</li>
</ul>
</li>
<li><p><strong>使用第三方DNS拦截工具</strong>：</p>
<ul>
<li>有些第三方应用程序专门用于DNS拦截，如AdGuard、Pi-hole等。</li>
</ul>
</li>
<li><p><strong>使用防火墙规则</strong>：</p>
<ul>
<li>配置防火墙规则来拦截DNS查询请求，并将其重定向到自定义的DNS服务器。</li>
</ul>
</li>
<li><p><strong>使用VPN</strong>：</p>
<ul>
<li>通过VPN连接，可以强制所有流量通过VPN服务器，该服务器可以配置为使用自定义的DNS设置。</li>
</ul>
</li>
<li><p><strong>编程实现拦截</strong>：</p>
<ul>
<li>对于高级用户，可以通过编写脚本或程序来拦截系统发出的DNS查询，并根据需要进行处理。</li>
</ul>
</li>
</ol>
<blockquote>
<p>修改DNS设置可能会影响网络连接的稳定性和安全性，因此在实施任何更改之前，请确保了解可能的后果，并始终从可信的来源获取DNS服务器地址。此外，一些方法可能需要管理员权限或特定的技术知识。</p>
</blockquote>
]]></content>
      <categories>
        <category>Program</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway 4种接口放行方式</title>
    <url>/2024/07/08/Spring-Cloud-Gateway-4%E7%A7%8D%E6%8E%A5%E5%8F%A3%E6%94%BE%E8%A1%8C%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="4种接口过滤方式"><a href="#4种接口过滤方式" class="headerlink" title="4种接口过滤方式"></a>4种接口过滤方式</h2><h3 id="使用Spring-Cloud-Gateway的路由规则，在application-yml文件中定义predicates和filters"><a href="#使用Spring-Cloud-Gateway的路由规则，在application-yml文件中定义predicates和filters" class="headerlink" title="使用Spring Cloud Gateway的路由规则，在application.yml文件中定义predicates和filters"></a>使用Spring Cloud Gateway的路由规则，在application.yml文件中定义predicates和filters</h3><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/login</span> <span class="comment"># 只放行/user/login接口</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用Spring-Security的配置，在application-yml文件中定义ignoreUrls"><a href="#使用Spring-Security的配置，在application-yml文件中定义ignoreUrls" class="headerlink" title="使用Spring Security的配置，在application.yml文件中定义ignoreUrls"></a>使用Spring Security的配置，在application.yml文件中定义ignoreUrls</h3><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">ignoreUrls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/user/login</span> <span class="comment"># 放行/user/login接口</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用自定义过滤器，在GatewayFilterFactory中实现自己的逻辑"><a href="#使用自定义过滤器，在GatewayFilterFactory中实现自己的逻辑" class="headerlink" title="使用自定义过滤器，在GatewayFilterFactory中实现自己的逻辑"></a>使用自定义过滤器，在GatewayFilterFactory中实现自己的逻辑</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;AuthGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequest().getURI().getPath();</span><br><span class="line">            <span class="keyword">if</span> (path.equals(<span class="string">&quot;/user/login&quot;</span>)) &#123; <span class="comment">// 放行/user/login接口</span></span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 其他逻辑...</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="comment">// 配置属性...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用自定义路由仓库，在RouteDefinitionRepository中实现自己的逻辑"><a href="#使用自定义路由仓库，在RouteDefinitionRepository中实现自己的逻辑" class="headerlink" title="使用自定义路由仓库，在RouteDefinitionRepository中实现自己的逻辑"></a>使用自定义路由仓库，在RouteDefinitionRepository中实现自己的逻辑</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisRouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title class_">RouteDefinitionRepository</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title function_">getRouteDefinitions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从Redis中获取路由定义，并根据需要放行接口...</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存路由定义到Redis中...</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> &#123;</span><br><span class="line">        <span class="comment">// 从Redis中删除路由定义...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="四种方式的优缺点"><a href="#四种方式的优缺点" class="headerlink" title="四种方式的优缺点"></a>四种方式的优缺点</h2><ul>
<li>使用Spring Cloud Gateway的路由规则，优点是简单方便，可以在配置文件中定义多种路由条件和过滤器，支持动态刷新和自定义扩展；缺点是可能不够灵活，需要遵循Spring Cloud Gateway的规范和约束。</li>
<li>使用Spring Security的配置，优点是可以利用Spring Security提供的强大的安全功能，如认证、授权、加密等；缺点是需要额外引入Spring Security依赖，并且可能与其他过滤器冲突或重复。</li>
<li>使用自定义过滤器，优点是可以实现自己的业务逻辑和需求，有更高的灵活性和可定制性；缺点是需要编写更多的代码，并且可能需要考虑性能、异常处理、兼容性等问题。</li>
<li>使用自定义路由仓库，优点是可以实现自己的路由存储和管理方式，如使用Redis或数据库等；缺点是需要编写更多的代码，并且可能需要考虑数据同步、缓存、事务等问题。</li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch(ES) 与 ClickHouse</title>
    <url>/2024/07/09/Elasticsearch-ES-%E4%B8%8E-ClickHouse/</url>
    <content><![CDATA[<blockquote>
<p>Elasticsearch（ES）与 ClickHouse 都是优秀的数据存储和查询工具，但它们在适用场景和重点方面有所不同。具体来说，选择哪个工具更适合做业务数据查询取决于你的具体需求和业务情况。</p>
</blockquote>
<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p><strong>适用场景：</strong></p>
<ol>
<li><p><strong>全文搜索和复杂查询：</strong> Elasticsearch 最初设计用于文本搜索，它支持复杂的全文搜索查询，包括文本分析、词条查询、短语查询等。</p>
</li>
<li><p><strong>实时数据分析和监控：</strong> Elasticsearch 能够处理实时更新的数据，并且提供了强大的实时数据分析和聚合能力，适合于日志分析、实时指标监控等场景。</p>
</li>
<li><p><strong>高可用性和扩展性：</strong> Elasticsearch 具备高可用性和水平扩展的能力，可以构建分布式集群处理大规模数据。</p>
</li>
<li><p><strong>复杂数据结构支持：</strong> 支持复杂的数据结构和嵌套文档，能够存储和查询复杂的业务对象。</p>
</li>
<li><p><strong>搜索结果排序和分数计算：</strong> Elasticsearch 能够根据文档的相关性得分进行搜索结果排序，适合需要精细控制搜索结果的场景。</p>
</li>
</ol>
<h3 id="ClickHouse"><a href="#ClickHouse" class="headerlink" title="ClickHouse"></a>ClickHouse</h3><p><strong>适用场景：</strong></p>
<ol>
<li><p><strong>大规模数据分析和聚合：</strong> ClickHouse 是一个专门用于数据分析和聚合的列式存储数据库，特别擅长处理大量的数据集。</p>
</li>
<li><p><strong>高性能的聚合查询：</strong> ClickHouse 提供了非常高效的聚合查询能力，支持快速的汇总和统计操作，适合于大数据量的统计分析。</p>
</li>
<li><p><strong>低延迟的复杂查询：</strong> ClickHouse 能够在处理大数据量时保持低延迟，特别适合需要在大数据集上执行复杂查询的场景。</p>
</li>
<li><p><strong>存储效率和压缩：</strong> ClickHouse 使用列式存储，能够提供高效的存储和数据压缩，节约存储空间和提高查询性能。</p>
</li>
<li><p><strong>数据仓库和数据湖支持：</strong> ClickHouse 可以作为数据仓库或者数据湖的一部分，支持高效的数据仓库查询和数据湖分析。</p>
</li>
</ol>
<h3 id="选择哪个工具？"><a href="#选择哪个工具？" class="headerlink" title="选择哪个工具？"></a>选择哪个工具？</h3><ul>
<li><p><strong>如果你的主要需求是进行复杂的全文搜索、实时数据分析和监控，或者需要处理复杂的数据结构，那么 Elasticsearch 更适合。</strong></p>
</li>
<li><p><strong>如果你的主要需求是大规模的数据分析、高性能的聚合查询和低延迟的复杂查询，特别是在数据量非常大的情况下，那么 ClickHouse 更适合。</strong></p>
</li>
</ul>
<h3 id="综合考虑"><a href="#综合考虑" class="headerlink" title="综合考虑"></a>综合考虑</h3><p>在一些场景中，Elasticsearch 和 ClickHouse 可以结合使用，利用它们各自的优势来解决不同层面的数据需求。例如，可以使用 Elasticsearch 进行实时数据的搜索和分析，同时将历史数据存储在 ClickHouse 中，用于大规模的数据分析和复杂的查询操作。</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>Data</category>
      </categories>
      <tags>
        <tag>Data</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常见的分布式任务调度框架</title>
    <url>/2024/07/09/Java-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>Quartz、XXL-Job、PowerJob 和 ElasticJob 都是常见的分布式任务调度框架，每个框架都有其特定的优势和适用场景。</p>
</blockquote>
<h3 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h3><ul>
<li><strong>类型：</strong> Quartz 是一个轻量级的开源任务调度框架，适合用于传统的 Java 任务调度和定时任务管理。</li>
<li><strong>特点：</strong><ul>
<li>提供丰富的任务调度功能，支持多种触发器（SimpleTrigger、CronTrigger 等）。</li>
<li>可以与 Spring 框架集成，支持声明式的配置。</li>
<li>提供基于内存或 JDBC 的任务存储。</li>
<li>可以独立使用或嵌入到应用中。</li>
</ul>
</li>
<li><strong>适用场景：</strong> 适合小型到中型的任务调度场景，对任务调度的精确度和可靠性有较高要求的项目。</li>
</ul>
<h3 id="XXL-Job"><a href="#XXL-Job" class="headerlink" title="XXL-Job"></a>XXL-Job</h3><ul>
<li><strong>类型：</strong> XXL-Job 是一个开源的分布式任务调度平台，专门为解决大规模任务调度问题设计。</li>
<li><strong>特点：</strong><ul>
<li>提供可视化的任务管理界面，支持在线配置任务和监控任务执行情况。</li>
<li>支持分布式任务调度，可以部署多个执行器（Executor）实现任务分片。</li>
<li>提供基于数据库存储任务信息，具备较好的扩展性和稳定性。</li>
<li>内置了报警机制和任务失败重试机制。</li>
</ul>
</li>
<li><strong>适用场景：</strong> 适合企业级应用，需要大规模、分布式任务调度和管理的场景，如数据处理、定时报表生成等。</li>
</ul>
<h3 id="PowerJob"><a href="#PowerJob" class="headerlink" title="PowerJob"></a>PowerJob</h3><ul>
<li><strong>类型：</strong> PowerJob 是一个开源的分布式任务调度平台，具有简单易用和高扩展性的特点。</li>
<li><strong>特点：</strong><ul>
<li>提供 Web 可视化界面管理任务，支持在线配置、监控任务执行情况。</li>
<li>支持分布式任务调度，可以水平扩展。</li>
<li>提供基于数据库存储任务信息，并且支持多种存储引擎。</li>
<li>内置了任务依赖管理和失败重试机制。</li>
</ul>
</li>
<li><strong>适用场景：</strong> 适合需要可视化管理和高扩展性的分布式任务调度应用，如数据处理、消息处理等。</li>
</ul>
<h3 id="ElasticJob"><a href="#ElasticJob" class="headerlink" title="ElasticJob"></a>ElasticJob</h3><ul>
<li><strong>类型：</strong> ElasticJob 是一个开源的分布式任务调度解决方案，主要用于处理大规模数据处理和分布式任务调度。</li>
<li><strong>特点：</strong><ul>
<li>提供了分布式作业的解决方案，支持数据分片和分布式调度。</li>
<li>内置了多种作业类型，如简单作业、数据流作业、脚本作业等。</li>
<li>可以与 ZooKeeper、Redis 等作为分布式协调服务进行集成。</li>
<li>支持任务的弹性扩展和灵活配置。</li>
</ul>
</li>
<li><strong>适用场景：</strong> 适合需要大规模数据处理和分布式任务调度的场景，如大数据处理、实时数据处理等。</li>
</ul>
<h3 id="选择适合的框架"><a href="#选择适合的框架" class="headerlink" title="选择适合的框架"></a>选择适合的框架</h3><ul>
<li><strong>Quartz</strong> 是一个通用的任务调度框架，适合于传统的 Java 任务调度需求，特别是在单机或简单分布式场景下使用。</li>
<li><strong>XXL-Job</strong> 和 <strong>PowerJob</strong> 都专注于企业级的大规模任务调度，提供了更强大的可视化管理和分布式调度能力。</li>
<li><strong>ElasticJob</strong> 则更加注重于分布式任务处理和大数据处理场景，支持更灵活的作业类型和分布式协调。</li>
</ul>
<p>根据具体的项目需求和技术栈选择合适的框架是关键。例如，如果需要高度可视化的管理界面和企业级的分布式任务调度能力，可以考虑 XXL-Job 或 PowerJob；如果涉及到大规模数据处理和分布式任务，ElasticJob 是一个不错的选择。</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>Job</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Framework</tag>
        <tag>Job</tag>
        <tag>Distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 后台运行脚本</title>
    <url>/2024/07/09/npm-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>在 Windows 系统上，如果你想要通过 npm 运行脚本并且让其在后台运行，可以借助一些工具或命令来实现。以下是几种常见的方法：</p>
<h3 id="1-使用-npm-命令"><a href="#1-使用-npm-命令" class="headerlink" title="1. 使用 npm 命令"></a>1. 使用 <code>npm</code> 命令</h3><p>通常情况下，<code>npm</code> 命令运行脚本时会在当前命令行窗口中执行，并且不会自动后台运行。但可以通过以下方法尝试：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm run your-script-name &amp;</span><br></pre></td></tr></table></figure></div>

<p>在 Windows 中，<code>&amp;</code> 符号可以用来将命令放入后台运行。请注意，某些 npm 脚本可能会要求特定的终端支持。</p>
<h3 id="2-使用-start-命令"><a href="#2-使用-start-命令" class="headerlink" title="2. 使用 start 命令"></a>2. 使用 <code>start</code> 命令</h3><p>在 Windows 中，<code>start</code> 命令可以启动一个新的命令行窗口并执行命令，允许命令在后台运行。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">start npm run your-script-name</span><br></pre></td></tr></table></figure></div>

<p>这将在一个新的命令行窗口中启动 npm 脚本，并使其在后台运行。</p>
<h3 id="3-使用第三方工具"><a href="#3-使用第三方工具" class="headerlink" title="3. 使用第三方工具"></a>3. 使用第三方工具</h3><p>如果以上方法无法满足需求，可以考虑使用第三方工具来将 npm 脚本或任何命令行进程后台运行，例如：</p>
<ul>
<li><p><strong><code>pm2</code></strong>: 是一个强大的进程管理工具，可以用来管理和监控 Node.js 应用程序，也可以用来运行 npm 脚本，并且支持后台运行。</p>
  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br><span class="line">pm2 start npm -- run your-script-name</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong><code>screen</code></strong>: 是一个在 Unix 和类 Unix 系统上运行命令的工具，但也有 Windows 版本或类似工具。它可以创建和管理多个虚拟控制台，并且可以在其中运行命令并将其保持在后台运行。</p>
</li>
</ul>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul>
<li>在使用 <code>start</code> 命令或其他工具时，可能需要根据具体的 npm 脚本和环境进行适当的调整和配置。</li>
<li>在后台运行命令时，要确保能够方便地查看输出和管理进程。</li>
<li>对于长期运行的服务或进程，建议使用专门的进程管理工具，以便进行监控和管理。</li>
</ul>
<p>选择合适的方法取决于你的具体需求和环境。</p>
]]></content>
      <categories>
        <category>Program</category>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 脚本 Windows to Linux 文件传输</title>
    <url>/2024/07/10/Python-%E8%84%9A%E6%9C%AC-Windows-to-Linux-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<p>要在 Python 中实现从 Windows 到 Linux 的文件传输，可以使用多种方法，这里介绍两种常见的方式：使用 Paramiko 库进行 SSH 文件传输和使用 SCP 命令的 subprocess 模块。</p>
<h3 id="方法一：使用-Paramiko-进行-SSH-文件传输"><a href="#方法一：使用-Paramiko-进行-SSH-文件传输" class="headerlink" title="方法一：使用 Paramiko 进行 SSH 文件传输"></a>方法一：使用 Paramiko 进行 SSH 文件传输</h3><p>Paramiko 是一个用于 SSHv2 协议的 Python 实现，可以通过它来建立 SSH 连接，并在 Windows 上执行 Python 脚本来传输文件到 Linux。</p>
<ol>
<li><p><strong>安装 Paramiko</strong></p>
<p>在 Windows 上安装 Paramiko 库：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>编写 Python 脚本</strong></p>
<p>下面是一个简单的示例脚本，演示如何使用 Paramiko 在 Windows 上将文件传输到 Linux 主机：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH 连接信息</span></span><br><span class="line">hostname = <span class="string">&#x27;your_linux_server_ip&#x27;</span></span><br><span class="line">port = <span class="number">22</span></span><br><span class="line">username = <span class="string">&#x27;your_linux_username&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;your_linux_password&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地文件路径</span></span><br><span class="line">local_path = <span class="string">r&#x27;C:\path\to\your\file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程目标路径</span></span><br><span class="line">remote_path = <span class="string">&#x27;/home/your_username/file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 SSH 连接</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(hostname, port, username, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 SFTP 协议传输文件</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line">sftp.put(local_path, remote_path)</span><br><span class="line">sftp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 SSH 连接</span></span><br><span class="line">ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;File <span class="subst">&#123;os.path.basename(local_path)&#125;</span> transferred successfully to <span class="subst">&#123;hostname&#125;</span>:<span class="subst">&#123;remote_path&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>将 <code>your_linux_server_ip</code> 替换为你的 Linux 服务器 IP 地址。</li>
<li>将 <code>your_linux_username</code> 和 <code>your_linux_password</code> 替换为 Linux 服务器的用户名和密码。</li>
<li>将 <code>local_path</code> 替换为你要传输的本地文件路径。</li>
<li>将 <code>remote_path</code> 替换为 Linux 上的目标路径，用于存储传输的文件。</li>
</ul>
</li>
<li><p><strong>运行 Python 脚本</strong></p>
<p>在 Windows 上运行这个 Python 脚本，它会连接到指定的 Linux 服务器，并将文件传输到远程目标路径。</p>
</li>
</ol>
<h3 id="方法二：使用-SCP-命令和-subprocess-模块"><a href="#方法二：使用-SCP-命令和-subprocess-模块" class="headerlink" title="方法二：使用 SCP 命令和 subprocess 模块"></a>方法二：使用 SCP 命令和 subprocess 模块</h3><p>另一种常见的方法是使用 Python 的 <code>subprocess</code> 模块来执行 SCP 命令，直接调用系统的 SCP 工具进行文件传输。</p>
<ol>
<li><p><strong>确保本地 Windows 上有安装 SCP 客户端。</strong></p>
<p>通常可以通过安装 Git for Windows 或者单独安装 SCP 客户端来获取 SCP 工具。</p>
</li>
<li><p><strong>编写 Python 脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地文件路径</span></span><br><span class="line">local_path = <span class="string">r&#x27;C:\path\to\your\file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程目标路径</span></span><br><span class="line">remote_path = <span class="string">&#x27;your_linux_username@your_linux_server_ip:/home/your_username/file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SCP 命令</span></span><br><span class="line">scp_command = <span class="string">f&#x27;scp &quot;<span class="subst">&#123;local_path&#125;</span>&quot; <span class="subst">&#123;remote_path&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 SCP 命令</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    subprocess.run(scp_command, shell=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;File <span class="subst">&#123;local_path&#125;</span> transferred successfully to <span class="subst">&#123;remote_path&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>将 <code>local_path</code> 替换为你要传输的本地文件路径。</li>
<li>将 <code>remote_path</code> 替换为 Linux 上的目标路径，格式为 <code>username@server_ip:path/to/remote/file.txt</code>。</li>
</ul>
</li>
<li><p><strong>运行 Python 脚本</strong></p>
<p>在 Windows 上运行这个 Python 脚本，它会调用系统的 SCP 工具，将文件传输到指定的 Linux 服务器。</p>
</li>
</ol>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul>
<li>确保 Windows 上的网络连接能够访问到 Linux 服务器。</li>
<li>在使用 Paramiko 或 SCP 传输文件时，建议确保 Linux 服务器的 SSH 服务正常运行，并且有相应的权限和路径可用于文件传输。</li>
<li>根据实际情况，可以根据需要进行进一步的错误处理和安全设置，比如使用 SSH 密钥认证替代密码认证等。</li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 脚本 进度条显示</title>
    <url>/2024/07/10/Python-%E8%84%9A%E6%9C%AC-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>在 Python 脚本中加入进度条显示通常可以通过第三方库来实现。具体到文件传输的场景，可以使用 <code>tqdm</code> 库来显示进度条，无论是使用 Paramiko 还是 SCP 命令都可以适用。下面分别介绍如何在这两种情况下添加进度条显示。</p>
<h3 id="使用-tqdm-显示进度条"><a href="#使用-tqdm-显示进度条" class="headerlink" title="使用 tqdm 显示进度条"></a>使用 <code>tqdm</code> 显示进度条</h3><p>首先，确保已经安装 <code>tqdm</code> 库：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tqdm</span><br></pre></td></tr></table></figure></div>

<h4 id="1-使用-Paramiko-实现文件传输并显示进度条"><a href="#1-使用-Paramiko-实现文件传输并显示进度条" class="headerlink" title="1. 使用 Paramiko 实现文件传输并显示进度条"></a>1. 使用 Paramiko 实现文件传输并显示进度条</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH 连接信息</span></span><br><span class="line">hostname = <span class="string">&#x27;your_linux_server_ip&#x27;</span></span><br><span class="line">port = <span class="number">22</span></span><br><span class="line">username = <span class="string">&#x27;your_linux_username&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;your_linux_password&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地文件路径</span></span><br><span class="line">local_path = <span class="string">r&#x27;C:\path\to\your\file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程目标路径</span></span><br><span class="line">remote_path = <span class="string">&#x27;/home/your_username/file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本地文件大小</span></span><br><span class="line">local_file_size = os.path.getsize(local_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 SSH 连接</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(hostname, port, username, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 SFTP 协议传输文件</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示进度条</span></span><br><span class="line"><span class="keyword">with</span> tqdm(total=local_file_size, unit=<span class="string">&#x27;B&#x27;</span>, unit_scale=<span class="literal">True</span>, desc=<span class="string">f&#x27;Uploading <span class="subst">&#123;os.path.basename(local_path)&#125;</span>&#x27;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">data_transferred, total_size</span>):</span><br><span class="line">        pbar.update(data_transferred - pbar.n)</span><br><span class="line"></span><br><span class="line">    sftp.put(local_path, remote_path, callback=callback)</span><br><span class="line"></span><br><span class="line">sftp.close()</span><br><span class="line">ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;File <span class="subst">&#123;os.path.basename(local_path)&#125;</span> transferred successfully to <span class="subst">&#123;hostname&#125;</span>:<span class="subst">&#123;remote_path&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>tqdm(total=local_file_size, unit=&#39;B&#39;, unit_scale=True, desc=f&#39;Uploading &#123;os.path.basename(local_path)&#125;&#39;)</code>：设置进度条，<code>total</code> 参数设置为文件大小，<code>desc</code> 参数设置进度条描述。</li>
<li><code>callback</code> 函数用于在传输过程中更新进度条。</li>
</ul>
<h4 id="2-使用-SCP-命令和-subprocess-实现文件传输并显示进度条"><a href="#2-使用-SCP-命令和-subprocess-实现文件传输并显示进度条" class="headerlink" title="2. 使用 SCP 命令和 subprocess 实现文件传输并显示进度条"></a>2. 使用 SCP 命令和 <code>subprocess</code> 实现文件传输并显示进度条</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地文件路径</span></span><br><span class="line">local_path = <span class="string">r&#x27;C:\path\to\your\file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程目标路径</span></span><br><span class="line">remote_path = <span class="string">&#x27;your_linux_username@your_linux_server_ip:/home/your_username/file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本地文件大小</span></span><br><span class="line">local_file_size = os.path.getsize(local_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SCP 命令</span></span><br><span class="line">scp_command = <span class="string">f&#x27;scp &quot;<span class="subst">&#123;local_path&#125;</span>&quot; <span class="subst">&#123;remote_path&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示进度条</span></span><br><span class="line"><span class="keyword">with</span> tqdm(total=local_file_size, unit=<span class="string">&#x27;B&#x27;</span>, unit_scale=<span class="literal">True</span>, desc=<span class="string">f&#x27;Copying <span class="subst">&#123;os.path.basename(local_path)&#125;</span>&#x27;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_progress</span>(<span class="params">chunk</span>):</span><br><span class="line">        pbar.update(chunk)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        process = subprocess.Popen(scp_command, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            output = process.stderr.read(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> output:</span><br><span class="line">                update_progress(<span class="built_in">len</span>(output))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        process.wait()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;File <span class="subst">&#123;local_path&#125;</span> transferred successfully to <span class="subst">&#123;remote_path&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>tqdm(total=local_file_size, unit=&#39;B&#39;, unit_scale=True, desc=f&#39;Copying &#123;os.path.basename(local_path)&#125;&#39;)</code>：设置进度条，<code>total</code> 参数设置为文件大小，<code>desc</code> 参数设置进度条描述。</li>
<li><code>update_progress</code> 函数用于在传输过程中更新进度条。</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>在使用 Paramiko 或者 SCP 命令传输文件时，进度条的更新通常依赖于回调函数或者实时读取输出流的长度。</li>
<li><code>tqdm</code> 库提供了丰富的配置选项，可以根据需求进行进一步定制，比如调整单位、显示格式等。</li>
<li>确保在传输大文件时，进度条的更新是基于传输数据量而不是文件读写操作的频率，以确保进度条的准确性和平滑显示。</li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 脚本 进度条显示 2 样式美化</title>
    <url>/2024/07/11/Python-%E8%84%9A%E6%9C%AC-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%98%BE%E7%A4%BA-2-%E6%A0%B7%E5%BC%8F%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p><code>tqdm</code> 增加 <code>bar_format</code> , <code>ascii</code> 配置</p>
<blockquote>
<p>注意 <code>ascii=&quot;-━&quot;</code> 需两个字符<br>首字符 <code>-</code> 为背景<br>尾字符 <code>━</code> 为实际进度</p>
</blockquote>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ChaoSBYNN/image-hosting/main/program/process_bar.png"
                      alt="效果"
                ><figcaption>效果</figcaption></figure></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH 连接信息</span></span><br><span class="line">hostname = <span class="string">&#x27;your_linux_server_ip&#x27;</span></span><br><span class="line">port = <span class="number">22</span></span><br><span class="line">username = <span class="string">&#x27;your_linux_username&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;your_linux_password&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程目标路径</span></span><br><span class="line">remote_path = <span class="string">&#x27;/home/target_path/file.txt&#x27;</span></span><br><span class="line">base_path = <span class="string">r&#x27;E:\source_path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 os.path.join() 拼接路径</span></span><br><span class="line">local_path = os.path.join(base_path, filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程目标路径</span></span><br><span class="line">remote_path = <span class="string">&#x27;/root/&#x27;</span> + filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本地文件大小</span></span><br><span class="line">local_file_size = os.path.getsize(local_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 SSH 连接</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(hostname, port, username, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 SFTP 协议传输文件</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进度条样式</span></span><br><span class="line">bar_format = <span class="string">&quot;&#123;desc&#125;: &#123;percentage:3.0f&#125;%|&#123;bar:42&#125;| &#123;n_fmt&#125;/&#123;total_fmt&#125; [&#123;elapsed&#125;&lt;&#123;remaining&#125;, &#123;rate_fmt&#125;]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示进度条</span></span><br><span class="line"><span class="keyword">with</span> tqdm(total=local_file_size,</span><br><span class="line">          unit=<span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">          unit_scale=<span class="literal">True</span>,</span><br><span class="line">          desc=<span class="string">f&#x27;Uploading <span class="subst">&#123;os.path.basename(local_path)&#125;</span>&#x27;</span>,</span><br><span class="line">          bar_format=bar_format,</span><br><span class="line">          <span class="built_in">ascii</span>=<span class="string">&quot;-━&quot;</span>,</span><br><span class="line">          ncols=<span class="number">42</span>,</span><br><span class="line">          colour=<span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">          dynamic_ncols=<span class="literal">True</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">data_transferred, total_size</span>):</span><br><span class="line">        pbar.update(data_transferred - pbar.n)</span><br><span class="line"></span><br><span class="line">    sftp.put(local_path, remote_path, callback=callback)</span><br><span class="line">sftp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 SSH 连接</span></span><br><span class="line">ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;File <span class="subst">&#123;os.path.basename(local_path)&#125;</span> transferred successfully to <span class="subst">&#123;hostname&#125;</span>:<span class="subst">&#123;remote_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Program</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
</search>
